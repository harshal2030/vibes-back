diff --git a/node_modules/react-native-navigation/.DS_Store b/node_modules/react-native-navigation/.DS_Store
new file mode 100644
index 0000000..1f1bfa7
Binary files /dev/null and b/node_modules/react-native-navigation/.DS_Store differ
diff --git a/node_modules/react-native-navigation/.npmrc b/node_modules/react-native-navigation/.npmrc
new file mode 100644
index 0000000..521a9f7
--- /dev/null
+++ b/node_modules/react-native-navigation/.npmrc
@@ -0,0 +1 @@
+legacy-peer-deps=true
diff --git a/node_modules/react-native-navigation/Mock.d.ts b/node_modules/react-native-navigation/Mock.d.ts
deleted file mode 100644
index 96a78fa..0000000
--- a/node_modules/react-native-navigation/Mock.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export * from './lib/Mock';
diff --git a/node_modules/react-native-navigation/Mock.js b/node_modules/react-native-navigation/Mock.js
deleted file mode 100644
index a03a050..0000000
--- a/node_modules/react-native-navigation/Mock.js
+++ /dev/null
@@ -1,4 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const tslib_1 = require("tslib");
-(0, tslib_1.__exportStar)(require("./lib/Mock"), exports);
diff --git a/node_modules/react-native-navigation/lib/.DS_Store b/node_modules/react-native-navigation/lib/.DS_Store
new file mode 100644
index 0000000..18b69a9
Binary files /dev/null and b/node_modules/react-native-navigation/lib/.DS_Store differ
diff --git a/node_modules/react-native-navigation/lib/Mock/Components/LayoutComponent.tsx b/node_modules/react-native-navigation/lib/Mock/Components/LayoutComponent.tsx
index d400aa6..637e3ec 100644
--- a/node_modules/react-native-navigation/lib/Mock/Components/LayoutComponent.tsx
+++ b/node_modules/react-native-navigation/lib/Mock/Components/LayoutComponent.tsx
@@ -19,8 +19,10 @@ export const LayoutComponent = class extends Component<ComponentProps> {
     return <View />;
   }
   componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
-    throw new Error(
-      `Error while trying to render layout ${this.props.layoutNode.nodeId} of type ${this.props.layoutNode.type}: ${error}\n${errorInfo?.componentStack}`
+    const err =  new Error(
+      `Error while trying to render layout ${this.props.layoutNode.nodeId} of type ${this.props.layoutNode.type}: ${error}\n${errorInfo?.componentStack}`,
     );
+    (err as any).cause = error;
+    throw err;
   }
 };
diff --git a/node_modules/react-native-navigation/lib/Mock/constants.d.ts b/node_modules/react-native-navigation/lib/Mock/constants.d.ts
deleted file mode 100644
index 8d1f084..0000000
--- a/node_modules/react-native-navigation/lib/Mock/constants.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export declare const VISIBLE_SCREEN_TEST_ID = "VISIBLE_SCREEN_TEST_ID";
-export declare const VISIBLE_OVERLAY_TEST_ID = "VISIBLE_OVERLAY_TEST_ID";
diff --git a/node_modules/react-native-navigation/lib/Mock/constants.js b/node_modules/react-native-navigation/lib/Mock/constants.js
deleted file mode 100644
index 56d8535..0000000
--- a/node_modules/react-native-navigation/lib/Mock/constants.js
+++ /dev/null
@@ -1,5 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.VISIBLE_OVERLAY_TEST_ID = exports.VISIBLE_SCREEN_TEST_ID = void 0;
-exports.VISIBLE_SCREEN_TEST_ID = 'VISIBLE_SCREEN_TEST_ID';
-exports.VISIBLE_OVERLAY_TEST_ID = 'VISIBLE_OVERLAY_TEST_ID';
diff --git a/node_modules/react-native-navigation/lib/Mock/index.d.ts b/node_modules/react-native-navigation/lib/Mock/index.d.ts
deleted file mode 100644
index f949ee0..0000000
--- a/node_modules/react-native-navigation/lib/Mock/index.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export declare const ApplicationMock: any;
-export * from './constants';
-export declare function mockNativeComponents(): void;
diff --git a/node_modules/react-native-navigation/lib/Mock/index.js b/node_modules/react-native-navigation/lib/Mock/index.js
deleted file mode 100644
index 26e72e8..0000000
--- a/node_modules/react-native-navigation/lib/Mock/index.js
+++ /dev/null
@@ -1,14 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.mockNativeComponents = exports.ApplicationMock = void 0;
-const tslib_1 = require("tslib");
-exports.ApplicationMock = require('./Application').Application;
-(0, tslib_1.__exportStar)(require("./constants"), exports);
-function mockNativeComponents() {
-    const { NativeCommandsSender } = require('./mocks/NativeCommandsSender');
-    const { NativeEventsReceiver } = require('./mocks/NativeEventsReceiver');
-    const { AppRegistryService } = require('./mocks/AppRegistryService');
-    const { Navigation } = require('react-native-navigation');
-    Navigation.mockNativeComponents(new NativeCommandsSender(), new NativeEventsReceiver(), new AppRegistryService());
-}
-exports.mockNativeComponents = mockNativeComponents;
diff --git a/node_modules/react-native-navigation/lib/android/.DS_Store b/node_modules/react-native-navigation/lib/android/.DS_Store
new file mode 100644
index 0000000..ad033f1
Binary files /dev/null and b/node_modules/react-native-navigation/lib/android/.DS_Store differ
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/ReactTypefaceUtils.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/ReactTypefaceUtils.java
index 834d734..e5a6948 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/ReactTypefaceUtils.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/ReactTypefaceUtils.java
@@ -20,6 +20,7 @@ import androidx.annotation.Nullable;
 import com.facebook.react.bridge.ReadableArray;
 import com.facebook.react.views.text.ReactFontManager;
 import com.facebook.react.views.text.ReactTextShadowNode;
+import com.facebook.react.common.ReactConstants;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -96,12 +97,12 @@ public class ReactTypefaceUtils {
 
     int want = 0;
     if ((weight == Typeface.BOLD)
-        || ((oldStyle & Typeface.BOLD) != 0 && weight == ReactTextShadowNode.UNSET)) {
+        || ((oldStyle & Typeface.BOLD) != 0 && weight == ReactConstants.UNSET)) {
       want |= Typeface.BOLD;
     }
 
     if ((style == Typeface.ITALIC)
-        || ((oldStyle & Typeface.ITALIC) != 0 && style == ReactTextShadowNode.UNSET)) {
+        || ((oldStyle & Typeface.ITALIC) != 0 && style == ReactConstants.UNSET)) {
       want |= Typeface.ITALIC;
     }
 
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/ReactViewGroup.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/ReactViewGroup.kt
index f92580c..fc9a9fc 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/ReactViewGroup.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/utils/ReactViewGroup.kt
@@ -4,4 +4,4 @@ import com.facebook.react.views.view.ReactViewBackgroundDrawable
 import com.facebook.react.views.view.ReactViewGroup
 
 val ReactViewGroup.borderRadius: Float
-    get() = (background as? ReactViewBackgroundDrawable)?.fullBorderRadius ?: 0f
\ No newline at end of file
+    get() = (background as? ReactViewBackgroundDrawable)?.fullBorderWidth ?: 0f
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/viewcontroller/LayoutDirectionApplier.kt b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/viewcontroller/LayoutDirectionApplier.kt
index 89216ae..7e6b70d 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/viewcontroller/LayoutDirectionApplier.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/viewcontrollers/viewcontroller/LayoutDirectionApplier.kt
@@ -6,10 +6,12 @@ import com.reactnativenavigation.options.Options
 
 class LayoutDirectionApplier {
     fun apply(root: ViewController<*>, options: Options, instanceManager: ReactInstanceManager) {
-        if (options.layout.direction.hasValue() && instanceManager.currentReactContext != null) {
-            root.activity.window.decorView.layoutDirection = options.layout.direction.get()
-            I18nUtil.getInstance().allowRTL(instanceManager.currentReactContext, options.layout.direction.isRtl)
-            I18nUtil.getInstance().forceRTL(instanceManager.currentReactContext, options.layout.direction.isRtl)
-        }
+        if (options.layout.direction.hasValue()) {
+            instanceManager.currentReactContext?.let { context ->
+                root.activity.window.decorView.layoutDirection = options.layout.direction.get()
+                I18nUtil.getInstance().allowRTL(context, options.layout.direction.isRtl)
+                I18nUtil.getInstance().forceRTL(context, options.layout.direction.isRtl)
+           }
     }
 }
+}
\ No newline at end of file
diff --git a/node_modules/react-native-navigation/lib/android/app/src/reactNative71/java/com/reactnativenavigation/react/modal/ModalContentLayout.kt b/node_modules/react-native-navigation/lib/android/app/src/reactNative71/java/com/reactnativenavigation/react/modal/ModalContentLayout.kt
index ea8516f..1044bd8 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/reactNative71/java/com/reactnativenavigation/react/modal/ModalContentLayout.kt
+++ b/node_modules/react-native-navigation/lib/android/app/src/reactNative71/java/com/reactnativenavigation/react/modal/ModalContentLayout.kt
@@ -49,17 +49,17 @@ class ModalContentLayout(context: Context?) : ReactViewGroup(context), RootView{
             updateFirstChildView()
         }
     }
-    override fun onChildStartedNativeGesture(child: View, androidEvent: MotionEvent?) {
+    override fun onChildStartedNativeGesture(child: View, androidEvent: MotionEvent) {
         mJSTouchDispatcher.onChildStartedNativeGesture(androidEvent, this.getEventDispatcher())
     }
-    override fun onChildStartedNativeGesture(androidEvent: MotionEvent?) {
+    override fun onChildStartedNativeGesture(androidEvent: MotionEvent) {
         mJSTouchDispatcher.onChildStartedNativeGesture(androidEvent, this.getEventDispatcher())
     }
-    override fun onChildEndedNativeGesture(child: View, androidEvent: MotionEvent?) {
+    override fun onChildEndedNativeGesture(child: View, androidEvent: MotionEvent) {
         mJSTouchDispatcher.onChildEndedNativeGesture(androidEvent, this.getEventDispatcher())
     }
     override fun requestDisallowInterceptTouchEvent(disallowIntercept: Boolean) {}
-    private fun getEventDispatcher(): EventDispatcher? {
+    private fun getEventDispatcher(): EventDispatcher {
         val reactContext: ReactContext = this.getReactContext()
         return reactContext.getNativeModule(UIManagerModule::class.java)!!.eventDispatcher
     }
@@ -73,12 +73,12 @@ class ModalContentLayout(context: Context?) : ReactViewGroup(context), RootView{
         return this.context as ReactContext
     }
 
-    override fun onInterceptTouchEvent(event: MotionEvent?): Boolean {
+    override fun onInterceptTouchEvent(event: MotionEvent): Boolean {
         mJSTouchDispatcher.handleTouchEvent(event, getEventDispatcher())
         return super.onInterceptTouchEvent(event)
     }
 
-    override fun onTouchEvent(event: MotionEvent?): Boolean {
+    override fun onTouchEvent(event: MotionEvent): Boolean {
         mJSTouchDispatcher.handleTouchEvent(event, getEventDispatcher())
         super.onTouchEvent(event)
         return true
diff --git a/node_modules/react-native-navigation/lib/android/gradlew b/node_modules/react-native-navigation/lib/android/gradlew
old mode 100755
new mode 100644
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Application.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Application.d.ts
deleted file mode 100644
index 2224df8..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Application.d.ts
+++ /dev/null
@@ -1,33 +0,0 @@
-import * as React from 'react';
-interface ApplicationProps {
-    entryPoint: () => void;
-}
-export declare const Application: {
-    new (props: ApplicationProps): {
-        render(): JSX.Element;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ApplicationProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ApplicationProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ApplicationProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ApplicationProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ApplicationProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ApplicationProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ApplicationProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ApplicationProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ApplicationProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
-export {};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Application.js b/node_modules/react-native-navigation/lib/dist/Mock/Application.js
deleted file mode 100644
index 32be1e8..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Application.js
+++ /dev/null
@@ -1,23 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Application = void 0;
-const tslib_1 = require("tslib");
-const React = (0, tslib_1.__importStar)(require("react"));
-const react_native_1 = require("react-native");
-const connect_1 = require("./connect");
-exports.Application = (0, connect_1.connect)(class extends React.Component {
-    constructor(props) {
-        super(props);
-        props.entryPoint();
-    }
-    render() {
-        const { LayoutComponent } = require('./Components/LayoutComponent');
-        const { LayoutStore } = require('./Stores/LayoutStore');
-        const { Modals } = require('./Components/Modals');
-        const { Overlays } = require('./Components/Overlays');
-        return (React.createElement(react_native_1.View, { testID: 'Application' },
-            React.createElement(LayoutComponent, { layoutNode: LayoutStore.getLayout() }),
-            React.createElement(Modals, null),
-            React.createElement(Overlays, null)));
-    }
-});
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/ComponentProps.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/ComponentProps.d.ts
deleted file mode 100644
index bfa108d..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/ComponentProps.d.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-import ParentNode from './Layouts/ParentNode';
-export interface ComponentProps {
-    layoutNode: ParentNode;
-    backButton?: boolean;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/ComponentProps.js b/node_modules/react-native-navigation/lib/dist/Mock/ComponentProps.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/ComponentProps.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.d.ts
deleted file mode 100644
index 8c4ea5e..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.d.ts
+++ /dev/null
@@ -1,55 +0,0 @@
-import React from 'react';
-import { ComponentProps } from '../ComponentProps';
-export declare const BottomTabs: {
-    new (props: Readonly<ComponentProps>): {
-        render(): JSX.Element[];
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    new (props: ComponentProps, context?: any): {
-        render(): JSX.Element[];
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.js
deleted file mode 100644
index ffd403d..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/BottomTabs.js
+++ /dev/null
@@ -1,14 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.BottomTabs = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importStar)(require("react"));
-const LayoutComponent_1 = require("./LayoutComponent");
-const connect_1 = require("../connect");
-exports.BottomTabs = (0, connect_1.connect)(class extends react_1.Component {
-    render() {
-        return this.props.layoutNode.children.map((child) => {
-            return react_1.default.createElement(LayoutComponent_1.LayoutComponent, { key: child.nodeId, layoutNode: child });
-        });
-    }
-});
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.d.ts
deleted file mode 100644
index 92f5f44..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.d.ts
+++ /dev/null
@@ -1,32 +0,0 @@
-import React from 'react';
-import { ComponentProps } from '../ComponentProps';
-export declare const ComponentScreen: {
-    new (props: ComponentProps): {
-        componentDidMount(): void;
-        isVisible(): boolean;
-        renderTabBar(): JSX.Element | null;
-        render(): JSX.Element;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.js
deleted file mode 100644
index 4da58bf..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/ComponentScreen.js
+++ /dev/null
@@ -1,63 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ComponentScreen = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importStar)(require("react"));
-const react_native_1 = require("react-native");
-const react_native_navigation_1 = require("react-native-navigation");
-const constants_1 = require("../constants");
-const LayoutStore_1 = require("../Stores/LayoutStore");
-const connect_1 = require("../connect");
-const TopBar_1 = require("./TopBar");
-const EventsStore_1 = require("../Stores/EventsStore");
-const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
-const layoutActions_1 = require("../actions/layoutActions");
-function isURISource(src) {
-    return !!src && typeof src === 'object' && 'uri' in src;
-}
-exports.ComponentScreen = (0, connect_1.connect)(class extends react_1.Component {
-    constructor(props) {
-        super(props);
-    }
-    componentDidMount() {
-        this.props.layoutNode.componentDidMount();
-    }
-    isVisible() {
-        return LayoutStore_1.LayoutStore.isVisibleLayout(this.props.layoutNode);
-    }
-    renderTabBar() {
-        const bottomTabs = this.props.layoutNode.getBottomTabs();
-        if (!bottomTabs)
-            return null;
-        const bottomTabsOptions = bottomTabs.resolveOptions().bottomTabs;
-        if (bottomTabsOptions?.visible === false)
-            return null;
-        const buttons = bottomTabs.children.map((child, i) => {
-            const bottomTabOptions = child.resolveOptions().bottomTab;
-            const icon = bottomTabs.selectedIndex === i ? bottomTabOptions?.selectedIcon : bottomTabOptions?.icon;
-            const iconURI = isURISource(icon) ? icon.uri : undefined;
-            return (react_1.default.createElement(react_native_1.View, { key: `tab-${i}` },
-                react_1.default.createElement(react_native_1.TouchableOpacity, { style: { padding: 10 }, testID: bottomTabOptions?.testID, onPress: () => {
-                        EventsStore_1.events.invokeBottomTabPressed({
-                            tabIndex: i,
-                        });
-                        if (lodash_1.default.defaultTo(bottomTabOptions?.selectTabOnPress, true))
-                            (0, layoutActions_1.switchTabByIndex)(this.props.layoutNode.getBottomTabs(), i);
-                    } },
-                    react_1.default.createElement(react_native_1.View, { style: { justifyContent: 'center', alignItems: 'center' } },
-                        react_1.default.createElement(react_native_1.Text, null, bottomTabOptions?.badge),
-                        iconURI && react_1.default.createElement(react_native_1.Image, { style: { width: 18, height: 18, marginBottom: 5 }, source: { uri: iconURI } }),
-                        react_1.default.createElement(react_native_1.Text, { style: { fontSize: 12 } }, bottomTabOptions?.text || '')))));
-        });
-        return (react_1.default.createElement(react_native_1.View, { testID: bottomTabsOptions?.testID, style: { flexDirection: 'row', justifyContent: 'center', width: '100%', backgroundColor: '#F0F2F5' } }, buttons));
-    }
-    render() {
-        const Component = react_native_navigation_1.Navigation.mock.store.getWrappedComponent(this.props.layoutNode.data.name);
-        if (!Component)
-            throw new Error(`${this.props.layoutNode.data.name} has not been registered.`);
-        return (react_1.default.createElement(react_native_1.View, { testID: this.isVisible() ? constants_1.VISIBLE_SCREEN_TEST_ID : undefined },
-            this.props.layoutNode.getStack() && (react_1.default.createElement(TopBar_1.TopBar, { layoutNode: this.props.layoutNode, topBarOptions: this.props.layoutNode.resolveOptions().topBar, backButtonOptions: this.props.layoutNode.resolveOptions().topBar?.backButton })),
-            react_1.default.createElement(Component, { componentId: this.props.layoutNode.nodeId }),
-            this.renderTabBar()));
-    }
-});
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.d.ts
deleted file mode 100644
index 9ad5129..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.d.ts
+++ /dev/null
@@ -1,55 +0,0 @@
-import React from 'react';
-import { ComponentProps } from '../ComponentProps';
-export declare const LayoutComponent: {
-    new (props: Readonly<ComponentProps>): {
-        render(): JSX.Element;
-        componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    new (props: ComponentProps, context?: any): {
-        render(): JSX.Element;
-        componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.js
deleted file mode 100644
index 837a3b3..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/LayoutComponent.js
+++ /dev/null
@@ -1,26 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.LayoutComponent = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importStar)(require("react"));
-const react_native_1 = require("react-native");
-const BottomTabs_1 = require("./BottomTabs");
-const ComponentScreen_1 = require("./ComponentScreen");
-const Stack_1 = require("./Stack");
-const LayoutComponent = class extends react_1.Component {
-    render() {
-        switch (this.props.layoutNode.type) {
-            case 'BottomTabs':
-                return react_1.default.createElement(BottomTabs_1.BottomTabs, { layoutNode: this.props.layoutNode });
-            case 'Stack':
-                return react_1.default.createElement(Stack_1.Stack, { layoutNode: this.props.layoutNode });
-            case 'Component':
-                return react_1.default.createElement(ComponentScreen_1.ComponentScreen, { layoutNode: this.props.layoutNode });
-        }
-        return react_1.default.createElement(react_native_1.View, null);
-    }
-    componentDidCatch(error, errorInfo) {
-        throw new Error(`Error while trying to render layout ${this.props.layoutNode.nodeId} of type ${this.props.layoutNode.type}: ${error}\n${errorInfo?.componentStack}`);
-    }
-};
-exports.LayoutComponent = LayoutComponent;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.d.ts
deleted file mode 100644
index 08b08c0..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.d.ts
+++ /dev/null
@@ -1,55 +0,0 @@
-import React from 'react';
-import { ComponentProps } from '../ComponentProps';
-export declare const Modals: {
-    new (props: Readonly<ComponentProps>): {
-        render(): JSX.Element;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    new (props: ComponentProps, context?: any): {
-        render(): JSX.Element;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.js
deleted file mode 100644
index c627545..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Modals.js
+++ /dev/null
@@ -1,17 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Modals = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importStar)(require("react"));
-const react_native_1 = require("react-native");
-const LayoutComponent_1 = require("./LayoutComponent");
-const LayoutStore_1 = require("../Stores/LayoutStore");
-const connect_1 = require("../connect");
-exports.Modals = (0, connect_1.connect)(class extends react_1.Component {
-    render() {
-        const children = LayoutStore_1.LayoutStore.getModals();
-        return (react_1.default.createElement(react_native_1.View, { testID: 'MODALS' }, children.map((child) => {
-            return react_1.default.createElement(LayoutComponent_1.LayoutComponent, { key: child.nodeId, layoutNode: child });
-        })));
-    }
-});
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.d.ts
deleted file mode 100644
index 9d41e3f..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.d.ts
+++ /dev/null
@@ -1,66 +0,0 @@
-import React from 'react';
-import { OptionsTopBarButton } from 'react-native-navigation';
-interface ButtonProps {
-    button: OptionsTopBarButton;
-    componentId: string;
-}
-export declare const NavigationButton: {
-    new (props: Readonly<ButtonProps>): {
-        ref: undefined;
-        render(): JSX.Element;
-        renderButtonComponent(): JSX.Element;
-        invokeOnClick(stateNode: any): void;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ButtonProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ButtonProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ButtonProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ButtonProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ButtonProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ButtonProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ButtonProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ButtonProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ButtonProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    new (props: ButtonProps, context?: any): {
-        ref: undefined;
-        render(): JSX.Element;
-        renderButtonComponent(): JSX.Element;
-        invokeOnClick(stateNode: any): void;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ButtonProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ButtonProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ButtonProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ButtonProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ButtonProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ButtonProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ButtonProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ButtonProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ButtonProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
-export {};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.js
deleted file mode 100644
index 6fb6c8c..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/NavigationButton.js
+++ /dev/null
@@ -1,58 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NavigationButton = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importStar)(require("react"));
-const react_native_1 = require("react-native");
-const react_native_navigation_1 = require("react-native-navigation");
-const EventsStore_1 = require("../Stores/EventsStore");
-const NavigationButton = class extends react_1.Component {
-    ref = undefined;
-    render() {
-        const { button, componentId } = this.props;
-        if (button.component)
-            return this.renderButtonComponent();
-        return (react_1.default.createElement(react_native_1.Button, { testID: button.testID, key: button.id, title: button.text || '', disabled: button.enabled === false, onPress: () => button.enabled !== false &&
-                EventsStore_1.events.invokeNavigationButtonPressed({
-                    buttonId: button.id,
-                    componentId,
-                }) }));
-    }
-    renderButtonComponent() {
-        const { button, componentId } = this.props;
-        // @ts-ignore
-        const buttonComponentId = button.component.componentId;
-        // @ts-ignore
-        const ComponentClass = react_native_navigation_1.Navigation.mock.store.getComponentClassForName(button.component.name);
-        if (!ComponentClass) {
-            throw new Error(`Cannot find registered component for: ${button.component?.name}`);
-        }
-        const ButtonComponent = ComponentClass();
-        const props = react_native_navigation_1.Navigation.mock.store.getPropsForId(buttonComponentId);
-        return (react_1.default.createElement(react_native_1.TouchableOpacity, { onPress: () => {
-                if (this.ref) {
-                    this.invokeOnClick(
-                    // @ts-ignore
-                    (this.ref._reactInternalFiber || this.ref._reactInternals).return.stateNode);
-                }
-                EventsStore_1.events.invokeNavigationButtonPressed({
-                    buttonId: button.id,
-                    componentId: componentId,
-                });
-            }, testID: button.testID },
-            react_1.default.createElement(ButtonComponent, { key: buttonComponentId, ...props, componentId: buttonComponentId, ref: (ref) => (this.ref = ref) })));
-    }
-    invokeOnClick(stateNode) {
-        if (stateNode.children) {
-            // @ts-ignore
-            stateNode.children.forEach((instance) => {
-                if (instance.internalInstanceHandle &&
-                    instance.internalInstanceHandle.stateNode.props.onClick) {
-                    instance.internalInstanceHandle.stateNode.props.onClick();
-                }
-                this.invokeOnClick(instance);
-            });
-        }
-    }
-};
-exports.NavigationButton = NavigationButton;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.d.ts
deleted file mode 100644
index 2c5f32f..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.d.ts
+++ /dev/null
@@ -1,55 +0,0 @@
-import React from 'react';
-import { ComponentProps } from '../ComponentProps';
-export declare const Overlays: {
-    new (props: Readonly<ComponentProps>): {
-        render(): JSX.Element;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    new (props: ComponentProps, context?: any): {
-        render(): JSX.Element;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.js
deleted file mode 100644
index f9d336b..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Overlays.js
+++ /dev/null
@@ -1,18 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Overlays = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importStar)(require("react"));
-const react_native_1 = require("react-native");
-const constants_1 = require("../constants");
-const LayoutComponent_1 = require("./LayoutComponent");
-const LayoutStore_1 = require("../Stores/LayoutStore");
-const connect_1 = require("../connect");
-exports.Overlays = (0, connect_1.connect)(class extends react_1.Component {
-    render() {
-        const children = LayoutStore_1.LayoutStore.getOverlays();
-        return (react_1.default.createElement(react_native_1.View, { testID: constants_1.VISIBLE_OVERLAY_TEST_ID }, children.map((child) => {
-            return react_1.default.createElement(LayoutComponent_1.LayoutComponent, { key: child.nodeId, layoutNode: child });
-        })));
-    }
-});
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.d.ts
deleted file mode 100644
index 8997813..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.d.ts
+++ /dev/null
@@ -1,55 +0,0 @@
-import React from 'react';
-import { ComponentProps } from '../ComponentProps';
-export declare const Stack: {
-    new (props: Readonly<ComponentProps>): {
-        render(): JSX.Element[];
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    new (props: ComponentProps, context?: any): {
-        render(): JSX.Element[];
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<ComponentProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<ComponentProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<ComponentProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<ComponentProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<ComponentProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.js
deleted file mode 100644
index 602089f..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/Stack.js
+++ /dev/null
@@ -1,15 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Stack = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importStar)(require("react"));
-const LayoutComponent_1 = require("./LayoutComponent");
-const connect_1 = require("../connect");
-exports.Stack = (0, connect_1.connect)(class extends react_1.Component {
-    render() {
-        const children = this.props.layoutNode.children;
-        return children.map((child, i) => {
-            return react_1.default.createElement(LayoutComponent_1.LayoutComponent, { key: child.nodeId, layoutNode: child, backButton: i > 0 });
-        });
-    }
-});
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.d.ts
deleted file mode 100644
index eee7adf..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.d.ts
+++ /dev/null
@@ -1,40 +0,0 @@
-import React from 'react';
-import { OptionsTopBar, OptionsTopBarBackButton, OptionsTopBarButton } from 'react-native-navigation';
-import ParentNode from '../Layouts/ParentNode';
-export interface TopBarProps {
-    layoutNode: ParentNode;
-    topBarOptions?: OptionsTopBar;
-    backButtonOptions?: OptionsTopBarBackButton;
-}
-export declare const TopBar: {
-    new (props: TopBarProps): {
-        render(): JSX.Element | null;
-        shouldRenderBackButton(layoutNode: ParentNode): boolean;
-        renderButtons(buttons?: OptionsTopBarButton[]): JSX.Element[];
-        renderBackButton(): JSX.Element;
-        renderComponent(id: string, name: string, testID?: string | undefined): JSX.Element;
-        context: any;
-        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<TopBarProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
-        forceUpdate(callback?: (() => void) | undefined): void;
-        readonly props: Readonly<TopBarProps> & Readonly<{
-            children?: React.ReactNode;
-        }>;
-        state: Readonly<{}>;
-        refs: {
-            [key: string]: React.ReactInstance;
-        };
-        componentDidMount?(): void;
-        shouldComponentUpdate?(nextProps: Readonly<TopBarProps>, nextState: Readonly<{}>, nextContext: any): boolean;
-        componentWillUnmount?(): void;
-        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
-        getSnapshotBeforeUpdate?(prevProps: Readonly<TopBarProps>, prevState: Readonly<{}>): any;
-        componentDidUpdate?(prevProps: Readonly<TopBarProps>, prevState: Readonly<{}>, snapshot?: any): void;
-        componentWillMount?(): void;
-        UNSAFE_componentWillMount?(): void;
-        componentWillReceiveProps?(nextProps: Readonly<TopBarProps>, nextContext: any): void;
-        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<TopBarProps>, nextContext: any): void;
-        componentWillUpdate?(nextProps: Readonly<TopBarProps>, nextState: Readonly<{}>, nextContext: any): void;
-        UNSAFE_componentWillUpdate?(nextProps: Readonly<TopBarProps>, nextState: Readonly<{}>, nextContext: any): void;
-    };
-    contextType?: React.Context<any> | undefined;
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.js b/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.js
deleted file mode 100644
index 48e2a9f..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Components/TopBar.js
+++ /dev/null
@@ -1,66 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.TopBar = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importStar)(require("react"));
-const react_native_1 = require("react-native");
-const react_native_navigation_1 = require("react-native-navigation");
-const LayoutStore_1 = require("../Stores/LayoutStore");
-const NavigationButton_1 = require("./NavigationButton");
-const EventsStore_1 = require("../Stores/EventsStore");
-const DEFAULT_BACK_BUTTON_ID = 'RNN.back';
-const TopBar = class extends react_1.Component {
-    constructor(props) {
-        super(props);
-    }
-    render() {
-        const topBarOptions = this.props.topBarOptions;
-        const topbarTestId = topBarOptions?.testID;
-        const titleTestId = topbarTestId ? { testID: `${topbarTestId}.title` } : {};
-        const subtitleTestId = topbarTestId ? { testID: `${topbarTestId}.subtitle` } : {};
-        if (topBarOptions?.visible === false)
-            return null;
-        else {
-            const component = topBarOptions?.title?.component;
-            return (react_1.default.createElement(react_native_1.View, { testID: topbarTestId },
-                react_1.default.createElement(react_native_1.Text, { ...titleTestId }, topBarOptions?.title?.text),
-                react_1.default.createElement(react_native_1.Text, { ...subtitleTestId }, topBarOptions?.subtitle?.text),
-                this.renderButtons(topBarOptions?.leftButtons),
-                this.renderButtons(topBarOptions?.rightButtons),
-                component &&
-                    //@ts-ignore
-                    this.renderComponent(component.componentId, component.name),
-                this.shouldRenderBackButton(this.props.layoutNode) && this.renderBackButton()));
-        }
-    }
-    shouldRenderBackButton(layoutNode) {
-        const backButtonVisible = layoutNode.resolveOptions().topBar?.backButton?.visible;
-        return layoutNode.getStack().children.length > 1 && backButtonVisible !== false;
-    }
-    renderButtons(buttons = []) {
-        return buttons.map((button, i) => {
-            return (react_1.default.createElement(NavigationButton_1.NavigationButton, { button: button, key: button.id || i, componentId: this.props.layoutNode.nodeId }));
-        });
-    }
-    renderBackButton() {
-        const backButtonOptions = this.props.backButtonOptions;
-        return (react_1.default.createElement(react_native_1.Button, { testID: backButtonOptions?.testID, title: backButtonOptions && backButtonOptions.title ? backButtonOptions.title : '', onPress: () => {
-                if (backButtonOptions?.popStackOnPress === false) {
-                    EventsStore_1.events.invokeNavigationButtonPressed({
-                        buttonId: backButtonOptions?.id || DEFAULT_BACK_BUTTON_ID,
-                        componentId: this.props.layoutNode.nodeId,
-                    });
-                }
-                else {
-                    LayoutStore_1.LayoutStore.pop(this.props.layoutNode.nodeId);
-                }
-            } }));
-    }
-    renderComponent(id, name, testID) {
-        const Component = react_native_navigation_1.Navigation.mock.store.getComponentClassForName(name)();
-        const props = react_native_navigation_1.Navigation.mock.store.getPropsForId(id);
-        return (react_1.default.createElement(react_native_1.View, { key: id, testID: testID },
-            react_1.default.createElement(Component, { ...props, componentId: id })));
-    }
-};
-exports.TopBar = TopBar;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.d.ts
deleted file mode 100644
index fe148ca..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { Options } from '../../src/index';
-import ParentNode from './ParentNode';
-export default class BottomTabsNode extends ParentNode {
-    selectedIndex: number;
-    constructor(layout: any, parentNode?: ParentNode);
-    mergeOptions(options: Options): void;
-    getVisibleLayout(): import("./ComponentNode").default;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.js
deleted file mode 100644
index a839d3e..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/BottomTabsNode.js
+++ /dev/null
@@ -1,30 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const tslib_1 = require("tslib");
-const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
-const layoutActions_1 = require("../actions/layoutActions");
-const ParentNode_1 = (0, tslib_1.__importDefault)(require("./ParentNode"));
-class BottomTabsNode extends ParentNode_1.default {
-    selectedIndex;
-    constructor(layout, parentNode) {
-        super(layout, 'BottomTabs', parentNode);
-        this.selectedIndex = layout.data?.options?.bottomTabs?.currentTabIndex || 0;
-    }
-    mergeOptions(options) {
-        super.mergeOptions(options);
-        if (options.bottomTabs?.currentTabIndex) {
-            this.selectedIndex = options.bottomTabs?.currentTabIndex;
-            (0, layoutActions_1.switchTabByIndex)(this, this.selectedIndex);
-        }
-        if (options.bottomTabs?.currentTabId) {
-            const index = lodash_1.default.findIndex(this.children, (child) => child.nodeId === options?.bottomTabs?.currentTabId);
-            if (index !== -1)
-                this.selectedIndex = index;
-            (0, layoutActions_1.switchTabByIndex)(this, this.selectedIndex);
-        }
-    }
-    getVisibleLayout() {
-        return this.children[this.selectedIndex].getVisibleLayout();
-    }
-}
-exports.default = BottomTabsNode;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.d.ts
deleted file mode 100644
index d4f6e85..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { OptionsTopBarButton } from '../../src';
-import ParentNode from './ParentNode';
-export default class ComponentNode extends ParentNode {
-    componentDidMountOnce: boolean;
-    componentDidAppearPending: boolean;
-    constructor(layout: any, parentNode?: ParentNode);
-    componentDidMount(): void;
-    componentDidAppear(): void;
-    componentDidDisappear(): void;
-    titleChanged(oldTitle: any, newTitle?: any): void;
-    buttonsChanged(oldButtons: OptionsTopBarButton[], newButtons: OptionsTopBarButton[]): void;
-    buttonsDidAppear(buttons?: OptionsTopBarButton[]): void;
-    buttonsDidDisappear(buttons?: OptionsTopBarButton[]): void;
-    getVisibleLayout(): this;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.js
deleted file mode 100644
index 0ca5a07..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ComponentNode.js
+++ /dev/null
@@ -1,104 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const tslib_1 = require("tslib");
-const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
-const EventsStore_1 = require("../Stores/EventsStore");
-const ParentNode_1 = (0, tslib_1.__importDefault)(require("./ParentNode"));
-class ComponentNode extends ParentNode_1.default {
-    componentDidMountOnce = false;
-    componentDidAppearPending = false;
-    constructor(layout, parentNode) {
-        super(layout, 'Component', parentNode);
-    }
-    componentDidMount() {
-        this.componentDidMountOnce = true;
-        this.componentDidAppearPending && setImmediate(() => this.componentDidAppear());
-    }
-    componentDidAppear() {
-        if (this.componentDidMountOnce) {
-            EventsStore_1.events.invokeComponentWillAppear({
-                componentName: this.data.name,
-                componentId: this.nodeId,
-                componentType: 'Component',
-            });
-            EventsStore_1.events.invokeComponentDidAppear({
-                componentName: this.data.name,
-                componentId: this.nodeId,
-                componentType: 'Component',
-            });
-            this.buttonsDidAppear(lodash_1.default.concat(this.data.options.topBar?.rightButtons || [], this.data.options.topBar?.leftButtons || []));
-            this.titleChanged(undefined, this.data.options.topBar?.title);
-        }
-        else {
-            this.componentDidAppearPending = true;
-        }
-    }
-    componentDidDisappear() {
-        EventsStore_1.events.invokeComponentDidDisappear({
-            componentName: this.data.name,
-            componentId: this.nodeId,
-            componentType: 'Component',
-        });
-        this.buttonsDidDisappear(lodash_1.default.concat(this.data.options.topBar?.rightButtons || [], this.data.options.topBar?.leftButtons || []));
-        this.titleChanged(this.data.options.topBar?.title);
-    }
-    titleChanged(oldTitle, newTitle) {
-        if (oldTitle && oldTitle.component) {
-            EventsStore_1.events.invokeComponentDidDisappear({
-                componentName: oldTitle.component.name,
-                componentId: oldTitle.component.componentId,
-                componentType: 'TopBarTitle',
-            });
-        }
-        if (newTitle && newTitle.component) {
-            EventsStore_1.events.invokeComponentWillAppear({
-                componentName: newTitle.component.name,
-                componentId: newTitle.component.componentId,
-                componentType: 'TopBarTitle',
-            });
-            EventsStore_1.events.invokeComponentDidAppear({
-                componentName: newTitle.component.name,
-                componentId: newTitle.component.componentId,
-                componentType: 'TopBarTitle',
-            });
-        }
-    }
-    buttonsChanged(oldButtons, newButtons) {
-        this.buttonsDidDisappear(oldButtons);
-        this.buttonsDidAppear(newButtons);
-    }
-    buttonsDidAppear(buttons = []) {
-        buttons.forEach((button) => {
-            if (button.component) {
-                EventsStore_1.events.invokeComponentWillAppear({
-                    componentName: button.component.name,
-                    // @ts-ignore
-                    componentId: button.component.componentId,
-                    componentType: 'TopBarButton',
-                });
-                EventsStore_1.events.invokeComponentDidAppear({
-                    componentName: button.component.name,
-                    // @ts-ignore
-                    componentId: button.component.componentId,
-                    componentType: 'TopBarButton',
-                });
-            }
-        });
-    }
-    buttonsDidDisappear(buttons = []) {
-        buttons.forEach((button) => {
-            if (button.component) {
-                EventsStore_1.events.invokeComponentDidDisappear({
-                    componentName: button.component.name,
-                    // @ts-ignore
-                    componentId: button.component.componentId,
-                    componentType: 'TopBarButton',
-                });
-            }
-        });
-    }
-    getVisibleLayout() {
-        return this;
-    }
-}
-exports.default = ComponentNode;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.d.ts
deleted file mode 100644
index fc6dda6..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.d.ts
+++ /dev/null
@@ -1,7 +0,0 @@
-import BottomTabs from './BottomTabsNode';
-import ComponentNode from './ComponentNode';
-import Stack from './StackNode';
-import ParentNode from './ParentNode';
-export default class LayoutNodeFactory {
-    static create(layout: any, parentNode?: ParentNode): Stack | BottomTabs | ComponentNode;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.js
deleted file mode 100644
index 1ea4e18..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/LayoutNodeFactory.js
+++ /dev/null
@@ -1,20 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const tslib_1 = require("tslib");
-const BottomTabsNode_1 = (0, tslib_1.__importDefault)(require("./BottomTabsNode"));
-const ComponentNode_1 = (0, tslib_1.__importDefault)(require("./ComponentNode"));
-const StackNode_1 = (0, tslib_1.__importDefault)(require("./StackNode"));
-class LayoutNodeFactory {
-    static create(layout, parentNode) {
-        switch (layout.type) {
-            case 'Component':
-                return new ComponentNode_1.default(layout, parentNode);
-            case 'Stack':
-                return new StackNode_1.default(layout, parentNode);
-            default:
-            case 'BottomTabs':
-                return new BottomTabsNode_1.default(layout, parentNode);
-        }
-    }
-}
-exports.default = LayoutNodeFactory;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.d.ts
deleted file mode 100644
index 6162d3a..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-import { Options } from '../../src/index';
-import ParentNode from './ParentNode';
-interface Data {
-    name: string;
-    options: Options;
-}
-export declare type NodeType = 'Component' | 'ExternalComponent' | 'Stack' | 'BottomTabs' | 'TopTabs' | 'SideMenuRoot' | 'SideMenuLeft' | 'SideMenuRight' | 'SideMenuCenter' | 'SplitView';
-export default class Node {
-    readonly nodeId: string;
-    readonly data: Data;
-    readonly type: NodeType;
-    parentNode?: ParentNode;
-    constructor(layout: any, type: NodeType, parentNode?: ParentNode);
-}
-export {};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.js
deleted file mode 100644
index 04bc683..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/Node.js
+++ /dev/null
@@ -1,17 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-class Node {
-    nodeId;
-    data;
-    type;
-    // options: Options;
-    parentNode;
-    constructor(layout, type, parentNode) {
-        this.nodeId = layout.id;
-        this.data = layout.data;
-        // this.options = layout.data.options;
-        this.parentNode = parentNode;
-        this.type = type;
-    }
-}
-exports.default = Node;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.d.ts
deleted file mode 100644
index 6adf7d3..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { OptionsTopBarButton } from '../../src/interfaces/Options';
-import { Options } from '../../src/index';
-import ComponentNode from './ComponentNode';
-import Node, { NodeType } from './Node';
-export default class ParentNode extends Node {
-    children: ParentNode[];
-    constructor(layout: any, type: NodeType, parentNode?: ParentNode);
-    componentDidMount(): void;
-    componentDidAppear(): void;
-    componentDidDisappear(): void;
-    getVisibleLayout(): ComponentNode;
-    getTopParent(): Node;
-    mergeOptions(options: Options): void;
-    buttonsChanged(_oldButtons: OptionsTopBarButton[], _newButtons: OptionsTopBarButton[]): void;
-    titleChanged(_oldComponent: any, _newComponent: any): void;
-    resolveOptions(): Options;
-    getStack(): ParentNode | undefined;
-    getBottomTabs(): ParentNode | undefined;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.js
deleted file mode 100644
index 0ba4f70..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/ParentNode.js
+++ /dev/null
@@ -1,68 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const tslib_1 = require("tslib");
-const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
-const LayoutStore_1 = require("../Stores/LayoutStore");
-const LayoutNodeFactory_1 = (0, tslib_1.__importDefault)(require("./LayoutNodeFactory"));
-const Node_1 = (0, tslib_1.__importDefault)(require("./Node"));
-class ParentNode extends Node_1.default {
-    children;
-    constructor(layout, type, parentNode) {
-        super(layout, type, parentNode);
-        this.children = layout.children.map((childLayout) => LayoutNodeFactory_1.default.create(childLayout, this));
-    }
-    componentDidMount() { }
-    componentDidAppear() {
-        this.getVisibleLayout().componentDidAppear();
-    }
-    componentDidDisappear() {
-        this.getVisibleLayout().componentDidDisappear();
-    }
-    getVisibleLayout() {
-        return this.children[this.children.length - 1].getVisibleLayout();
-    }
-    getTopParent() {
-        if (this.parentNode)
-            return this.parentNode.getTopParent();
-        return this;
-    }
-    mergeOptions(options) {
-        this.data.options = lodash_1.default.mergeWith(this.data.options, options, (objValue, srcValue, key) => {
-            if (lodash_1.default.isArray(objValue)) {
-                if (key === 'rightButtons' || key === 'leftButtons') {
-                    this.buttonsChanged(objValue, srcValue);
-                }
-                return srcValue;
-            }
-            if (key === 'title' && srcValue.component) {
-                this.titleChanged(objValue, srcValue);
-            }
-        });
-        this.parentNode?.mergeOptions(options);
-    }
-    buttonsChanged(_oldButtons, _newButtons) { }
-    titleChanged(_oldComponent, _newComponent) { }
-    resolveOptions() {
-        const options = lodash_1.default.merge(lodash_1.default.cloneDeep(this.data.options), this.getVisibleLayout().data.options);
-        return lodash_1.default.merge(lodash_1.default.cloneDeep(LayoutStore_1.LayoutStore.getDefaultOptions()), options);
-    }
-    getStack() {
-        if (this.type === 'Stack') {
-            return this;
-        }
-        else if (this.parentNode) {
-            return this.parentNode.getStack();
-        }
-        return undefined;
-    }
-    getBottomTabs() {
-        if (this.type === 'BottomTabs') {
-            return this;
-        }
-        else if (this.parentNode) {
-            return this.parentNode.getBottomTabs();
-        }
-        return undefined;
-    }
-}
-exports.default = ParentNode;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.d.ts
deleted file mode 100644
index 4037a2e..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.d.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-import ParentNode from './ParentNode';
-export default class StackNode extends ParentNode {
-    constructor(layout: any, parentNode?: ParentNode);
-    getVisibleLayout(): import("./ComponentNode").default;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.js b/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.js
deleted file mode 100644
index 7d78383..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Layouts/StackNode.js
+++ /dev/null
@@ -1,13 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const tslib_1 = require("tslib");
-const ParentNode_1 = (0, tslib_1.__importDefault)(require("./ParentNode"));
-class StackNode extends ParentNode_1.default {
-    constructor(layout, parentNode) {
-        super(layout, 'Stack', parentNode);
-    }
-    getVisibleLayout() {
-        return this.children[this.children.length - 1].getVisibleLayout();
-    }
-}
-exports.default = StackNode;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.d.ts
deleted file mode 100644
index 357ca78..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { ComponentDidDisappearEvent, ComponentWillAppearEvent, ModalDismissedEvent } from '../../src/interfaces/ComponentEvents';
-import { ComponentDidAppearEvent, NavigationButtonPressedEvent } from '../../src/index';
-import { BottomTabPressedEvent, CommandCompletedEvent } from '../../src/interfaces/Events';
-export declare const events: {
-    navigationButtonPressed: ((_event: NavigationButtonPressedEvent) => void)[];
-    componentWillAppear: ((_event: ComponentWillAppearEvent) => void)[];
-    componentDidAppear: ((_event: ComponentDidAppearEvent) => void)[];
-    componentDidDisappear: ((_event: ComponentDidDisappearEvent) => void)[];
-    modalDismissed: ((_event: ModalDismissedEvent) => void)[];
-    bottomTabPressed: ((_event: BottomTabPressedEvent) => void)[];
-    commandCompleted: ((_event: CommandCompletedEvent) => void)[];
-    invokeComponentWillAppear: (event: ComponentWillAppearEvent) => void;
-    invokeComponentDidAppear: (event: ComponentDidAppearEvent) => void;
-    invokeComponentDidDisappear: (event: ComponentDidDisappearEvent) => void;
-    invokeModalDismissed: (event: ModalDismissedEvent) => void;
-    invokeNavigationButtonPressed: (event: NavigationButtonPressedEvent) => void;
-    invokeBottomTabPressed: (event: BottomTabPressedEvent) => void;
-    invokeCommandCompleted: (event: CommandCompletedEvent) => void;
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.js b/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.js
deleted file mode 100644
index 4f351bd..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Stores/EventsStore.js
+++ /dev/null
@@ -1,54 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.events = void 0;
-exports.events = {
-    navigationButtonPressed: [(_event) => { }],
-    componentWillAppear: [(_event) => { }],
-    componentDidAppear: [(_event) => { }],
-    componentDidDisappear: [(_event) => { }],
-    modalDismissed: [(_event) => { }],
-    bottomTabPressed: [(_event) => { }],
-    commandCompleted: [(_event) => { }],
-    invokeComponentWillAppear: (event) => {
-        exports.events.componentWillAppear &&
-            exports.events.componentWillAppear.forEach((listener) => {
-                listener(event);
-            });
-    },
-    invokeComponentDidAppear: (event) => {
-        exports.events.componentDidAppear &&
-            exports.events.componentDidAppear.forEach((listener) => {
-                listener(event);
-            });
-    },
-    invokeComponentDidDisappear: (event) => {
-        exports.events.componentDidDisappear &&
-            exports.events.componentDidDisappear.forEach((listener) => {
-                listener(event);
-            });
-    },
-    invokeModalDismissed: (event) => {
-        exports.events.modalDismissed &&
-            exports.events.modalDismissed.forEach((listener) => {
-                listener(event);
-            });
-    },
-    invokeNavigationButtonPressed: (event) => {
-        exports.events.navigationButtonPressed &&
-            exports.events.navigationButtonPressed.forEach((listener) => {
-                listener(event);
-            });
-    },
-    invokeBottomTabPressed: (event) => {
-        exports.events.bottomTabPressed &&
-            exports.events.bottomTabPressed?.forEach((listener) => {
-                listener(event);
-            });
-    },
-    invokeCommandCompleted: (event) => {
-        exports.events.commandCompleted &&
-            exports.events.commandCompleted.forEach((listener) => {
-                listener(event);
-            });
-    },
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.d.ts
deleted file mode 100644
index 2e86d72..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare const LayoutStore: any;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.js b/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.js
deleted file mode 100644
index 380d2a6..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/Stores/LayoutStore.js
+++ /dev/null
@@ -1,160 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.LayoutStore = void 0;
-const tslib_1 = require("tslib");
-const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
-const LayoutNodeFactory_1 = (0, tslib_1.__importDefault)(require("../Layouts/LayoutNodeFactory"));
-const remx = require('remx');
-const state = remx.state({
-    root: {},
-    modals: [],
-    overlays: [],
-});
-const setters = remx.setters({
-    setRoot(layout) {
-        state.modals = [];
-        state.root = layout;
-    },
-    push(layout, stack) {
-        stack.children.push(layout);
-    },
-    pop(layoutId) {
-        const stack = getters.getLayoutById(layoutId).getStack();
-        if (stack.children.length === 1)
-            return;
-        const poppedChild = stack.children.pop();
-        const newVisibleChild = stack.getVisibleLayout();
-        poppedChild.componentDidDisappear();
-        newVisibleChild.componentDidAppear();
-        return lodash_1.default.clone(poppedChild.nodeId);
-    },
-    popTo(layoutId) {
-        const stack = getters.getLayoutById(layoutId).getStack();
-        while (stack.getVisibleLayout().nodeId != layoutId) {
-            stack.children.pop();
-        }
-    },
-    popToRoot(layoutId) {
-        const stack = getters.getLayoutById(layoutId).getStack();
-        while (stack.children.length > 1) {
-            stack.children.pop();
-        }
-    },
-    setStackRoot(layoutId, layout) {
-        const currentLayout = getters.getLayoutById(layoutId);
-        if (currentLayout) {
-            const stack = currentLayout.getStack();
-            stack.children = layout.map((child) => LayoutNodeFactory_1.default.create(child, stack));
-        }
-    },
-    showOverlay(overlay) {
-        state.overlays.push(overlay);
-    },
-    dismissOverlay(overlayId) {
-        lodash_1.default.remove(state.overlays, (overlay) => overlay.nodeId === overlayId);
-    },
-    dismissAllOverlays() {
-        state.overlays = [];
-    },
-    showModal(modal) {
-        state.modals.push(modal);
-    },
-    dismissModal(componentId) {
-        const modal = getters.getModalById(componentId);
-        if (modal) {
-            const child = modal.getVisibleLayout();
-            const topParent = child.getTopParent();
-            lodash_1.default.remove(state.modals, (modal) => modal.nodeId === topParent.nodeId);
-        }
-    },
-    dismissAllModals() {
-        state.modals = [];
-    },
-    selectTabIndex(layout, index) {
-        getters.getLayoutById(layout.nodeId).selectedIndex = index;
-    },
-    mergeOptions(componentId, options) {
-        const layout = getters.getLayoutById(componentId);
-        if (layout)
-            layout.mergeOptions(options);
-        else
-            console.warn(`[RNN error] Merge options failure: cannot find layout for: ${componentId}`);
-    },
-});
-const getters = remx.getters({
-    getLayout() {
-        return state.root;
-    },
-    getVisibleLayout() {
-        if (state.modals.length > 0) {
-            return lodash_1.default.last(state.modals).getVisibleLayout();
-        }
-        else if (!lodash_1.default.isEqual(state.root, {}))
-            return state.root.getVisibleLayout();
-    },
-    isVisibleLayout(layout) {
-        return getters.getVisibleLayout() && getters.getVisibleLayout().nodeId === layout.nodeId;
-    },
-    getModals() {
-        return state.modals;
-    },
-    getOverlays() {
-        return state.overlays;
-    },
-    getLayoutById(layoutId) {
-        if (getters.getModalById(layoutId))
-            return findParentNode(layoutId, getters.getModalById(layoutId));
-        return findParentNode(layoutId, state.root);
-    },
-    getModalById(layoutId) {
-        return lodash_1.default.find(state.modals, (layout) => findParentNode(layoutId, layout));
-    },
-    getLayoutChildren(layoutId) {
-        return getters.getLayoutById(layoutId).children;
-    },
-    getStack(layoutId) {
-        return (findStack(layoutId, state.root) ||
-            lodash_1.default.find(state.modals, (layout) => findStack(layoutId, layout)));
-    },
-});
-function findParentNode(layoutId, layout) {
-    if (layoutId === layout.nodeId) {
-        return layout;
-    }
-    else if (layout.children) {
-        for (let i = 0; i < layout.children.length; i += 1) {
-            const child = layout.children[i];
-            const result = findParentNode(layoutId, child);
-            if (result !== false) {
-                return result;
-            }
-        }
-    }
-    return false;
-}
-function findStack(layoutId, layout) {
-    if (layout.type === 'Stack' && lodash_1.default.find(layout.children, (child) => child.nodeId === layoutId)) {
-        return layout;
-    }
-    else if (layout.children) {
-        for (let i = 0; i < layout.children.length; i += 1) {
-            const child = layout.children[i];
-            const result = findStack(layoutId, child);
-            if (result !== false) {
-                return result;
-            }
-        }
-    }
-    return false;
-}
-let defaultOptions;
-exports.LayoutStore = {
-    ...getters,
-    ...setters,
-    setDefaultOptions(options) {
-        defaultOptions = options;
-    },
-    getDefaultOptions() {
-        return defaultOptions;
-    },
-};
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/actions/layoutActions.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/actions/layoutActions.d.ts
deleted file mode 100644
index 9a66358..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/actions/layoutActions.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-import ParentNode from '../Layouts/ParentNode';
-export declare const switchTabByIndex: (bottomTabs: ParentNode | undefined, index: number) => void;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/actions/layoutActions.js b/node_modules/react-native-navigation/lib/dist/Mock/actions/layoutActions.js
deleted file mode 100644
index 4519d9c..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/actions/layoutActions.js
+++ /dev/null
@@ -1,12 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.switchTabByIndex = void 0;
-const LayoutStore_1 = require("../Stores/LayoutStore");
-const switchTabByIndex = (bottomTabs, index) => {
-    if (bottomTabs) {
-        LayoutStore_1.LayoutStore.getVisibleLayout().componentDidDisappear();
-        LayoutStore_1.LayoutStore.selectTabIndex(bottomTabs, index);
-        LayoutStore_1.LayoutStore.getVisibleLayout().componentDidAppear();
-    }
-};
-exports.switchTabByIndex = switchTabByIndex;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/connect.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/connect.d.ts
deleted file mode 100644
index 2b4674b..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/connect.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare function connect<T>(component: T): T;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/connect.js b/node_modules/react-native-navigation/lib/dist/Mock/connect.js
deleted file mode 100644
index c9fa9cd..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/connect.js
+++ /dev/null
@@ -1,9 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.connect = void 0;
-const remx_1 = require("remx");
-function connect(component) {
-    // @ts-ignore
-    return (0, remx_1.connect)()(component);
-}
-exports.connect = connect;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/constants.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/constants.d.ts
deleted file mode 100644
index 8d1f084..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/constants.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-export declare const VISIBLE_SCREEN_TEST_ID = "VISIBLE_SCREEN_TEST_ID";
-export declare const VISIBLE_OVERLAY_TEST_ID = "VISIBLE_OVERLAY_TEST_ID";
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/constants.js b/node_modules/react-native-navigation/lib/dist/Mock/constants.js
deleted file mode 100644
index 56d8535..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/constants.js
+++ /dev/null
@@ -1,5 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.VISIBLE_OVERLAY_TEST_ID = exports.VISIBLE_SCREEN_TEST_ID = void 0;
-exports.VISIBLE_SCREEN_TEST_ID = 'VISIBLE_SCREEN_TEST_ID';
-exports.VISIBLE_OVERLAY_TEST_ID = 'VISIBLE_OVERLAY_TEST_ID';
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/index.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/index.d.ts
deleted file mode 100644
index f949ee0..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/index.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export declare const ApplicationMock: any;
-export * from './constants';
-export declare function mockNativeComponents(): void;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/index.js b/node_modules/react-native-navigation/lib/dist/Mock/index.js
deleted file mode 100644
index 26e72e8..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/index.js
+++ /dev/null
@@ -1,14 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.mockNativeComponents = exports.ApplicationMock = void 0;
-const tslib_1 = require("tslib");
-exports.ApplicationMock = require('./Application').Application;
-(0, tslib_1.__exportStar)(require("./constants"), exports);
-function mockNativeComponents() {
-    const { NativeCommandsSender } = require('./mocks/NativeCommandsSender');
-    const { NativeEventsReceiver } = require('./mocks/NativeEventsReceiver');
-    const { AppRegistryService } = require('./mocks/AppRegistryService');
-    const { Navigation } = require('react-native-navigation');
-    Navigation.mockNativeComponents(new NativeCommandsSender(), new NativeEventsReceiver(), new AppRegistryService());
-}
-exports.mockNativeComponents = mockNativeComponents;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/AppRegistryService.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/mocks/AppRegistryService.d.ts
deleted file mode 100644
index 8636617..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/AppRegistryService.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import { ComponentProvider } from 'react-native';
-export declare class AppRegistryService {
-    registerComponent(_appKey: string, _getComponentFunc: ComponentProvider): void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/AppRegistryService.js b/node_modules/react-native-navigation/lib/dist/Mock/mocks/AppRegistryService.js
deleted file mode 100644
index b20fb4d..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/AppRegistryService.js
+++ /dev/null
@@ -1,7 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.AppRegistryService = void 0;
-class AppRegistryService {
-    registerComponent(_appKey, _getComponentFunc) { }
-}
-exports.AppRegistryService = AppRegistryService;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.d.ts
deleted file mode 100644
index 004d533..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.d.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-import { LayoutNode } from '../../src/commands/LayoutTreeCrawler';
-import { Constants } from '../../src/adapters/Constants';
-export declare class NativeCommandsSender {
-    constructor();
-    setRoot(commandId: string, layout: {
-        root: any;
-        modals: any[];
-        overlays: any[];
-    }): Promise<unknown>;
-    setDefaultOptions(options: object): void;
-    mergeOptions(componentId: string, options: object): void;
-    push(commandId: string, onComponentId: string, layout: LayoutNode): Promise<unknown>;
-    pop(commandId: string, componentId: string, _options?: object): Promise<unknown>;
-    popTo(commandId: string, componentId: string, _options?: object): Promise<unknown>;
-    popToRoot(commandId: string, componentId: string, _options?: object): void;
-    setStackRoot(commandId: string, onComponentId: string, layout: object): void;
-    showModal(commandId: string, layout: object): Promise<unknown>;
-    dismissModal(commandId: string, componentId: string, _options?: object): Promise<unknown>;
-    dismissAllModals(commandId: string, _options?: object): void;
-    showOverlay(commandId: string, layout: object): void;
-    dismissOverlay(commandId: string, componentId: string): void;
-    dismissAllOverlays(commandId: string): void;
-    getLaunchArgs(commandId: string): void;
-    getNavigationConstants(): Promise<Constants>;
-    getNavigationConstantsSync(): Constants;
-    private reportCommandCompletion;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.js b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.js
deleted file mode 100644
index 556acee..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeCommandsSender.js
+++ /dev/null
@@ -1,145 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NativeCommandsSender = void 0;
-const tslib_1 = require("tslib");
-const LayoutStore_1 = require("../Stores/LayoutStore");
-const LayoutNodeFactory_1 = (0, tslib_1.__importDefault)(require("../Layouts/LayoutNodeFactory"));
-const EventsStore_1 = require("../Stores/EventsStore");
-const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
-const CommandName_1 = require("../../src/interfaces/CommandName");
-class NativeCommandsSender {
-    constructor() { }
-    setRoot(commandId, layout) {
-        return new Promise((resolve) => {
-            if (LayoutStore_1.LayoutStore.getVisibleLayout()) {
-                LayoutStore_1.LayoutStore.getVisibleLayout().componentDidDisappear();
-                LayoutStore_1.LayoutStore.setRoot({});
-            }
-            const layoutNode = LayoutNodeFactory_1.default.create(layout.root);
-            LayoutStore_1.LayoutStore.setRoot(layoutNode);
-            layoutNode.getVisibleLayout().componentDidAppear();
-            resolve(layout.root.nodeId);
-            this.reportCommandCompletion(CommandName_1.CommandName.SetRoot, commandId);
-        });
-    }
-    setDefaultOptions(options) {
-        LayoutStore_1.LayoutStore.setDefaultOptions(options);
-    }
-    mergeOptions(componentId, options) {
-        LayoutStore_1.LayoutStore.mergeOptions(componentId, options);
-    }
-    push(commandId, onComponentId, layout) {
-        return new Promise((resolve) => {
-            const stack = LayoutStore_1.LayoutStore.getLayoutById(onComponentId).getStack();
-            const layoutNode = LayoutNodeFactory_1.default.create(layout, stack);
-            stack.getVisibleLayout().componentDidDisappear();
-            LayoutStore_1.LayoutStore.push(layoutNode, stack);
-            stack.getVisibleLayout().componentDidAppear();
-            resolve(stack.getVisibleLayout().nodeId);
-            this.reportCommandCompletion(CommandName_1.CommandName.Push, commandId);
-        });
-    }
-    pop(commandId, componentId, _options) {
-        return new Promise((resolve, reject) => {
-            if (!LayoutStore_1.LayoutStore.getLayoutById(componentId)) {
-                reject(`Popping component failed - componentId '${componentId}' not found`);
-                return;
-            }
-            const poppedChild = lodash_1.default.last(LayoutStore_1.LayoutStore.getLayoutById(componentId).getStack().children);
-            LayoutStore_1.LayoutStore.pop(componentId);
-            resolve(poppedChild.nodeId);
-            this.reportCommandCompletion(CommandName_1.CommandName.Pop, commandId);
-        });
-    }
-    popTo(commandId, componentId, _options) {
-        return new Promise((resolve) => {
-            LayoutStore_1.LayoutStore.popTo(componentId);
-            resolve(componentId);
-            this.reportCommandCompletion(CommandName_1.CommandName.PopTo, commandId);
-        });
-    }
-    popToRoot(commandId, componentId, _options) {
-        LayoutStore_1.LayoutStore.popToRoot(componentId);
-        this.reportCommandCompletion(CommandName_1.CommandName.PopToRoot, commandId);
-    }
-    setStackRoot(commandId, onComponentId, layout) {
-        LayoutStore_1.LayoutStore.setStackRoot(onComponentId, layout);
-        this.reportCommandCompletion(CommandName_1.CommandName.SetStackRoot, commandId);
-    }
-    showModal(commandId, layout) {
-        return new Promise((resolve) => {
-            const layoutNode = LayoutNodeFactory_1.default.create(layout);
-            LayoutStore_1.LayoutStore.getVisibleLayout().componentDidDisappear();
-            LayoutStore_1.LayoutStore.showModal(layoutNode);
-            layoutNode.componentDidAppear();
-            resolve(layoutNode.nodeId);
-            this.reportCommandCompletion(CommandName_1.CommandName.ShowModal, commandId);
-        });
-    }
-    dismissModal(commandId, componentId, _options) {
-        return new Promise((resolve, reject) => {
-            const modal = LayoutStore_1.LayoutStore.getModalById(componentId);
-            if (modal) {
-                const modalTopParent = modal.getTopParent();
-                modalTopParent.componentDidDisappear();
-                LayoutStore_1.LayoutStore.dismissModal(componentId);
-                EventsStore_1.events.invokeModalDismissed({
-                    componentName: modalTopParent.data.name,
-                    componentId: modalTopParent.nodeId,
-                    modalsDismissed: 1,
-                });
-                resolve(modalTopParent.nodeId);
-                LayoutStore_1.LayoutStore.getVisibleLayout().componentDidAppear();
-                this.reportCommandCompletion(CommandName_1.CommandName.DismissModal, commandId);
-            }
-            else {
-                reject(`component with id: ${componentId} is not a modal`);
-            }
-        });
-    }
-    dismissAllModals(commandId, _options) {
-        LayoutStore_1.LayoutStore.dismissAllModals();
-        this.reportCommandCompletion(CommandName_1.CommandName.DismissAllModals, commandId);
-    }
-    showOverlay(commandId, layout) {
-        const layoutNode = LayoutNodeFactory_1.default.create(layout);
-        LayoutStore_1.LayoutStore.showOverlay(layoutNode);
-        layoutNode.componentDidAppear();
-        this.reportCommandCompletion(CommandName_1.CommandName.ShowOverlay, commandId);
-    }
-    dismissOverlay(commandId, componentId) {
-        LayoutStore_1.LayoutStore.dismissOverlay(componentId);
-        this.reportCommandCompletion(CommandName_1.CommandName.DismissOverlay, commandId);
-    }
-    dismissAllOverlays(commandId) {
-        LayoutStore_1.LayoutStore.dismissAllOverlays();
-        this.reportCommandCompletion(CommandName_1.CommandName.DismissAllOverlays, commandId);
-    }
-    getLaunchArgs(commandId) {
-        this.reportCommandCompletion(CommandName_1.CommandName.GetLaunchArgs, commandId);
-    }
-    getNavigationConstants() {
-        return Promise.resolve({
-            topBarHeight: 0,
-            backButtonId: 'RNN.back',
-            bottomTabsHeight: 0,
-            statusBarHeight: 0,
-        });
-    }
-    getNavigationConstantsSync() {
-        return {
-            topBarHeight: 0,
-            backButtonId: 'RNN.back',
-            bottomTabsHeight: 0,
-            statusBarHeight: 0,
-        };
-    }
-    reportCommandCompletion(commandName, commandId) {
-        EventsStore_1.events.invokeCommandCompleted({
-            commandName,
-            commandId,
-            completionTime: 0,
-        });
-    }
-}
-exports.NativeCommandsSender = NativeCommandsSender;
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.d.ts b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.d.ts
deleted file mode 100644
index 31c93c7..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.d.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-import { EmitterSubscription } from 'react-native';
-import { ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent, NavigationButtonPressedEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ModalDismissedEvent, ScreenPoppedEvent, ModalAttemptedToDismissEvent } from '../../src/interfaces/ComponentEvents';
-import { CommandCompletedEvent, BottomTabSelectedEvent, BottomTabLongPressedEvent, BottomTabPressedEvent } from '../../src/interfaces/Events';
-export declare class NativeEventsReceiver {
-    registerAppLaunchedListener(callback: () => void): EmitterSubscription;
-    registerComponentWillAppearListener(callback: (event: ComponentWillAppearEvent) => void): EmitterSubscription;
-    registerComponentDidAppearListener(callback: (event: ComponentDidAppearEvent) => void): EmitterSubscription;
-    registerComponentDidDisappearListener(callback: (event: ComponentDidDisappearEvent) => void): EmitterSubscription;
-    registerNavigationButtonPressedListener(callback: (event: NavigationButtonPressedEvent) => void): EmitterSubscription;
-    registerBottomTabPressedListener(callback: (data: BottomTabPressedEvent) => void): EmitterSubscription;
-    registerModalDismissedListener(callback: (event: ModalDismissedEvent) => void): EmitterSubscription;
-    registerModalAttemptedToDismissListener(_callback: (event: ModalAttemptedToDismissEvent) => void): EmitterSubscription;
-    registerSearchBarUpdatedListener(_callback: (event: SearchBarUpdatedEvent) => void): EmitterSubscription;
-    registerSearchBarCancelPressedListener(_callback: (event: SearchBarCancelPressedEvent) => void): EmitterSubscription;
-    registerPreviewCompletedListener(_callback: (event: PreviewCompletedEvent) => void): EmitterSubscription;
-    registerCommandCompletedListener(callback: (data: CommandCompletedEvent) => void): EmitterSubscription;
-    registerBottomTabSelectedListener(_callback: (data: BottomTabSelectedEvent) => void): EmitterSubscription;
-    registerBottomTabLongPressedListener(_callback: (data: BottomTabLongPressedEvent) => void): EmitterSubscription;
-    registerScreenPoppedListener(_callback: (event: ScreenPoppedEvent) => void): EmitterSubscription;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.js b/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.js
deleted file mode 100644
index 74827e2..0000000
--- a/node_modules/react-native-navigation/lib/dist/Mock/mocks/NativeEventsReceiver.js
+++ /dev/null
@@ -1,104 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NativeEventsReceiver = void 0;
-const tslib_1 = require("tslib");
-const lodash_1 = (0, tslib_1.__importDefault)(require("lodash"));
-const EventsStore_1 = require("./../Stores/EventsStore");
-class NativeEventsReceiver {
-    registerAppLaunchedListener(callback) {
-        callback();
-        return {
-            remove: () => { },
-        };
-    }
-    registerComponentWillAppearListener(callback) {
-        EventsStore_1.events.componentWillAppear.push(callback);
-        return {
-            remove: () => {
-                lodash_1.default.remove(EventsStore_1.events.componentWillAppear, (value) => value === callback);
-            },
-        };
-    }
-    registerComponentDidAppearListener(callback) {
-        EventsStore_1.events.componentDidAppear.push(callback);
-        return {
-            remove: () => {
-                lodash_1.default.remove(EventsStore_1.events.componentDidAppear, (value) => value === callback);
-            },
-        };
-    }
-    registerComponentDidDisappearListener(callback) {
-        EventsStore_1.events.componentDidDisappear.push(callback);
-        return {
-            remove: () => {
-                lodash_1.default.remove(EventsStore_1.events.componentDidDisappear, (value) => value === callback);
-            },
-        };
-    }
-    registerNavigationButtonPressedListener(callback) {
-        EventsStore_1.events.navigationButtonPressed.push(callback);
-        return {
-            remove: () => {
-                lodash_1.default.remove(EventsStore_1.events.navigationButtonPressed, (value) => value === callback);
-            },
-        };
-    }
-    registerBottomTabPressedListener(callback) {
-        EventsStore_1.events.bottomTabPressed.push(callback);
-        return {
-            remove: () => {
-                lodash_1.default.remove(EventsStore_1.events.bottomTabPressed, (value) => value === callback);
-            },
-        };
-    }
-    registerModalDismissedListener(callback) {
-        EventsStore_1.events.modalDismissed.push(callback);
-        return {
-            remove: () => {
-                lodash_1.default.remove(EventsStore_1.events.modalDismissed, (value) => value === callback);
-            },
-        };
-    }
-    registerModalAttemptedToDismissListener(_callback) {
-        return {
-            remove: () => { },
-        };
-    }
-    registerSearchBarUpdatedListener(_callback) {
-        return {
-            remove: () => { },
-        };
-    }
-    registerSearchBarCancelPressedListener(_callback) {
-        return {
-            remove: () => { },
-        };
-    }
-    registerPreviewCompletedListener(_callback) {
-        return {
-            remove: () => { },
-        };
-    }
-    registerCommandCompletedListener(callback) {
-        EventsStore_1.events.commandCompleted.push(callback);
-        return {
-            remove: () => { },
-        };
-    }
-    registerBottomTabSelectedListener(_callback) {
-        return {
-            remove: () => { },
-        };
-    }
-    registerBottomTabLongPressedListener(_callback) {
-        return {
-            remove: () => { },
-        };
-    }
-    registerScreenPoppedListener(_callback) {
-        return {
-            remove: () => { },
-        };
-    }
-}
-exports.NativeEventsReceiver = NativeEventsReceiver;
diff --git a/node_modules/react-native-navigation/lib/dist/src/Navigation.d.ts b/node_modules/react-native-navigation/lib/dist/src/Navigation.d.ts
deleted file mode 100644
index ea92786..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/Navigation.d.ts
+++ /dev/null
@@ -1,129 +0,0 @@
-import { NativeCommandsSender } from './adapters/NativeCommandsSender';
-import { NativeEventsReceiver } from './adapters/NativeEventsReceiver';
-import { Store } from './components/Store';
-import { EventsRegistry } from './events/EventsRegistry';
-import { ComponentProvider } from 'react-native';
-import { NavigationConstants } from './adapters/Constants';
-import { TouchablePreview } from './adapters/TouchablePreview';
-import { LayoutRoot, Layout } from './interfaces/Layout';
-import { Options } from './interfaces/Options';
-import { AppRegistryService } from './adapters/AppRegistryService';
-import { ProcessorSubscription } from './interfaces/ProcessorSubscription';
-import { CommandName } from './interfaces/CommandName';
-import { OptionsProcessor as OptionProcessor } from './interfaces/Processors';
-export declare class NavigationRoot {
-    private readonly nativeCommandsSender;
-    private readonly nativeEventsReceiver;
-    private readonly appRegistryService;
-    readonly TouchablePreview: typeof TouchablePreview;
-    readonly store: Store;
-    private readonly optionProcessorsStore;
-    private readonly layoutProcessorsStore;
-    private readonly uniqueIdProvider;
-    private readonly componentRegistry;
-    private readonly layoutTreeParser;
-    private readonly layoutTreeCrawler;
-    private readonly commands;
-    private readonly eventsRegistry;
-    private readonly commandsObserver;
-    private readonly componentEventsObserver;
-    private readonly componentWrapper;
-    private readonly optionsCrawler;
-    constructor(nativeCommandsSender: NativeCommandsSender, nativeEventsReceiver: NativeEventsReceiver, appRegistryService: AppRegistryService);
-    /**
-     * Every navigation component in your app must be registered with a unique name.
-     * The component itself is a traditional React component extending React.Component.
-     */
-    registerComponent(componentName: string | number, componentProvider: ComponentProvider, concreteComponentProvider?: ComponentProvider): ComponentProvider;
-    /**
-     * Adds an option processor which allows option interpolation by optionPath.
-     */
-    addOptionProcessor<T, S = any>(optionPath: string, processor: OptionProcessor<T, S>): ProcessorSubscription;
-    /**
-     * Method to be invoked when a layout is processed and is about to be created. This can be used to change layout options or even inject props to components.
-     */
-    addLayoutProcessor(processor: (layout: Layout, commandName: CommandName) => Layout): ProcessorSubscription;
-    setLazyComponentRegistrator(lazyRegistratorFn: (lazyComponentRequest: string | number) => void): void;
-    /**
-     * Utility helper function like registerComponent,
-     * wraps the provided component with a react-redux Provider with the passed redux store
-     * @deprecated
-     */
-    registerComponentWithRedux(componentName: string | number, getComponentClassFunc: ComponentProvider, ReduxProvider: any, reduxStore: any): ComponentProvider;
-    /**
-     * Reset the app to a new layout
-     */
-    setRoot(layout: LayoutRoot): Promise<string>;
-    /**
-     * Set default options to all screens. Useful for declaring a consistent style across the app.
-     */
-    setDefaultOptions(options: Options): void;
-    /**
-     * Change a component's navigation options
-     */
-    mergeOptions(componentId: string, options: Options): void;
-    /**
-     * Update a mounted component's props
-     */
-    updateProps(componentId: string, props: object, callback?: () => void): void;
-    /**
-     * Show a screen as a modal.
-     */
-    showModal<P>(layout: Layout<P>): Promise<string>;
-    /**
-     * Dismiss a modal by componentId. The dismissed modal can be anywhere in the stack.
-     */
-    dismissModal(componentId: string, mergeOptions?: Options): Promise<string>;
-    /**
-     * Dismiss all Modals
-     */
-    dismissAllModals(mergeOptions?: Options): Promise<string>;
-    /**
-     * Push a new layout into this screen's navigation stack.
-     */
-    push<P>(componentId: string, layout: Layout<P>): Promise<string>;
-    /**
-     * Pop a component from the stack, regardless of it's position.
-     */
-    pop(componentId: string, mergeOptions?: Options): Promise<string>;
-    /**
-     * Pop the stack to a given component
-     */
-    popTo(componentId: string, mergeOptions?: Options): Promise<string>;
-    /**
-     * Pop the component's stack to root.
-     */
-    popToRoot(componentId: string, mergeOptions?: Options): Promise<string>;
-    /**
-     * Sets new root component to stack.
-     */
-    setStackRoot<P>(componentId: string, layout: Layout<P> | Array<Layout<P>>): Promise<string>;
-    /**
-     * Show overlay on top of the entire app
-     */
-    showOverlay<P>(layout: Layout<P>): Promise<string>;
-    /**
-     * dismiss overlay by componentId
-     */
-    dismissOverlay(componentId: string): Promise<string>;
-    /**
-     * dismiss all overlays
-     */
-    dismissAllOverlays(): Promise<string>;
-    /**
-     * Resolves arguments passed on launch
-     */
-    getLaunchArgs(): Promise<any>;
-    /**
-     * Obtain the events registry instance
-     */
-    events(): EventsRegistry;
-    /**
-     * Constants coming from native
-     */
-    constants(): Promise<NavigationConstants>;
-    /**
-     * Constants coming from native (synchronized call)
-     */
-    constantsSync(): NavigationConstants;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/Navigation.js b/node_modules/react-native-navigation/lib/dist/src/Navigation.js
deleted file mode 100644
index 2b7bb6b..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/Navigation.js
+++ /dev/null
@@ -1,212 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NavigationRoot = void 0;
-const tslib_1 = require("tslib");
-const isArray_1 = (0, tslib_1.__importDefault)(require("lodash/isArray"));
-const UniqueIdProvider_1 = require("./adapters/UniqueIdProvider");
-const Store_1 = require("./components/Store");
-const OptionProcessorsStore_1 = require("./processors/OptionProcessorsStore");
-const ComponentRegistry_1 = require("./components/ComponentRegistry");
-const Commands_1 = require("./commands/Commands");
-const LayoutTreeParser_1 = require("./commands/LayoutTreeParser");
-const LayoutTreeCrawler_1 = require("./commands/LayoutTreeCrawler");
-const EventsRegistry_1 = require("./events/EventsRegistry");
-const CommandsObserver_1 = require("./events/CommandsObserver");
-const Constants_1 = require("./adapters/Constants");
-const ComponentEventsObserver_1 = require("./events/ComponentEventsObserver");
-const TouchablePreview_1 = require("./adapters/TouchablePreview");
-const ComponentWrapper_1 = require("./components/ComponentWrapper");
-const OptionsProcessor_1 = require("./commands/OptionsProcessor");
-const ColorService_1 = require("./adapters/ColorService");
-const AssetResolver_1 = require("./adapters/AssetResolver");
-const Deprecations_1 = require("./commands/Deprecations");
-const LayoutProcessor_1 = require("./processors/LayoutProcessor");
-const LayoutProcessorsStore_1 = require("./processors/LayoutProcessorsStore");
-const OptionsCrawler_1 = require("./commands/OptionsCrawler");
-class NavigationRoot {
-    nativeCommandsSender;
-    nativeEventsReceiver;
-    appRegistryService;
-    TouchablePreview = TouchablePreview_1.TouchablePreview;
-    store;
-    optionProcessorsStore;
-    layoutProcessorsStore;
-    uniqueIdProvider;
-    componentRegistry;
-    layoutTreeParser;
-    layoutTreeCrawler;
-    commands;
-    eventsRegistry;
-    commandsObserver;
-    componentEventsObserver;
-    componentWrapper;
-    optionsCrawler;
-    constructor(nativeCommandsSender, nativeEventsReceiver, appRegistryService) {
-        this.nativeCommandsSender = nativeCommandsSender;
-        this.nativeEventsReceiver = nativeEventsReceiver;
-        this.appRegistryService = appRegistryService;
-        this.componentWrapper = new ComponentWrapper_1.ComponentWrapper();
-        this.store = new Store_1.Store();
-        this.optionProcessorsStore = new OptionProcessorsStore_1.OptionProcessorsStore();
-        this.layoutProcessorsStore = new LayoutProcessorsStore_1.LayoutProcessorsStore();
-        this.uniqueIdProvider = new UniqueIdProvider_1.UniqueIdProvider();
-        this.componentEventsObserver = new ComponentEventsObserver_1.ComponentEventsObserver(this.nativeEventsReceiver, this.store);
-        this.componentRegistry = new ComponentRegistry_1.ComponentRegistry(this.store, this.componentEventsObserver, this.componentWrapper, this.appRegistryService);
-        this.layoutTreeParser = new LayoutTreeParser_1.LayoutTreeParser(this.uniqueIdProvider);
-        const optionsProcessor = new OptionsProcessor_1.OptionsProcessor(this.store, this.uniqueIdProvider, this.optionProcessorsStore, new ColorService_1.ColorService(), new AssetResolver_1.AssetService(), new Deprecations_1.Deprecations());
-        const layoutProcessor = new LayoutProcessor_1.LayoutProcessor(this.layoutProcessorsStore);
-        this.layoutTreeCrawler = new LayoutTreeCrawler_1.LayoutTreeCrawler(this.store, optionsProcessor);
-        this.commandsObserver = new CommandsObserver_1.CommandsObserver(this.uniqueIdProvider);
-        this.optionsCrawler = new OptionsCrawler_1.OptionsCrawler(this.store, this.uniqueIdProvider);
-        this.commands = new Commands_1.Commands(this.store, this.nativeCommandsSender, this.layoutTreeParser, this.layoutTreeCrawler, this.commandsObserver, this.uniqueIdProvider, optionsProcessor, layoutProcessor, this.optionsCrawler);
-        this.eventsRegistry = new EventsRegistry_1.EventsRegistry(this.nativeEventsReceiver, this.commandsObserver, this.componentEventsObserver);
-        this.componentEventsObserver.registerOnceForAllComponentEvents();
-    }
-    /**
-     * Every navigation component in your app must be registered with a unique name.
-     * The component itself is a traditional React component extending React.Component.
-     */
-    registerComponent(componentName, componentProvider, concreteComponentProvider) {
-        return this.componentRegistry.registerComponent(componentName, componentProvider, concreteComponentProvider);
-    }
-    /**
-     * Adds an option processor which allows option interpolation by optionPath.
-     */
-    addOptionProcessor(optionPath, processor) {
-        return this.optionProcessorsStore.addProcessor(optionPath, processor);
-    }
-    /**
-     * Method to be invoked when a layout is processed and is about to be created. This can be used to change layout options or even inject props to components.
-     */
-    addLayoutProcessor(processor) {
-        return this.layoutProcessorsStore.addProcessor(processor);
-    }
-    setLazyComponentRegistrator(lazyRegistratorFn) {
-        this.store.setLazyComponentRegistrator(lazyRegistratorFn);
-    }
-    /**
-     * Utility helper function like registerComponent,
-     * wraps the provided component with a react-redux Provider with the passed redux store
-     * @deprecated
-     */
-    registerComponentWithRedux(componentName, getComponentClassFunc, ReduxProvider, reduxStore) {
-        console.warn('registerComponentWithRedux is deprecated and will be removed in the next version! Please use Navigation.registerComponent instead. Visit the docs for more information https://wix.github.io/react-native-navigation/api/component#registering-a-component-wrapped-with-providers');
-        return this.componentRegistry.registerComponent(componentName, getComponentClassFunc, undefined, ReduxProvider, reduxStore);
-    }
-    /**
-     * Reset the app to a new layout
-     */
-    setRoot(layout) {
-        return this.commands.setRoot(layout);
-    }
-    /**
-     * Set default options to all screens. Useful for declaring a consistent style across the app.
-     */
-    setDefaultOptions(options) {
-        this.commands.setDefaultOptions(options);
-    }
-    /**
-     * Change a component's navigation options
-     */
-    mergeOptions(componentId, options) {
-        this.commands.mergeOptions(componentId, options);
-    }
-    /**
-     * Update a mounted component's props
-     */
-    updateProps(componentId, props, callback) {
-        this.commands.updateProps(componentId, props, callback);
-    }
-    /**
-     * Show a screen as a modal.
-     */
-    showModal(layout) {
-        return this.commands.showModal(layout);
-    }
-    /**
-     * Dismiss a modal by componentId. The dismissed modal can be anywhere in the stack.
-     */
-    dismissModal(componentId, mergeOptions) {
-        return this.commands.dismissModal(componentId, mergeOptions);
-    }
-    /**
-     * Dismiss all Modals
-     */
-    dismissAllModals(mergeOptions) {
-        return this.commands.dismissAllModals(mergeOptions);
-    }
-    /**
-     * Push a new layout into this screen's navigation stack.
-     */
-    push(componentId, layout) {
-        return this.commands.push(componentId, layout);
-    }
-    /**
-     * Pop a component from the stack, regardless of it's position.
-     */
-    pop(componentId, mergeOptions) {
-        return this.commands.pop(componentId, mergeOptions);
-    }
-    /**
-     * Pop the stack to a given component
-     */
-    popTo(componentId, mergeOptions) {
-        return this.commands.popTo(componentId, mergeOptions);
-    }
-    /**
-     * Pop the component's stack to root.
-     */
-    popToRoot(componentId, mergeOptions) {
-        return this.commands.popToRoot(componentId, mergeOptions);
-    }
-    /**
-     * Sets new root component to stack.
-     */
-    setStackRoot(componentId, layout) {
-        const children = (0, isArray_1.default)(layout) ? layout : [layout];
-        return this.commands.setStackRoot(componentId, children);
-    }
-    /**
-     * Show overlay on top of the entire app
-     */
-    showOverlay(layout) {
-        return this.commands.showOverlay(layout);
-    }
-    /**
-     * dismiss overlay by componentId
-     */
-    dismissOverlay(componentId) {
-        return this.commands.dismissOverlay(componentId);
-    }
-    /**
-     * dismiss all overlays
-     */
-    dismissAllOverlays() {
-        return this.commands.dismissAllOverlays();
-    }
-    /**
-     * Resolves arguments passed on launch
-     */
-    getLaunchArgs() {
-        return this.commands.getLaunchArgs();
-    }
-    /**
-     * Obtain the events registry instance
-     */
-    events() {
-        return this.eventsRegistry;
-    }
-    /**
-     * Constants coming from native
-     */
-    async constants() {
-        return await Constants_1.Constants.get(this.nativeCommandsSender);
-    }
-    /**
-     * Constants coming from native (synchronized call)
-     */
-    constantsSync() {
-        return Constants_1.Constants.getSync(this.nativeCommandsSender);
-    }
-}
-exports.NavigationRoot = NavigationRoot;
diff --git a/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.d.ts b/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.d.ts
deleted file mode 100644
index 697f397..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.d.ts
+++ /dev/null
@@ -1,114 +0,0 @@
-import { EventsRegistry } from './events/EventsRegistry';
-import { ComponentProvider } from 'react-native';
-import { NavigationConstants } from './adapters/Constants';
-import { LayoutRoot, Layout } from './interfaces/Layout';
-import { Options } from './interfaces/Options';
-import { ProcessorSubscription } from './interfaces/ProcessorSubscription';
-import { CommandName } from './interfaces/CommandName';
-import { OptionsProcessor as OptionProcessor } from './interfaces/Processors';
-import { NativeCommandsSender } from './adapters/NativeCommandsSender';
-import { NativeEventsReceiver } from './adapters/NativeEventsReceiver';
-import { AppRegistryService } from './adapters/AppRegistryService';
-export declare class NavigationDelegate {
-    private concreteNavigation;
-    constructor();
-    private createConcreteNavigation;
-    /**
-     * Every navigation component in your app must be registered with a unique name.
-     * The component itself is a traditional React component extending React.Component.
-     */
-    registerComponent(componentName: string | number, componentProvider: ComponentProvider, concreteComponentProvider?: ComponentProvider): ComponentProvider;
-    /**
-     * Adds an option processor which allows option interpolation by optionPath.
-     */
-    addOptionProcessor<T, S = any>(optionPath: string, processor: OptionProcessor<T, S>): ProcessorSubscription;
-    /**
-     * Method to be invoked when a layout is processed and is about to be created. This can be used to change layout options or even inject props to components.
-     */
-    addLayoutProcessor(processor: (layout: Layout, commandName: CommandName) => Layout): ProcessorSubscription;
-    setLazyComponentRegistrator(lazyRegistratorFn: (lazyComponentRequest: string | number) => void): void;
-    /**
-     * Utility helper function like registerComponent,
-     * wraps the provided component with a react-redux Provider with the passed redux store
-     * @deprecated
-     */
-    registerComponentWithRedux(componentName: string | number, getComponentClassFunc: ComponentProvider, ReduxProvider: any, reduxStore: any): ComponentProvider;
-    /**
-     * Reset the app to a new layout
-     */
-    setRoot(layout: LayoutRoot): Promise<string>;
-    /**
-     * Set default options to all screens. Useful for declaring a consistent style across the app.
-     */
-    setDefaultOptions(options: Options): void;
-    /**
-     * Change a component's navigation options
-     */
-    mergeOptions(componentId: string, options: Options): void;
-    /**
-     * Update a mounted component's props
-     */
-    updateProps(componentId: string, props: object, callback?: () => void): void;
-    /**
-     * Show a screen as a modal.
-     */
-    showModal<P>(layout: Layout<P>): Promise<string>;
-    /**
-     * Dismiss a modal by componentId. The dismissed modal can be anywhere in the stack.
-     */
-    dismissModal(componentId: string, mergeOptions?: Options): Promise<string>;
-    /**
-     * Dismiss all Modals
-     */
-    dismissAllModals(mergeOptions?: Options): Promise<string>;
-    /**
-     * Push a new layout into this screen's navigation stack.
-     */
-    push<P>(componentId: string, layout: Layout<P>): Promise<string>;
-    /**
-     * Pop a component from the stack, regardless of it's position.
-     */
-    pop(componentId: string, mergeOptions?: Options): Promise<string>;
-    /**
-     * Pop the stack to a given component
-     */
-    popTo(componentId: string, mergeOptions?: Options): Promise<string>;
-    /**
-     * Pop the component's stack to root.
-     */
-    popToRoot(componentId: string, mergeOptions?: Options): Promise<string>;
-    /**
-     * Sets new root component to stack.
-     */
-    setStackRoot<P>(componentId: string, layout: Layout<P> | Array<Layout<P>>): Promise<string>;
-    /**
-     * Show overlay on top of the entire app
-     */
-    showOverlay<P>(layout: Layout<P>): Promise<string>;
-    /**
-     * dismiss overlay by componentId
-     */
-    dismissOverlay(componentId: string): Promise<string>;
-    /**
-     * dismiss all overlays
-     */
-    dismissAllOverlays(): Promise<string>;
-    /**
-     * Resolves arguments passed on launch
-     */
-    getLaunchArgs(): Promise<any>;
-    /**
-     * Obtain the events registry instance
-     */
-    events(): EventsRegistry;
-    /**
-     * Constants coming from native
-     */
-    constants(): Promise<NavigationConstants>;
-    constantsSync(): NavigationConstants;
-    get TouchablePreview(): typeof import("./adapters/TouchablePreview").TouchablePreview;
-    mockNativeComponents(mockedNativeCommandsSender: NativeCommandsSender, mockedNativeEventsReceiver: NativeEventsReceiver, mockedAppRegistryService: AppRegistryService): void;
-    get mock(): {
-        store: import("./components/Store").Store;
-    };
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.js b/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.js
deleted file mode 100644
index e4b83a9..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/NavigationDelegate.js
+++ /dev/null
@@ -1,169 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NavigationDelegate = void 0;
-const Navigation_1 = require("./Navigation");
-const NativeCommandsSender_1 = require("./adapters/NativeCommandsSender");
-const NativeEventsReceiver_1 = require("./adapters/NativeEventsReceiver");
-const AppRegistryService_1 = require("./adapters/AppRegistryService");
-class NavigationDelegate {
-    concreteNavigation;
-    constructor() {
-        this.concreteNavigation = this.createConcreteNavigation(new NativeCommandsSender_1.NativeCommandsSender(), new NativeEventsReceiver_1.NativeEventsReceiver(), new AppRegistryService_1.AppRegistryService());
-    }
-    createConcreteNavigation(nativeCommandsSender, nativeEventsReceiver, appRegistryService) {
-        return new Navigation_1.NavigationRoot(nativeCommandsSender, nativeEventsReceiver, appRegistryService);
-    }
-    /**
-     * Every navigation component in your app must be registered with a unique name.
-     * The component itself is a traditional React component extending React.Component.
-     */
-    registerComponent(componentName, componentProvider, concreteComponentProvider) {
-        return this.concreteNavigation.registerComponent(componentName, componentProvider, concreteComponentProvider);
-    }
-    /**
-     * Adds an option processor which allows option interpolation by optionPath.
-     */
-    addOptionProcessor(optionPath, processor) {
-        return this.concreteNavigation.addOptionProcessor(optionPath, processor);
-    }
-    /**
-     * Method to be invoked when a layout is processed and is about to be created. This can be used to change layout options or even inject props to components.
-     */
-    addLayoutProcessor(processor) {
-        return this.concreteNavigation.addLayoutProcessor(processor);
-    }
-    setLazyComponentRegistrator(lazyRegistratorFn) {
-        this.concreteNavigation.setLazyComponentRegistrator(lazyRegistratorFn);
-    }
-    /**
-     * Utility helper function like registerComponent,
-     * wraps the provided component with a react-redux Provider with the passed redux store
-     * @deprecated
-     */
-    registerComponentWithRedux(componentName, getComponentClassFunc, ReduxProvider, reduxStore) {
-        return this.concreteNavigation.registerComponentWithRedux(componentName, getComponentClassFunc, ReduxProvider, reduxStore);
-    }
-    /**
-     * Reset the app to a new layout
-     */
-    setRoot(layout) {
-        return this.concreteNavigation.setRoot(layout);
-    }
-    /**
-     * Set default options to all screens. Useful for declaring a consistent style across the app.
-     */
-    setDefaultOptions(options) {
-        this.concreteNavigation.setDefaultOptions(options);
-    }
-    /**
-     * Change a component's navigation options
-     */
-    mergeOptions(componentId, options) {
-        this.concreteNavigation.mergeOptions(componentId, options);
-    }
-    /**
-     * Update a mounted component's props
-     */
-    updateProps(componentId, props, callback) {
-        this.concreteNavigation.updateProps(componentId, props, callback);
-    }
-    /**
-     * Show a screen as a modal.
-     */
-    showModal(layout) {
-        return this.concreteNavigation.showModal(layout);
-    }
-    /**
-     * Dismiss a modal by componentId. The dismissed modal can be anywhere in the stack.
-     */
-    dismissModal(componentId, mergeOptions) {
-        return this.concreteNavigation.dismissModal(componentId, mergeOptions);
-    }
-    /**
-     * Dismiss all Modals
-     */
-    dismissAllModals(mergeOptions) {
-        return this.concreteNavigation.dismissAllModals(mergeOptions);
-    }
-    /**
-     * Push a new layout into this screen's navigation stack.
-     */
-    push(componentId, layout) {
-        return this.concreteNavigation.push(componentId, layout);
-    }
-    /**
-     * Pop a component from the stack, regardless of it's position.
-     */
-    pop(componentId, mergeOptions) {
-        return this.concreteNavigation.pop(componentId, mergeOptions);
-    }
-    /**
-     * Pop the stack to a given component
-     */
-    popTo(componentId, mergeOptions) {
-        return this.concreteNavigation.popTo(componentId, mergeOptions);
-    }
-    /**
-     * Pop the component's stack to root.
-     */
-    popToRoot(componentId, mergeOptions) {
-        return this.concreteNavigation.popToRoot(componentId, mergeOptions);
-    }
-    /**
-     * Sets new root component to stack.
-     */
-    setStackRoot(componentId, layout) {
-        return this.concreteNavigation.setStackRoot(componentId, layout);
-    }
-    /**
-     * Show overlay on top of the entire app
-     */
-    showOverlay(layout) {
-        return this.concreteNavigation.showOverlay(layout);
-    }
-    /**
-     * dismiss overlay by componentId
-     */
-    dismissOverlay(componentId) {
-        return this.concreteNavigation.dismissOverlay(componentId);
-    }
-    /**
-     * dismiss all overlays
-     */
-    dismissAllOverlays() {
-        return this.concreteNavigation.dismissAllOverlays();
-    }
-    /**
-     * Resolves arguments passed on launch
-     */
-    getLaunchArgs() {
-        return this.concreteNavigation.getLaunchArgs();
-    }
-    /**
-     * Obtain the events registry instance
-     */
-    events() {
-        return this.concreteNavigation.events();
-    }
-    /**
-     * Constants coming from native
-     */
-    async constants() {
-        return await this.concreteNavigation.constants();
-    }
-    constantsSync() {
-        return this.concreteNavigation.constantsSync();
-    }
-    get TouchablePreview() {
-        return this.concreteNavigation.TouchablePreview;
-    }
-    mockNativeComponents(mockedNativeCommandsSender, mockedNativeEventsReceiver, mockedAppRegistryService) {
-        this.concreteNavigation = this.createConcreteNavigation(mockedNativeCommandsSender, mockedNativeEventsReceiver, mockedAppRegistryService);
-    }
-    get mock() {
-        return {
-            store: this.concreteNavigation.store,
-        };
-    }
-}
-exports.NavigationDelegate = NavigationDelegate;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.d.ts
deleted file mode 100644
index 218da07..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import { ComponentProvider } from 'react-native';
-export declare class AppRegistryService {
-    registerComponent(appKey: string, getComponentFunc: ComponentProvider): void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.js b/node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.js
deleted file mode 100644
index 1c20416..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/AppRegistryService.js
+++ /dev/null
@@ -1,10 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.AppRegistryService = void 0;
-const react_native_1 = require("react-native");
-class AppRegistryService {
-    registerComponent(appKey, getComponentFunc) {
-        react_native_1.AppRegistry.registerComponent(appKey, getComponentFunc);
-    }
-}
-exports.AppRegistryService = AppRegistryService;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.d.ts
deleted file mode 100644
index 7fd1457..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-import { ImageSourcePropType } from 'react-native';
-export declare class AssetService {
-    resolveFromRequire(value: ImageSourcePropType): import("react-native").ImageResolvedAssetSource;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.js b/node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.js
deleted file mode 100644
index 554035b..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/AssetResolver.js
+++ /dev/null
@@ -1,10 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.AssetService = void 0;
-const react_native_1 = require("react-native");
-class AssetService {
-    resolveFromRequire(value) {
-        return react_native_1.Image.resolveAssetSource(value);
-    }
-}
-exports.AssetService = AssetService;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.d.ts
deleted file mode 100644
index 6af5467..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export declare class ColorService {
-    toNativeColor(inputColor: string): import("react-native").ProcessedColorValue | null | undefined;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.js b/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.js
deleted file mode 100644
index 96fdc3f..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/ColorService.js
+++ /dev/null
@@ -1,10 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ColorService = void 0;
-const react_native_1 = require("react-native");
-class ColorService {
-    toNativeColor(inputColor) {
-        return (0, react_native_1.processColor)(inputColor);
-    }
-}
-exports.ColorService = ColorService;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.d.ts
deleted file mode 100644
index 0608d62..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { NativeCommandsSender } from './NativeCommandsSender';
-export interface NavigationConstants {
-    statusBarHeight: number;
-    backButtonId: string;
-    topBarHeight: number;
-    bottomTabsHeight: number;
-}
-export declare class Constants {
-    static get(nativeCommandSender: NativeCommandsSender): Promise<NavigationConstants>;
-    static getSync(nativeCommandSender: NativeCommandsSender): NavigationConstants;
-    readonly statusBarHeight: number;
-    readonly backButtonId: string;
-    readonly topBarHeight: number;
-    readonly bottomTabsHeight: number;
-    private constructor();
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.js b/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.js
deleted file mode 100644
index 74d767d..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/Constants.js
+++ /dev/null
@@ -1,24 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Constants = void 0;
-class Constants {
-    static async get(nativeCommandSender) {
-        const constants = await nativeCommandSender.getNavigationConstants();
-        return new Constants(constants);
-    }
-    static getSync(nativeCommandSender) {
-        const constants = nativeCommandSender.getNavigationConstantsSync();
-        return new Constants(constants);
-    }
-    statusBarHeight;
-    backButtonId;
-    topBarHeight;
-    bottomTabsHeight;
-    constructor(constants) {
-        this.statusBarHeight = constants.statusBarHeight;
-        this.topBarHeight = constants.topBarHeight;
-        this.backButtonId = constants.backButtonId;
-        this.bottomTabsHeight = constants.bottomTabsHeight;
-    }
-}
-exports.Constants = Constants;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.d.ts
deleted file mode 100644
index f9f1f0f..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.d.ts
+++ /dev/null
@@ -1,26 +0,0 @@
-import { NavigationConstants } from './Constants';
-export declare class NativeCommandsSender {
-    private readonly nativeCommandsModule;
-    constructor();
-    setRoot(commandId: string, layout: {
-        root: any;
-        modals: any[];
-        overlays: any[];
-    }): Promise<any>;
-    setDefaultOptions(options: object): void;
-    mergeOptions(componentId: string, options: object): void;
-    push(commandId: string, onComponentId: string, layout: object): Promise<any>;
-    pop(commandId: string, componentId: string, options?: object): Promise<any>;
-    popTo(commandId: string, componentId: string, options?: object): Promise<any>;
-    popToRoot(commandId: string, componentId: string, options?: object): Promise<any>;
-    setStackRoot(commandId: string, onComponentId: string, layout: object): Promise<any>;
-    showModal(commandId: string, layout: object): Promise<any>;
-    dismissModal(commandId: string, componentId: string, options?: object): Promise<any>;
-    dismissAllModals(commandId: string, options?: object): Promise<any>;
-    showOverlay(commandId: string, layout: object): Promise<any>;
-    dismissOverlay(commandId: string, componentId: string): Promise<any>;
-    dismissAllOverlays(commandId: string): Promise<any>;
-    getLaunchArgs(commandId: string): Promise<any>;
-    getNavigationConstants(): Promise<NavigationConstants>;
-    getNavigationConstantsSync(): NavigationConstants;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.js b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.js
deleted file mode 100644
index 0dc48ff..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeCommandsSender.js
+++ /dev/null
@@ -1,62 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NativeCommandsSender = void 0;
-const react_native_1 = require("react-native");
-class NativeCommandsSender {
-    nativeCommandsModule;
-    constructor() {
-        this.nativeCommandsModule = react_native_1.NativeModules.RNNBridgeModule;
-    }
-    setRoot(commandId, layout) {
-        return this.nativeCommandsModule.setRoot(commandId, layout);
-    }
-    setDefaultOptions(options) {
-        return this.nativeCommandsModule.setDefaultOptions(options);
-    }
-    mergeOptions(componentId, options) {
-        return this.nativeCommandsModule.mergeOptions(componentId, options);
-    }
-    push(commandId, onComponentId, layout) {
-        return this.nativeCommandsModule.push(commandId, onComponentId, layout);
-    }
-    pop(commandId, componentId, options) {
-        return this.nativeCommandsModule.pop(commandId, componentId, options);
-    }
-    popTo(commandId, componentId, options) {
-        return this.nativeCommandsModule.popTo(commandId, componentId, options);
-    }
-    popToRoot(commandId, componentId, options) {
-        return this.nativeCommandsModule.popToRoot(commandId, componentId, options);
-    }
-    setStackRoot(commandId, onComponentId, layout) {
-        return this.nativeCommandsModule.setStackRoot(commandId, onComponentId, layout);
-    }
-    showModal(commandId, layout) {
-        return this.nativeCommandsModule.showModal(commandId, layout);
-    }
-    dismissModal(commandId, componentId, options) {
-        return this.nativeCommandsModule.dismissModal(commandId, componentId, options);
-    }
-    dismissAllModals(commandId, options) {
-        return this.nativeCommandsModule.dismissAllModals(commandId, options);
-    }
-    showOverlay(commandId, layout) {
-        return this.nativeCommandsModule.showOverlay(commandId, layout);
-    }
-    dismissOverlay(commandId, componentId) {
-        return this.nativeCommandsModule.dismissOverlay(commandId, componentId);
-    }
-    dismissAllOverlays(commandId) {
-        return this.nativeCommandsModule.dismissAllOverlays(commandId);
-    }
-    getLaunchArgs(commandId) {
-        return this.nativeCommandsModule.getLaunchArgs(commandId);
-    }
-    getNavigationConstants() {
-        return this.nativeCommandsModule.getNavigationConstants();
-    }
-    getNavigationConstantsSync() {
-        return this.nativeCommandsModule.getNavigationConstantsSync();
-    }
-}
-exports.NativeCommandsSender = NativeCommandsSender;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.d.ts
deleted file mode 100644
index c2cd914..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.d.ts
+++ /dev/null
@@ -1,22 +0,0 @@
-import { EmitterSubscription } from 'react-native';
-import { ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent, NavigationButtonPressedEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ModalDismissedEvent, ScreenPoppedEvent, ModalAttemptedToDismissEvent } from '../interfaces/ComponentEvents';
-import { CommandCompletedEvent, BottomTabSelectedEvent, BottomTabLongPressedEvent, BottomTabPressedEvent } from '../interfaces/Events';
-export declare class NativeEventsReceiver {
-    private emitter;
-    constructor();
-    registerAppLaunchedListener(callback: () => void): EmitterSubscription;
-    registerComponentWillAppearListener(callback: (event: ComponentWillAppearEvent) => void): EmitterSubscription;
-    registerComponentDidAppearListener(callback: (event: ComponentDidAppearEvent) => void): EmitterSubscription;
-    registerComponentDidDisappearListener(callback: (event: ComponentDidDisappearEvent) => void): EmitterSubscription;
-    registerNavigationButtonPressedListener(callback: (event: NavigationButtonPressedEvent) => void): EmitterSubscription;
-    registerBottomTabPressedListener(callback: (data: BottomTabPressedEvent) => void): EmitterSubscription;
-    registerModalDismissedListener(callback: (event: ModalDismissedEvent) => void): EmitterSubscription;
-    registerModalAttemptedToDismissListener(callback: (event: ModalAttemptedToDismissEvent) => void): EmitterSubscription;
-    registerSearchBarUpdatedListener(callback: (event: SearchBarUpdatedEvent) => void): EmitterSubscription;
-    registerSearchBarCancelPressedListener(callback: (event: SearchBarCancelPressedEvent) => void): EmitterSubscription;
-    registerPreviewCompletedListener(callback: (event: PreviewCompletedEvent) => void): EmitterSubscription;
-    registerCommandCompletedListener(callback: (data: CommandCompletedEvent) => void): EmitterSubscription;
-    registerBottomTabSelectedListener(callback: (data: BottomTabSelectedEvent) => void): EmitterSubscription;
-    registerBottomTabLongPressedListener(callback: (data: BottomTabLongPressedEvent) => void): EmitterSubscription;
-    registerScreenPoppedListener(callback: (event: ScreenPoppedEvent) => void): EmitterSubscription;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.js b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.js
deleted file mode 100644
index f6ffc80..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.js
+++ /dev/null
@@ -1,67 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NativeEventsReceiver = void 0;
-const react_native_1 = require("react-native");
-class NativeEventsReceiver {
-    emitter;
-    constructor() {
-        try {
-            this.emitter = new react_native_1.NativeEventEmitter(react_native_1.NativeModules.RNNEventEmitter);
-        }
-        catch (e) {
-            this.emitter = {
-                addListener: () => {
-                    return {
-                        remove: () => undefined,
-                    };
-                },
-            };
-        }
-    }
-    registerAppLaunchedListener(callback) {
-        return this.emitter.addListener('RNN.AppLaunched', callback);
-    }
-    registerComponentWillAppearListener(callback) {
-        return this.emitter.addListener('RNN.ComponentWillAppear', callback);
-    }
-    registerComponentDidAppearListener(callback) {
-        return this.emitter.addListener('RNN.ComponentDidAppear', callback);
-    }
-    registerComponentDidDisappearListener(callback) {
-        return this.emitter.addListener('RNN.ComponentDidDisappear', callback);
-    }
-    registerNavigationButtonPressedListener(callback) {
-        return this.emitter.addListener('RNN.NavigationButtonPressed', callback);
-    }
-    registerBottomTabPressedListener(callback) {
-        return this.emitter.addListener('RNN.BottomTabPressed', callback);
-    }
-    registerModalDismissedListener(callback) {
-        return this.emitter.addListener('RNN.ModalDismissed', callback);
-    }
-    registerModalAttemptedToDismissListener(callback) {
-        return this.emitter.addListener('RNN.ModalAttemptedToDismiss', callback);
-    }
-    registerSearchBarUpdatedListener(callback) {
-        return this.emitter.addListener('RNN.SearchBarUpdated', callback);
-    }
-    registerSearchBarCancelPressedListener(callback) {
-        return this.emitter.addListener('RNN.SearchBarCancelPressed', callback);
-    }
-    registerPreviewCompletedListener(callback) {
-        return this.emitter.addListener('RNN.PreviewCompleted', callback);
-    }
-    registerCommandCompletedListener(callback) {
-        return this.emitter.addListener('RNN.CommandCompleted', callback);
-    }
-    registerBottomTabSelectedListener(callback) {
-        return this.emitter.addListener('RNN.BottomTabSelected', callback);
-    }
-    registerBottomTabLongPressedListener(callback) {
-        return this.emitter.addListener('RNN.BottomTabLongPressed', callback);
-    }
-    registerScreenPoppedListener(callback) {
-        return this.emitter.addListener('RNN.ScreenPopped', callback);
-    }
-}
-exports.NativeEventsReceiver = NativeEventsReceiver;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.d.ts
deleted file mode 100644
index bcdf0ed..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export declare const NativeEventsReceiver: any;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.js b/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.js
deleted file mode 100644
index e939c9b..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/NativeEventsReceiver.mock.js
+++ /dev/null
@@ -1,4 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NativeEventsReceiver = void 0;
-exports.NativeEventsReceiver = jest.genMockFromModule('./NativeEventsReceiver').NativeEventsReceiver;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.d.ts
deleted file mode 100644
index 91b1978..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.d.ts
+++ /dev/null
@@ -1,43 +0,0 @@
-import * as React from 'react';
-import * as PropTypes from 'prop-types';
-import { TouchableOpacity, TouchableHighlight, TouchableNativeFeedback, TouchableWithoutFeedback, GestureResponderEvent, NativeTouchEvent, NativeSyntheticEvent } from 'react-native';
-interface NativeTouchEventWithForce extends NativeTouchEvent {
-    force: number;
-}
-interface GestureResponderEventWithForce extends NativeSyntheticEvent<NativeTouchEventWithForce> {
-}
-export interface Props {
-    children?: React.ReactNode;
-    touchableComponent?: TouchableHighlight | TouchableOpacity | TouchableNativeFeedback | TouchableWithoutFeedback | React.ReactNode;
-    onPress?: () => void;
-    onPressIn?: (payload: {
-        reactTag: number | null;
-    }) => void;
-    onPeekIn?: () => void;
-    onPeekOut?: () => void;
-}
-export declare class TouchablePreview extends React.PureComponent<Props> {
-    static propTypes: {
-        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
-        touchableComponent: PropTypes.Requireable<(...args: any[]) => any>;
-        onPress: PropTypes.Requireable<(...args: any[]) => any>;
-        onPressIn: PropTypes.Requireable<(...args: any[]) => any>;
-        onPeekIn: PropTypes.Requireable<(...args: any[]) => any>;
-        onPeekOut: PropTypes.Requireable<(...args: any[]) => any>;
-        label: PropTypes.Requireable<string>;
-    };
-    static defaultProps: {
-        touchableComponent: typeof TouchableWithoutFeedback;
-    };
-    static peeking: boolean;
-    private timeout;
-    private touchStartedAt;
-    private onRef;
-    onPress: () => void;
-    onPressIn: () => void | null;
-    onTouchStart: (event: GestureResponderEvent) => void;
-    onTouchMove: (event: GestureResponderEventWithForce) => void;
-    onTouchEnd: () => void;
-    render(): JSX.Element;
-}
-export {};
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.js b/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.js
deleted file mode 100644
index 4e792a6..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/TouchablePreview.js
+++ /dev/null
@@ -1,89 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.TouchablePreview = void 0;
-const tslib_1 = require("tslib");
-const React = (0, tslib_1.__importStar)(require("react"));
-const PropTypes = (0, tslib_1.__importStar)(require("prop-types"));
-const react_native_1 = require("react-native");
-const PREVIEW_DELAY = 350;
-const PREVIEW_MIN_FORCE = 0.1;
-const PREVIEW_TIMEOUT = 1250;
-class TouchablePreview extends React.PureComponent {
-    static propTypes = {
-        children: PropTypes.node,
-        touchableComponent: PropTypes.func,
-        onPress: PropTypes.func,
-        onPressIn: PropTypes.func,
-        onPeekIn: PropTypes.func,
-        onPeekOut: PropTypes.func,
-        label: PropTypes.string,
-    };
-    static defaultProps = {
-        touchableComponent: react_native_1.TouchableWithoutFeedback,
-    };
-    static peeking = false;
-    timeout;
-    touchStartedAt = 0;
-    onRef = React.createRef();
-    onPress = () => {
-        const { onPress } = this.props;
-        if (typeof onPress !== 'function' || TouchablePreview.peeking) {
-            return;
-        }
-        return onPress();
-    };
-    onPressIn = () => {
-        if (react_native_1.Platform.OS === 'ios') {
-            const { onPressIn } = this.props;
-            if (!onPressIn) {
-                return;
-            }
-            const reactTag = (0, react_native_1.findNodeHandle)(this.onRef.current);
-            return onPressIn({ reactTag });
-        }
-        // Other platforms don't support 3D Touch Preview API
-        return null;
-    };
-    onTouchStart = (event) => {
-        // Store a timestamp of the initial touch start
-        this.touchStartedAt = event.nativeEvent.timestamp;
-    };
-    onTouchMove = (event) => {
-        clearTimeout(this.timeout);
-        const { force, timestamp } = event.nativeEvent;
-        const diff = timestamp - this.touchStartedAt;
-        if (force > PREVIEW_MIN_FORCE && diff > PREVIEW_DELAY) {
-            TouchablePreview.peeking = true;
-            if (typeof this.props.onPeekIn === 'function') {
-                this.props.onPeekIn();
-            }
-        }
-        //@ts-ignore
-        this.timeout = setTimeout(this.onTouchEnd, PREVIEW_TIMEOUT);
-    };
-    onTouchEnd = () => {
-        clearTimeout(this.timeout);
-        TouchablePreview.peeking = false;
-        if (typeof this.props.onPeekOut === 'function') {
-            this.props.onPeekOut();
-        }
-    };
-    render() {
-        const { children, touchableComponent, ...props } = this.props;
-        // Default to TouchableWithoutFeedback for iOS if set to TouchableNativeFeedback
-        const Touchable = react_native_1.Platform.OS === 'ios' && touchableComponent instanceof react_native_1.TouchableNativeFeedback
-            ? react_native_1.TouchableWithoutFeedback
-            : touchableComponent;
-        // Wrap component with Touchable for handling platform touches
-        // and a single react View for detecting force and timing.
-        return (
-        /**
-         * @TODO (Jin Shin 25 June 2020)
-         * Ignoring this for now so that it builds.
-         */
-        // @ts-ignore
-        React.createElement(Touchable, { ...props, ref: this.onRef, onPress: this.onPress, onPressIn: this.onPressIn },
-            React.createElement(react_native_1.View, { onTouchStart: this.onTouchStart, onTouchMove: this.onTouchMove, onTouchEnd: this.onTouchEnd }, children)));
-    }
-}
-exports.TouchablePreview = TouchablePreview;
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.d.ts b/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.d.ts
deleted file mode 100644
index 796408b..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export declare class UniqueIdProvider {
-    generate(prefix?: string): string;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.js b/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.js
deleted file mode 100644
index a1f75a0..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/adapters/UniqueIdProvider.js
+++ /dev/null
@@ -1,11 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.UniqueIdProvider = void 0;
-const tslib_1 = require("tslib");
-const uniqueId_1 = (0, tslib_1.__importDefault)(require("lodash/uniqueId"));
-class UniqueIdProvider {
-    generate(prefix) {
-        return (0, uniqueId_1.default)(prefix);
-    }
-}
-exports.UniqueIdProvider = UniqueIdProvider;
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/Commands.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/Commands.d.ts
deleted file mode 100644
index 91706e4..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/Commands.d.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import { CommandsObserver } from '../events/CommandsObserver';
-import { NativeCommandsSender } from '../adapters/NativeCommandsSender';
-import { UniqueIdProvider } from '../adapters/UniqueIdProvider';
-import { Options } from '../interfaces/Options';
-import { Layout, LayoutRoot } from '../interfaces/Layout';
-import { LayoutTreeParser } from './LayoutTreeParser';
-import { LayoutTreeCrawler } from './LayoutTreeCrawler';
-import { OptionsProcessor } from './OptionsProcessor';
-import { Store } from '../components/Store';
-import { LayoutProcessor } from '../processors/LayoutProcessor';
-import { OptionsCrawler } from './OptionsCrawler';
-export declare class Commands {
-    private readonly store;
-    private readonly nativeCommandsSender;
-    private readonly layoutTreeParser;
-    private readonly layoutTreeCrawler;
-    private readonly commandsObserver;
-    private readonly uniqueIdProvider;
-    private readonly optionsProcessor;
-    private readonly layoutProcessor;
-    private readonly optionsCrawler;
-    constructor(store: Store, nativeCommandsSender: NativeCommandsSender, layoutTreeParser: LayoutTreeParser, layoutTreeCrawler: LayoutTreeCrawler, commandsObserver: CommandsObserver, uniqueIdProvider: UniqueIdProvider, optionsProcessor: OptionsProcessor, layoutProcessor: LayoutProcessor, optionsCrawler: OptionsCrawler);
-    setRoot(simpleApi: LayoutRoot): Promise<any>;
-    setDefaultOptions(options: Options): void;
-    mergeOptions(componentId: string, options: Options): void;
-    updateProps(componentId: string, props: object, callback?: () => void): void;
-    showModal<P>(layout: Layout<P>): Promise<any>;
-    dismissModal(componentId: string, mergeOptions?: Options): Promise<any>;
-    dismissAllModals(mergeOptions?: Options): Promise<any>;
-    push<P>(componentId: string, simpleApi: Layout<P>): Promise<any>;
-    pop(componentId: string, mergeOptions?: Options): Promise<any>;
-    popTo(componentId: string, mergeOptions?: Options): Promise<any>;
-    popToRoot(componentId: string, mergeOptions?: Options): Promise<any>;
-    setStackRoot<P>(componentId: string, children: Layout<P>[]): Promise<any>;
-    showOverlay<P>(simpleApi: Layout<P>): Promise<any>;
-    dismissOverlay(componentId: string): Promise<any>;
-    dismissAllOverlays(): Promise<any>;
-    getLaunchArgs(): Promise<any>;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/Commands.js b/node_modules/react-native-navigation/lib/dist/src/commands/Commands.js
deleted file mode 100644
index c55caf3..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/Commands.js
+++ /dev/null
@@ -1,196 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Commands = void 0;
-const tslib_1 = require("tslib");
-const cloneDeepWith_1 = (0, tslib_1.__importDefault)(require("lodash/cloneDeepWith"));
-const cloneDeep_1 = (0, tslib_1.__importDefault)(require("lodash/cloneDeep"));
-const map_1 = (0, tslib_1.__importDefault)(require("lodash/map"));
-const CommandName_1 = require("../interfaces/CommandName");
-class Commands {
-    store;
-    nativeCommandsSender;
-    layoutTreeParser;
-    layoutTreeCrawler;
-    commandsObserver;
-    uniqueIdProvider;
-    optionsProcessor;
-    layoutProcessor;
-    optionsCrawler;
-    constructor(store, nativeCommandsSender, layoutTreeParser, layoutTreeCrawler, commandsObserver, uniqueIdProvider, optionsProcessor, layoutProcessor, optionsCrawler) {
-        this.store = store;
-        this.nativeCommandsSender = nativeCommandsSender;
-        this.layoutTreeParser = layoutTreeParser;
-        this.layoutTreeCrawler = layoutTreeCrawler;
-        this.commandsObserver = commandsObserver;
-        this.uniqueIdProvider = uniqueIdProvider;
-        this.optionsProcessor = optionsProcessor;
-        this.layoutProcessor = layoutProcessor;
-        this.optionsCrawler = optionsCrawler;
-    }
-    setRoot(simpleApi) {
-        const input = cloneLayout(simpleApi);
-        this.optionsCrawler.crawl(input.root);
-        const processedRoot = this.layoutProcessor.process(input.root, CommandName_1.CommandName.SetRoot);
-        const root = this.layoutTreeParser.parse(processedRoot);
-        const modals = (0, map_1.default)(input.modals, (modal) => {
-            this.optionsCrawler.crawl(modal);
-            const processedModal = this.layoutProcessor.process(modal, CommandName_1.CommandName.SetRoot);
-            return this.layoutTreeParser.parse(processedModal);
-        });
-        const overlays = (0, map_1.default)(input.overlays, (overlay) => {
-            this.optionsCrawler.crawl(overlay);
-            const processedOverlay = this.layoutProcessor.process(overlay, CommandName_1.CommandName.SetRoot);
-            return this.layoutTreeParser.parse(processedOverlay);
-        });
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetRoot);
-        this.commandsObserver.notify(CommandName_1.CommandName.SetRoot, {
-            commandId,
-            layout: { root, modals, overlays },
-        });
-        this.layoutTreeCrawler.crawl(root, CommandName_1.CommandName.SetRoot);
-        modals.forEach((modalLayout) => {
-            this.layoutTreeCrawler.crawl(modalLayout, CommandName_1.CommandName.SetRoot);
-        });
-        overlays.forEach((overlayLayout) => {
-            this.layoutTreeCrawler.crawl(overlayLayout, CommandName_1.CommandName.SetRoot);
-        });
-        const result = this.nativeCommandsSender.setRoot(commandId, { root, modals, overlays });
-        return result;
-    }
-    setDefaultOptions(options) {
-        const input = (0, cloneDeep_1.default)(options);
-        this.optionsProcessor.processDefaultOptions(input, CommandName_1.CommandName.SetDefaultOptions);
-        this.nativeCommandsSender.setDefaultOptions(input);
-        this.commandsObserver.notify(CommandName_1.CommandName.SetDefaultOptions, { options });
-    }
-    mergeOptions(componentId, options) {
-        const input = (0, cloneDeep_1.default)(options);
-        const component = this.store.getComponentInstance(componentId);
-        const componentProps = this.store.getPropsForId(componentId) || undefined;
-        this.optionsProcessor.processOptions(CommandName_1.CommandName.MergeOptions, input, componentProps);
-        if (component && !component.isMounted)
-            console.warn(`Navigation.mergeOptions was invoked on component with id: ${componentId} before it is mounted, this can cause UI issues and should be avoided.\n Use static options instead.`);
-        this.nativeCommandsSender.mergeOptions(componentId, input);
-        this.commandsObserver.notify(CommandName_1.CommandName.MergeOptions, { componentId, options });
-    }
-    updateProps(componentId, props, callback) {
-        this.store.updateProps(componentId, props, callback);
-        this.commandsObserver.notify(CommandName_1.CommandName.UpdateProps, { componentId, props });
-    }
-    showModal(layout) {
-        const layoutCloned = cloneLayout(layout);
-        this.optionsCrawler.crawl(layoutCloned);
-        const layoutProcessed = this.layoutProcessor.process(layoutCloned, CommandName_1.CommandName.ShowModal);
-        const layoutNode = this.layoutTreeParser.parse(layoutProcessed);
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowModal);
-        this.commandsObserver.notify(CommandName_1.CommandName.ShowModal, { commandId, layout: layoutNode });
-        this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.ShowModal);
-        const result = this.nativeCommandsSender.showModal(commandId, layoutNode);
-        return result;
-    }
-    dismissModal(componentId, mergeOptions) {
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissModal);
-        this.optionsProcessor.processOptions(CommandName_1.CommandName.DismissModal, mergeOptions);
-        const result = this.nativeCommandsSender.dismissModal(commandId, componentId, mergeOptions);
-        this.commandsObserver.notify(CommandName_1.CommandName.DismissModal, {
-            commandId,
-            componentId,
-            mergeOptions,
-        });
-        return result;
-    }
-    dismissAllModals(mergeOptions) {
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllModals);
-        this.optionsProcessor.processOptions(CommandName_1.CommandName.DismissAllModals, mergeOptions);
-        const result = this.nativeCommandsSender.dismissAllModals(commandId, mergeOptions);
-        this.commandsObserver.notify(CommandName_1.CommandName.DismissAllModals, { commandId, mergeOptions });
-        return result;
-    }
-    push(componentId, simpleApi) {
-        const input = cloneLayout(simpleApi);
-        this.optionsCrawler.crawl(input);
-        const layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.Push);
-        const layout = this.layoutTreeParser.parse(layoutProcessed);
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Push);
-        this.commandsObserver.notify(CommandName_1.CommandName.Push, { commandId, componentId, layout });
-        this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.Push);
-        const result = this.nativeCommandsSender.push(commandId, componentId, layout);
-        return result;
-    }
-    pop(componentId, mergeOptions) {
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.Pop);
-        this.optionsProcessor.processOptions(CommandName_1.CommandName.Pop, mergeOptions);
-        const result = this.nativeCommandsSender.pop(commandId, componentId, mergeOptions);
-        this.commandsObserver.notify(CommandName_1.CommandName.Pop, { commandId, componentId, mergeOptions });
-        return result;
-    }
-    popTo(componentId, mergeOptions) {
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopTo);
-        this.optionsProcessor.processOptions(CommandName_1.CommandName.PopTo, mergeOptions);
-        const result = this.nativeCommandsSender.popTo(commandId, componentId, mergeOptions);
-        this.commandsObserver.notify(CommandName_1.CommandName.PopTo, { commandId, componentId, mergeOptions });
-        return result;
-    }
-    popToRoot(componentId, mergeOptions) {
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.PopToRoot);
-        this.optionsProcessor.processOptions(CommandName_1.CommandName.PopToRoot, mergeOptions);
-        const result = this.nativeCommandsSender.popToRoot(commandId, componentId, mergeOptions);
-        this.commandsObserver.notify(CommandName_1.CommandName.PopToRoot, { commandId, componentId, mergeOptions });
-        return result;
-    }
-    setStackRoot(componentId, children) {
-        const input = (0, map_1.default)(cloneLayout(children), (simpleApi) => {
-            this.optionsCrawler.crawl(simpleApi);
-            const layoutProcessed = this.layoutProcessor.process(simpleApi, CommandName_1.CommandName.SetStackRoot);
-            const layout = this.layoutTreeParser.parse(layoutProcessed);
-            return layout;
-        });
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.SetStackRoot);
-        this.commandsObserver.notify(CommandName_1.CommandName.SetStackRoot, {
-            commandId,
-            componentId,
-            layout: input,
-        });
-        input.forEach((layoutNode) => {
-            this.layoutTreeCrawler.crawl(layoutNode, CommandName_1.CommandName.SetStackRoot);
-        });
-        const result = this.nativeCommandsSender.setStackRoot(commandId, componentId, input);
-        return result;
-    }
-    showOverlay(simpleApi) {
-        const input = cloneLayout(simpleApi);
-        this.optionsCrawler.crawl(input);
-        const layoutProcessed = this.layoutProcessor.process(input, CommandName_1.CommandName.ShowOverlay);
-        const layout = this.layoutTreeParser.parse(layoutProcessed);
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.ShowOverlay);
-        this.commandsObserver.notify(CommandName_1.CommandName.ShowOverlay, { commandId, layout });
-        this.layoutTreeCrawler.crawl(layout, CommandName_1.CommandName.ShowOverlay);
-        const result = this.nativeCommandsSender.showOverlay(commandId, layout);
-        return result;
-    }
-    dismissOverlay(componentId) {
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissOverlay);
-        const result = this.nativeCommandsSender.dismissOverlay(commandId, componentId);
-        this.commandsObserver.notify(CommandName_1.CommandName.DismissOverlay, { commandId, componentId });
-        return result;
-    }
-    dismissAllOverlays() {
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.DismissAllOverlays);
-        const result = this.nativeCommandsSender.dismissAllOverlays(commandId);
-        this.commandsObserver.notify(CommandName_1.CommandName.DismissAllOverlays, { commandId });
-        return result;
-    }
-    getLaunchArgs() {
-        const commandId = this.uniqueIdProvider.generate(CommandName_1.CommandName.GetLaunchArgs);
-        const result = this.nativeCommandsSender.getLaunchArgs(commandId);
-        this.commandsObserver.notify(CommandName_1.CommandName.GetLaunchArgs, { commandId });
-        return result;
-    }
-}
-exports.Commands = Commands;
-function cloneLayout(layout) {
-    return (0, cloneDeepWith_1.default)(layout, (value, key) => {
-        if (key === 'passProps' && typeof value === 'object' && value !== null)
-            return { ...value };
-    });
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.d.ts
deleted file mode 100644
index 402caf5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.d.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-export declare class Deprecations {
-    private deprecatedOptions;
-    checkForDeprecatedOptions(options: Record<string, any>): void;
-    onProcessOptions(key: string, parentOptions: Record<string, any>, commandName: string): void;
-    onProcessDefaultOptions(_key: string, _parentOptions: Record<string, any>): void;
-    private deprecateSearchBarOptions;
-    private deprecateInterpolationOptions;
-    private deprecateBottomTabsVisibility;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.js b/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.js
deleted file mode 100644
index 8f5d617..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/Deprecations.js
+++ /dev/null
@@ -1,80 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Deprecations = void 0;
-const tslib_1 = require("tslib");
-const once_1 = (0, tslib_1.__importDefault)(require("lodash/once"));
-const get_1 = (0, tslib_1.__importDefault)(require("lodash/get"));
-const each_1 = (0, tslib_1.__importDefault)(require("lodash/each"));
-const react_native_1 = require("react-native");
-class Deprecations {
-    deprecatedOptions = [
-        {
-            key: 'topBar.searchBarHiddenWhenScrolling',
-            showWarning: (0, once_1.default)((_key, parentOptions) => {
-                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-            }),
-        },
-        {
-            key: 'topBar.searchBarPlaceholder',
-            showWarning: (0, once_1.default)((_key, parentOptions) => {
-                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-            }),
-        },
-        {
-            key: 'topBar.searchBarBackgroundColor',
-            showWarning: (0, once_1.default)((_key, parentOptions) => {
-                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-            }),
-        },
-        {
-            key: 'topBar.searchBarTintColor',
-            showWarning: (0, once_1.default)((_key, parentOptions) => {
-                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-            }),
-        },
-        {
-            key: 'topBar.hideNavBarOnFocusSearchBar',
-            showWarning: (0, once_1.default)((_key, parentOptions) => {
-                console.warn(`${_key} is deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-            }),
-        },
-    ];
-    checkForDeprecatedOptions(options) {
-        (0, each_1.default)(this.deprecatedOptions, (option) => {
-            if ((0, get_1.default)(options, option.key, null)) {
-                option.showWarning(option.key, options);
-            }
-        });
-    }
-    onProcessOptions(key, parentOptions, commandName) {
-        if (key === 'bottomTabs' &&
-            parentOptions[key]?.visible !== undefined &&
-            react_native_1.Platform.OS === 'ios' &&
-            commandName === 'mergeOptions') {
-            this.deprecateBottomTabsVisibility(parentOptions);
-        }
-        if (key === 'searchBar' && react_native_1.Platform.OS === 'ios' && typeof parentOptions[key] === 'boolean') {
-            this.deprecateSearchBarOptions(parentOptions);
-        }
-        if (key === 'interpolation' && typeof parentOptions[key] === 'string') {
-            this.deprecateInterpolationOptions(parentOptions);
-        }
-        if (key === 'showModal' || key === 'dismissModal') {
-            if (typeof parentOptions[key] === 'object' &&
-                !('enter' in parentOptions[key]) &&
-                !('exit' in parentOptions[key]))
-                console.warn(`${key} without enter/exit is deprecated, and will be changed  in the next major version. For more information see https://wix.github.io/react-native-navigation/docs/style-animations#modal-animations`, parentOptions);
-        }
-    }
-    onProcessDefaultOptions(_key, _parentOptions) { }
-    deprecateSearchBarOptions = (0, once_1.default)((parentOptions) => {
-        console.warn(`toggling searchBar visibility using a boolean value will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/issues/6585`, parentOptions);
-    });
-    deprecateInterpolationOptions = (0, once_1.default)((parentOptions) => {
-        console.warn(`Using Interpolation types as strings has been deprecated and will be removed in the next major version. For more information see https://github.com/wix/react-native-navigation/pull/6644`, parentOptions);
-    });
-    deprecateBottomTabsVisibility = (0, once_1.default)((parentOptions) => {
-        console.warn(`toggling bottomTabs visibility is deprecated on iOS. For more information see https://github.com/wix/react-native-navigation/issues/6416`, parentOptions);
-    });
-}
-exports.Deprecations = Deprecations;
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.d.ts
deleted file mode 100644
index 348bcab..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.d.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import { LayoutType } from './LayoutType';
-import { OptionsProcessor } from './OptionsProcessor';
-import { Store } from '../components/Store';
-import { CommandName } from '../interfaces/CommandName';
-export interface Data {
-    name?: string;
-    options?: any;
-    passProps?: any;
-}
-export interface LayoutNode {
-    id: string;
-    type: LayoutType;
-    data: Data;
-    children: LayoutNode[];
-}
-export declare class LayoutTreeCrawler {
-    readonly store: Store;
-    private readonly optionsProcessor;
-    constructor(store: Store, optionsProcessor: OptionsProcessor);
-    crawl(node: LayoutNode, commandName: CommandName): void;
-    private handleComponent;
-    private savePropsToStore;
-    private assertComponentDataName;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.js b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.js
deleted file mode 100644
index 9d19113..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeCrawler.js
+++ /dev/null
@@ -1,35 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.LayoutTreeCrawler = void 0;
-const LayoutType_1 = require("./LayoutType");
-class LayoutTreeCrawler {
-    store;
-    optionsProcessor;
-    constructor(store, optionsProcessor) {
-        this.store = store;
-        this.optionsProcessor = optionsProcessor;
-        this.crawl = this.crawl.bind(this);
-    }
-    crawl(node, commandName) {
-        if (node.type === LayoutType_1.LayoutType.Component) {
-            this.handleComponent(node);
-        }
-        const componentProps = this.store.getPropsForId(node.id) || undefined;
-        this.optionsProcessor.processOptions(commandName, node.data.options, componentProps);
-        node.children.forEach((value) => this.crawl(value, commandName));
-    }
-    handleComponent(node) {
-        this.assertComponentDataName(node);
-        this.savePropsToStore(node);
-        node.data.passProps = undefined;
-    }
-    savePropsToStore(node) {
-        this.store.setPendingProps(node.id, node.data.passProps);
-    }
-    assertComponentDataName(component) {
-        if (!component.data.name) {
-            throw new Error('Missing component data.name');
-        }
-    }
-}
-exports.LayoutTreeCrawler = LayoutTreeCrawler;
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.d.ts
deleted file mode 100644
index fec4928..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.d.ts
+++ /dev/null
@@ -1,16 +0,0 @@
-import { LayoutNode } from './LayoutTreeCrawler';
-import { Layout } from '../interfaces/Layout';
-import { UniqueIdProvider } from '../adapters/UniqueIdProvider';
-export declare class LayoutTreeParser {
-    private uniqueIdProvider;
-    constructor(uniqueIdProvider: UniqueIdProvider);
-    parse(api: Layout): LayoutNode;
-    private topTabs;
-    private sideMenu;
-    private sideMenuChildren;
-    private bottomTabs;
-    private stack;
-    private component;
-    private externalComponent;
-    private splitView;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.js b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.js
deleted file mode 100644
index ed11128..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutTreeParser.js
+++ /dev/null
@@ -1,128 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.LayoutTreeParser = void 0;
-const LayoutType_1 = require("./LayoutType");
-class LayoutTreeParser {
-    uniqueIdProvider;
-    constructor(uniqueIdProvider) {
-        this.uniqueIdProvider = uniqueIdProvider;
-        this.parse = this.parse.bind(this);
-    }
-    parse(api) {
-        if (api.topTabs) {
-            return this.topTabs(api.topTabs);
-        }
-        else if (api.sideMenu) {
-            return this.sideMenu(api.sideMenu);
-        }
-        else if (api.bottomTabs) {
-            return this.bottomTabs(api.bottomTabs);
-        }
-        else if (api.stack) {
-            return this.stack(api.stack);
-        }
-        else if (api.component) {
-            return this.component(api.component);
-        }
-        else if (api.externalComponent) {
-            return this.externalComponent(api.externalComponent);
-        }
-        else if (api.splitView) {
-            return this.splitView(api.splitView);
-        }
-        throw new Error(`unknown LayoutType "${Object.keys(api)}"`);
-    }
-    topTabs(api) {
-        return {
-            id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.TopTabs),
-            type: LayoutType_1.LayoutType.TopTabs,
-            data: { options: api.options },
-            children: api.children ? api.children.map(this.parse) : [],
-        };
-    }
-    sideMenu(api) {
-        return {
-            id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SideMenuRoot),
-            type: LayoutType_1.LayoutType.SideMenuRoot,
-            data: { options: api.options },
-            children: this.sideMenuChildren(api),
-        };
-    }
-    sideMenuChildren(api) {
-        const children = [];
-        if (api.left) {
-            children.push({
-                id: this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SideMenuLeft),
-                type: LayoutType_1.LayoutType.SideMenuLeft,
-                data: {},
-                children: [this.parse(api.left)],
-            });
-        }
-        children.push({
-            id: this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SideMenuCenter),
-            type: LayoutType_1.LayoutType.SideMenuCenter,
-            data: {},
-            children: [this.parse(api.center)],
-        });
-        if (api.right) {
-            children.push({
-                id: this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SideMenuRight),
-                type: LayoutType_1.LayoutType.SideMenuRight,
-                data: {},
-                children: [this.parse(api.right)],
-            });
-        }
-        return children;
-    }
-    bottomTabs(api) {
-        return {
-            id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.BottomTabs),
-            type: LayoutType_1.LayoutType.BottomTabs,
-            data: { options: api.options },
-            children: api.children ? api.children.map(this.parse) : [],
-        };
-    }
-    stack(api) {
-        return {
-            id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.Stack),
-            type: LayoutType_1.LayoutType.Stack,
-            data: { options: api.options },
-            children: api.children ? api.children.map(this.parse) : [],
-        };
-    }
-    component(api) {
-        return {
-            id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.Component),
-            type: LayoutType_1.LayoutType.Component,
-            data: {
-                name: api.name.toString(),
-                options: api.options,
-                passProps: api.passProps,
-            },
-            children: [],
-        };
-    }
-    externalComponent(api) {
-        return {
-            id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.ExternalComponent),
-            type: LayoutType_1.LayoutType.ExternalComponent,
-            data: {
-                name: api.name.toString(),
-                options: api.options,
-                passProps: api.passProps,
-            },
-            children: [],
-        };
-    }
-    splitView(api) {
-        const master = api.master ? this.parse(api.master) : undefined;
-        const detail = api.detail ? this.parse(api.detail) : undefined;
-        return {
-            id: api.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.SplitView),
-            type: LayoutType_1.LayoutType.SplitView,
-            data: { options: api.options },
-            children: master && detail ? [master, detail] : [],
-        };
-    }
-}
-exports.LayoutTreeParser = LayoutTreeParser;
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.d.ts
deleted file mode 100644
index 448ae96..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.d.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-export declare enum LayoutType {
-    Component = "Component",
-    Stack = "Stack",
-    BottomTabs = "BottomTabs",
-    SideMenuRoot = "SideMenuRoot",
-    SideMenuCenter = "SideMenuCenter",
-    SideMenuLeft = "SideMenuLeft",
-    SideMenuRight = "SideMenuRight",
-    TopTabs = "TopTabs",
-    ExternalComponent = "ExternalComponent",
-    SplitView = "SplitView"
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.js b/node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.js
deleted file mode 100644
index 3fe1a99..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/LayoutType.js
+++ /dev/null
@@ -1,16 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.LayoutType = void 0;
-var LayoutType;
-(function (LayoutType) {
-    LayoutType["Component"] = "Component";
-    LayoutType["Stack"] = "Stack";
-    LayoutType["BottomTabs"] = "BottomTabs";
-    LayoutType["SideMenuRoot"] = "SideMenuRoot";
-    LayoutType["SideMenuCenter"] = "SideMenuCenter";
-    LayoutType["SideMenuLeft"] = "SideMenuLeft";
-    LayoutType["SideMenuRight"] = "SideMenuRight";
-    LayoutType["TopTabs"] = "TopTabs";
-    LayoutType["ExternalComponent"] = "ExternalComponent";
-    LayoutType["SplitView"] = "SplitView";
-})(LayoutType = exports.LayoutType || (exports.LayoutType = {}));
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.d.ts
deleted file mode 100644
index 7cc5e24..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.d.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { Store } from '../components/Store';
-import { Layout } from '../interfaces/Layout';
-import { UniqueIdProvider } from 'react-native-navigation/adapters/UniqueIdProvider';
-export declare class OptionsCrawler {
-    readonly store: Store;
-    readonly uniqueIdProvider: UniqueIdProvider;
-    constructor(store: Store, uniqueIdProvider: UniqueIdProvider);
-    crawl(api?: Layout<any>): void;
-    private topTabs;
-    private sideMenu;
-    private bottomTabs;
-    private stack;
-    private splitView;
-    private component;
-    private applyComponentId;
-    private isComponentWithOptions;
-    private applyStaticOptions;
-    private staticOptionsIfPossible;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.js b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.js
deleted file mode 100644
index b5cc127..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/OptionsCrawler.js
+++ /dev/null
@@ -1,81 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.OptionsCrawler = void 0;
-const tslib_1 = require("tslib");
-const merge_1 = (0, tslib_1.__importDefault)(require("lodash/merge"));
-const isFunction_1 = (0, tslib_1.__importDefault)(require("lodash/isFunction"));
-const LayoutType_1 = require("./LayoutType");
-class OptionsCrawler {
-    store;
-    uniqueIdProvider;
-    constructor(store, uniqueIdProvider) {
-        this.store = store;
-        this.uniqueIdProvider = uniqueIdProvider;
-        this.crawl = this.crawl.bind(this);
-    }
-    crawl(api) {
-        if (!api)
-            return;
-        if (api.topTabs) {
-            this.topTabs(api.topTabs);
-        }
-        else if (api.sideMenu) {
-            return this.sideMenu(api.sideMenu);
-        }
-        else if (api.bottomTabs) {
-            return this.bottomTabs(api.bottomTabs);
-        }
-        else if (api.stack) {
-            return this.stack(api.stack);
-        }
-        else if (api.component) {
-            return this.component(api.component);
-        }
-        else if (api.splitView) {
-            return this.splitView(api.splitView);
-        }
-    }
-    topTabs(api) {
-        api.children?.map(this.crawl);
-    }
-    sideMenu(sideMenu) {
-        this.crawl(sideMenu.center);
-        this.crawl(sideMenu.left);
-        this.crawl(sideMenu.right);
-    }
-    bottomTabs(bottomTabs) {
-        bottomTabs.children?.map(this.crawl);
-    }
-    stack(stack) {
-        stack.children?.map(this.crawl);
-    }
-    splitView(splitView) {
-        splitView.detail && this.crawl(splitView.detail);
-        splitView.master && this.crawl(splitView.master);
-    }
-    component(component) {
-        this.applyComponentId(component);
-        this.applyStaticOptions(component);
-    }
-    applyComponentId(component) {
-        component.id = component.id || this.uniqueIdProvider.generate(LayoutType_1.LayoutType.Component);
-    }
-    isComponentWithOptions(component) {
-        return component.options !== undefined;
-    }
-    applyStaticOptions(layout) {
-        const staticOptions = this.staticOptionsIfPossible(layout);
-        layout.options = (0, merge_1.default)({}, staticOptions, layout.options);
-    }
-    staticOptionsIfPossible(layout) {
-        const foundReactGenerator = this.store.getComponentClassForName(layout.name);
-        const reactComponent = foundReactGenerator ? foundReactGenerator() : undefined;
-        if (reactComponent && this.isComponentWithOptions(reactComponent)) {
-            return (0, isFunction_1.default)(reactComponent.options)
-                ? reactComponent.options({ componentId: layout.id, ...layout.passProps } || {})
-                : reactComponent.options;
-        }
-        return {};
-    }
-}
-exports.OptionsCrawler = OptionsCrawler;
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.d.ts b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.d.ts
deleted file mode 100644
index bac82ee..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.d.ts
+++ /dev/null
@@ -1,39 +0,0 @@
-import { Store } from '../components/Store';
-import { UniqueIdProvider } from '../adapters/UniqueIdProvider';
-import { ColorService } from '../adapters/ColorService';
-import { AssetService } from '../adapters/AssetResolver';
-import { Options } from '../interfaces/Options';
-import { Deprecations } from './Deprecations';
-import { OptionProcessorsStore } from '../processors/OptionProcessorsStore';
-import { CommandName } from '../interfaces/CommandName';
-export declare class OptionsProcessor {
-    private store;
-    private uniqueIdProvider;
-    private optionProcessorsRegistry;
-    private colorService;
-    private assetService;
-    private deprecations;
-    constructor(store: Store, uniqueIdProvider: UniqueIdProvider, optionProcessorsRegistry: OptionProcessorsStore, colorService: ColorService, assetService: AssetService, deprecations: Deprecations);
-    processOptions(commandName: CommandName, options?: Options, props?: any): void;
-    processDefaultOptions(options: Options, commandName: CommandName): void;
-    private processObject;
-    private resolveObjectPath;
-    private processColor;
-    private processColorIOS;
-    private processColorAndroid;
-    private processWithRegisteredProcessor;
-    private processImage;
-    private processButtonsPassProps;
-    private processComponent;
-    private processSearchBar;
-    private processInterpolation;
-    private processAnimation;
-    private processSetStackRoot;
-    private isNewStackAnimationApi;
-    private convertDeprecatedViewAnimationApiToNewStackAnimationApi;
-    private processPop;
-    private processSetRootAnimation;
-    private processShowModal;
-    private processDismissModal;
-    private processPush;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.js b/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.js
deleted file mode 100644
index 1360628..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/commands/OptionsProcessor.js
+++ /dev/null
@@ -1,325 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.OptionsProcessor = void 0;
-const tslib_1 = require("tslib");
-const clone_1 = (0, tslib_1.__importDefault)(require("lodash/clone"));
-const isEqual_1 = (0, tslib_1.__importDefault)(require("lodash/isEqual"));
-const isObject_1 = (0, tslib_1.__importDefault)(require("lodash/isObject"));
-const isArray_1 = (0, tslib_1.__importDefault)(require("lodash/isArray"));
-const isString_1 = (0, tslib_1.__importDefault)(require("lodash/isString"));
-const endsWith_1 = (0, tslib_1.__importDefault)(require("lodash/endsWith"));
-const forEach_1 = (0, tslib_1.__importDefault)(require("lodash/forEach"));
-const has_1 = (0, tslib_1.__importDefault)(require("lodash/has"));
-const react_native_1 = require("react-native");
-class OptionsProcessor {
-    store;
-    uniqueIdProvider;
-    optionProcessorsRegistry;
-    colorService;
-    assetService;
-    deprecations;
-    constructor(store, uniqueIdProvider, optionProcessorsRegistry, colorService, assetService, deprecations) {
-        this.store = store;
-        this.uniqueIdProvider = uniqueIdProvider;
-        this.optionProcessorsRegistry = optionProcessorsRegistry;
-        this.colorService = colorService;
-        this.assetService = assetService;
-        this.deprecations = deprecations;
-    }
-    processOptions(commandName, options, props) {
-        if (options) {
-            this.processObject(options, (0, clone_1.default)(options), (key, parentOptions) => {
-                this.deprecations.onProcessOptions(key, parentOptions, commandName);
-                this.deprecations.checkForDeprecatedOptions(parentOptions);
-            }, commandName, props);
-        }
-    }
-    processDefaultOptions(options, commandName) {
-        this.processObject(options, (0, clone_1.default)(options), (key, parentOptions) => {
-            this.deprecations.onProcessDefaultOptions(key, parentOptions);
-        }, commandName);
-    }
-    processObject(objectToProcess, parentOptions, onProcess, commandName, props, parentPath) {
-        (0, forEach_1.default)(objectToProcess, (value, key) => {
-            const objectPath = this.resolveObjectPath(key, parentPath);
-            this.processWithRegisteredProcessor(key, value, objectToProcess, objectPath, commandName, props);
-            this.processColor(key, value, objectToProcess);
-            if (!value) {
-                return;
-            }
-            this.processComponent(key, value, objectToProcess);
-            this.processImage(key, value, objectToProcess);
-            this.processButtonsPassProps(key, value);
-            this.processSearchBar(key, value, objectToProcess);
-            this.processInterpolation(key, value, objectToProcess);
-            this.processAnimation(key, value, objectToProcess);
-            onProcess(key, parentOptions);
-            const processedValue = objectToProcess[key];
-            if (!(0, isEqual_1.default)(key, 'passProps') && ((0, isObject_1.default)(processedValue) || (0, isArray_1.default)(processedValue))) {
-                this.processObject(processedValue, parentOptions, onProcess, commandName, props, objectPath);
-            }
-        });
-    }
-    resolveObjectPath(key, path) {
-        if (!path)
-            path = key;
-        else
-            path += `.${key}`;
-        return path;
-    }
-    processColor(key, value, options) {
-        if ((0, isEqual_1.default)(key, 'color') || (0, endsWith_1.default)(key, 'Color')) {
-            if (react_native_1.Platform.OS === 'ios')
-                this.processColorIOS(key, value, options);
-            else
-                this.processColorAndroid(key, value, options);
-        }
-    }
-    processColorIOS(key, value, options) {
-        if (value !== undefined) {
-            if (value === null) {
-                options[key] = 'NoColor';
-            }
-            else if (value instanceof Object) {
-                if ('semantic' in value) {
-                    options[key] = value;
-                }
-                else if ('dynamic' in value) {
-                    options[key] = (0, react_native_1.DynamicColorIOS)({
-                        light: this.colorService.toNativeColor(value.dynamic.light),
-                        dark: this.colorService.toNativeColor(value.dynamic.dark),
-                    });
-                }
-                else {
-                    options[key] = (0, react_native_1.DynamicColorIOS)({
-                        light: this.colorService.toNativeColor(value.light),
-                        dark: this.colorService.toNativeColor(value.dark),
-                    });
-                }
-            }
-            else {
-                options[key] = this.colorService.toNativeColor(value);
-            }
-        }
-    }
-    processColorAndroid(key, value, options) {
-        if (value !== undefined) {
-            const newColorObj = { dark: 'NoColor', light: 'NoColor' };
-            if (value === null) {
-                options[key] = newColorObj;
-            }
-            else if (value instanceof Object) {
-                if ('semantic' in value || 'resource_paths' in value) {
-                    options[key] = value;
-                    return;
-                }
-                else {
-                    for (let keyColor in value) {
-                        newColorObj[keyColor] = this.colorService.toNativeColor(value[keyColor]);
-                    }
-                    options[key] = newColorObj;
-                }
-            }
-            else {
-                let parsedColor = this.colorService.toNativeColor(value);
-                newColorObj.light = parsedColor;
-                newColorObj.dark = parsedColor;
-                options[key] = newColorObj;
-            }
-        }
-    }
-    processWithRegisteredProcessor(key, value, options, path, commandName, passProps) {
-        const registeredProcessors = this.optionProcessorsRegistry.getProcessors(path);
-        if (registeredProcessors) {
-            registeredProcessors.forEach((processor) => {
-                options[key] = processor(value, commandName, passProps);
-            });
-        }
-    }
-    processImage(key, value, options) {
-        if ((0, isEqual_1.default)(key, 'icon') ||
-            (0, isEqual_1.default)(key, 'image') ||
-            (0, endsWith_1.default)(key, 'Icon') ||
-            (0, endsWith_1.default)(key, 'Image')) {
-            options[key] = (0, isString_1.default)(value) ? value : this.assetService.resolveFromRequire(value);
-        }
-    }
-    processButtonsPassProps(key, value) {
-        if ((0, endsWith_1.default)(key, 'Buttons')) {
-            (0, forEach_1.default)(value, (button) => {
-                if (button.passProps && button.id) {
-                    this.store.setPendingProps(button.id, button.passProps);
-                    button.passProps = undefined;
-                }
-            });
-        }
-    }
-    processComponent(key, value, options) {
-        if ((0, isEqual_1.default)(key, 'component')) {
-            value.componentId = value.id ? value.id : this.uniqueIdProvider.generate('CustomComponent');
-            this.store.ensureClassForName(value.name);
-            if (value.passProps) {
-                this.store.setPendingProps(value.componentId, value.passProps);
-            }
-            options[key].passProps = undefined;
-        }
-    }
-    processSearchBar(key, value, options) {
-        if (key !== 'searchBar') {
-            return;
-        }
-        const deprecatedSearchBarOptions = {
-            visible: false,
-            hideOnScroll: options.searchBarHiddenWhenScrolling ?? false,
-            hideTopBarOnFocus: options.hideNavBarOnFocusSearchBar ?? false,
-            obscuresBackgroundDuringPresentation: false,
-            backgroundColor: options.searchBarBackgroundColor,
-            tintColor: options.searchBarTintColor,
-            placeholder: options.searchBarPlaceholder ?? '',
-        };
-        if (typeof value === 'boolean') {
-            // Deprecated
-            this.deprecations.onProcessOptions(key, options, '');
-            options[key] = {
-                ...deprecatedSearchBarOptions,
-                visible: value,
-            };
-        }
-        else {
-            options[key] = {
-                ...deprecatedSearchBarOptions,
-                ...value,
-            };
-        }
-    }
-    processInterpolation(key, value, options) {
-        if ((0, isEqual_1.default)(key, 'interpolation')) {
-            if (typeof value === 'string') {
-                this.deprecations.onProcessOptions(key, options, '');
-                options[key] = {
-                    type: options[key],
-                };
-            }
-        }
-    }
-    processAnimation(key, value, options) {
-        this.processSetRootAnimation(key, value, options);
-        this.processPush(key, value, options);
-        this.processPop(key, value, options);
-        this.processSetStackRoot(key, value, options);
-        this.processShowModal(key, value, options);
-        this.processDismissModal(key, value, options);
-    }
-    processSetStackRoot(key, animation, parentOptions) {
-        if (key !== 'setStackRoot')
-            return;
-        if (this.isNewStackAnimationApi(animation))
-            return;
-        this.convertDeprecatedViewAnimationApiToNewStackAnimationApi(animation, parentOptions);
-    }
-    isNewStackAnimationApi(animation) {
-        return (0, has_1.default)(animation, 'content') || (0, has_1.default)(animation, 'topBar') || (0, has_1.default)(animation, 'bottomTabs');
-    }
-    convertDeprecatedViewAnimationApiToNewStackAnimationApi(animation, parentOptions) {
-        if (!(0, has_1.default)(animation, 'content.enter') && !(0, has_1.default)(animation, 'content.exit')) {
-            parentOptions.setStackRoot = {
-                content: {
-                    enter: animation,
-                },
-            };
-            if ((0, has_1.default)(animation, 'enabled')) {
-                parentOptions.setStackRoot.enabled = animation.enabled;
-            }
-            if ((0, has_1.default)(animation, 'waitForRender')) {
-                parentOptions.setStackRoot.waitForRender = animation.waitForRender;
-            }
-        }
-    }
-    processPop(key, animation, parentOptions) {
-        if (key !== 'pop')
-            return;
-        if (animation.content && !(0, has_1.default)(animation, 'content.enter') && !(0, has_1.default)(animation, 'content.exit')) {
-            parentOptions.pop.content = {
-                exit: animation.content,
-            };
-        }
-        if (animation.topBar && !(0, has_1.default)(animation, 'topBar.enter') && !(0, has_1.default)(animation, 'topBar.exit')) {
-            parentOptions.pop.topBar = {
-                exit: animation.topBar,
-            };
-        }
-        if (animation.bottomTabs &&
-            !(0, has_1.default)(animation, 'bottomTabs.enter') &&
-            !(0, has_1.default)(animation, 'bottomTabs.exit')) {
-            parentOptions.pop.bottomTabs = {
-                exit: animation.bottomTabs,
-            };
-        }
-    }
-    processSetRootAnimation(key, animation, parentOptions) {
-        if (key !== 'setRoot')
-            return;
-        if (react_native_1.Platform.OS === 'android' && !('enter' in animation)) {
-            parentOptions.setRoot = {
-                enter: animation,
-            };
-        }
-        else if (react_native_1.Platform.OS === 'ios' && 'enter' in animation) {
-            parentOptions.setRoot = animation;
-        }
-    }
-    processShowModal(key, animation, parentOptions) {
-        if (key !== 'showModal')
-            return;
-        if (!('enter' in animation)) {
-            const elementTransitions = animation.elementTransitions;
-            const sharedElementTransitions = animation.sharedElementTransitions;
-            const enter = { ...animation };
-            delete enter.sharedElementTransitions;
-            delete enter.elementTransitions;
-            parentOptions.showModal = {
-                enter,
-                sharedElementTransitions,
-                elementTransitions,
-            };
-        }
-    }
-    processDismissModal(key, animation, parentOptions) {
-        if (key !== 'dismissModal')
-            return;
-        if (!('exit' in animation)) {
-            const elementTransitions = animation.elementTransitions;
-            const sharedElementTransitions = animation.sharedElementTransitions;
-            const exit = { ...animation };
-            delete exit.sharedElementTransitions;
-            delete exit.elementTransitions;
-            parentOptions.dismissModal = {
-                exit,
-                sharedElementTransitions,
-                elementTransitions,
-            };
-        }
-    }
-    processPush(key, animation, parentOptions) {
-        if (key !== 'push')
-            return;
-        if (animation.content && !(0, has_1.default)(animation, 'content.enter') && !(0, has_1.default)(animation, 'content.exit')) {
-            parentOptions.push.content = {
-                enter: animation.content,
-            };
-        }
-        if (animation.topBar && !(0, has_1.default)(animation, 'topBar.enter') && !(0, has_1.default)(animation, 'topBar.exit')) {
-            parentOptions.push.topBar = {
-                enter: animation.topBar,
-            };
-        }
-        if (animation.bottomTabs &&
-            !(0, has_1.default)(animation, 'bottomTabs.enter') &&
-            !(0, has_1.default)(animation, 'bottomTabs.exit')) {
-            parentOptions.push.bottomTabs = {
-                enter: animation.bottomTabs,
-            };
-        }
-    }
-}
-exports.OptionsProcessor = OptionsProcessor;
diff --git a/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.d.ts b/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.d.ts
deleted file mode 100644
index 6918995..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.d.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { ComponentProvider } from 'react-native';
-import { Store } from './Store';
-import { ComponentEventsObserver } from '../events/ComponentEventsObserver';
-import { ComponentWrapper } from './ComponentWrapper';
-import { AppRegistryService } from '../adapters/AppRegistryService';
-export declare class ComponentRegistry {
-    private store;
-    private componentEventsObserver;
-    private componentWrapper;
-    private appRegistryService;
-    constructor(store: Store, componentEventsObserver: ComponentEventsObserver, componentWrapper: ComponentWrapper, appRegistryService: AppRegistryService);
-    registerComponent(componentName: string | number, componentProvider: ComponentProvider, concreteComponentProvider?: ComponentProvider, ReduxProvider?: any, reduxStore?: any): ComponentProvider;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.js b/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.js
deleted file mode 100644
index ea508b0..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/components/ComponentRegistry.js
+++ /dev/null
@@ -1,31 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ComponentRegistry = void 0;
-class ComponentRegistry {
-    store;
-    componentEventsObserver;
-    componentWrapper;
-    appRegistryService;
-    constructor(store, componentEventsObserver, componentWrapper, appRegistryService) {
-        this.store = store;
-        this.componentEventsObserver = componentEventsObserver;
-        this.componentWrapper = componentWrapper;
-        this.appRegistryService = appRegistryService;
-    }
-    registerComponent(componentName, componentProvider, concreteComponentProvider, ReduxProvider, reduxStore) {
-        const NavigationComponent = () => {
-            if (this.store.hasRegisteredWrappedComponent(componentName)) {
-                return this.store.getWrappedComponent(componentName);
-            }
-            else {
-                const wrappedComponent = this.componentWrapper.wrap(componentName.toString(), componentProvider, this.store, this.componentEventsObserver, concreteComponentProvider, ReduxProvider, reduxStore);
-                this.store.setWrappedComponent(componentName, wrappedComponent);
-                return wrappedComponent;
-            }
-        };
-        this.store.setComponentClassForName(componentName.toString(), NavigationComponent);
-        this.appRegistryService.registerComponent(componentName.toString(), NavigationComponent);
-        return NavigationComponent;
-    }
-}
-exports.ComponentRegistry = ComponentRegistry;
diff --git a/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.d.ts b/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.d.ts
deleted file mode 100644
index c27b733..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.d.ts
+++ /dev/null
@@ -1,12 +0,0 @@
-import * as React from 'react';
-import { ComponentProvider } from 'react-native';
-import { Store } from './Store';
-import { ComponentEventsObserver } from '../events/ComponentEventsObserver';
-export interface IWrappedComponent extends React.Component {
-    setProps(newProps: Record<string, any>, callback?: () => void): void;
-    isMounted: boolean;
-}
-export declare class ComponentWrapper {
-    wrap(componentName: string | number, OriginalComponentGenerator: ComponentProvider, store: Store, componentEventsObserver: ComponentEventsObserver, concreteComponentProvider?: ComponentProvider, ReduxProvider?: any, reduxStore?: any): React.ComponentClass<any>;
-    wrapWithRedux(WrappedComponent: React.ComponentClass<any>, ReduxProvider: any, reduxStore: any): React.ComponentClass<any>;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.js b/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.js
deleted file mode 100644
index a0c6503..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/components/ComponentWrapper.js
+++ /dev/null
@@ -1,77 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ComponentWrapper = void 0;
-const tslib_1 = require("tslib");
-const React = (0, tslib_1.__importStar)(require("react"));
-const react_lifecycles_compat_1 = require("react-lifecycles-compat");
-const hoist_non_react_statics_1 = (0, tslib_1.__importDefault)(require("hoist-non-react-statics"));
-class ComponentWrapper {
-    wrap(componentName, OriginalComponentGenerator, store, componentEventsObserver, concreteComponentProvider = OriginalComponentGenerator, ReduxProvider, reduxStore) {
-        const GeneratedComponentClass = OriginalComponentGenerator();
-        class WrappedComponent extends React.Component {
-            static getDerivedStateFromProps(nextProps, prevState) {
-                return {
-                    allProps: {
-                        ...nextProps,
-                        ...store.getPropsForId(prevState.componentId),
-                    },
-                };
-            }
-            _isMounted = false;
-            get isMounted() {
-                return this._isMounted;
-            }
-            constructor(props) {
-                super(props);
-                this._assertComponentId();
-                this.state = {
-                    componentId: props.componentId,
-                    allProps: {},
-                };
-                store.setComponentInstance(props.componentId, this);
-            }
-            setProps(newProps, callback) {
-                this.setState((prevState) => ({
-                    allProps: {
-                        ...prevState.allProps,
-                        ...newProps,
-                    },
-                }), callback);
-            }
-            componentDidMount() {
-                this._isMounted = true;
-                store.consumePendingProps(this.state.componentId);
-            }
-            componentWillUnmount() {
-                store.clearComponent(this.state.componentId);
-                componentEventsObserver.unmounted(this.state.componentId);
-            }
-            render() {
-                return (React.createElement(GeneratedComponentClass, { ...this.state.allProps, componentId: this.state.componentId, componentName: componentName }));
-            }
-            _assertComponentId() {
-                if (!this.props.componentId) {
-                    throw new Error(`Component ${componentName} does not have a componentId!`);
-                }
-            }
-        }
-        (0, react_lifecycles_compat_1.polyfill)(WrappedComponent);
-        (0, hoist_non_react_statics_1.default)(WrappedComponent, concreteComponentProvider === OriginalComponentGenerator
-            ? GeneratedComponentClass
-            : concreteComponentProvider());
-        return ReduxProvider
-            ? this.wrapWithRedux(WrappedComponent, ReduxProvider, reduxStore)
-            : WrappedComponent;
-    }
-    wrapWithRedux(WrappedComponent, ReduxProvider, reduxStore) {
-        class ReduxWrapper extends React.Component {
-            render() {
-                return (React.createElement(ReduxProvider, { store: reduxStore },
-                    React.createElement(WrappedComponent, { ...this.props })));
-            }
-        }
-        (0, hoist_non_react_statics_1.default)(ReduxWrapper, WrappedComponent);
-        return ReduxWrapper;
-    }
-}
-exports.ComponentWrapper = ComponentWrapper;
diff --git a/node_modules/react-native-navigation/lib/dist/src/components/Modal.d.ts b/node_modules/react-native-navigation/lib/dist/src/components/Modal.d.ts
deleted file mode 100644
index 7f68c9d..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/components/Modal.d.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-import React from 'react';
-import { ViewProps } from 'react-native';
-export interface RNNModalProps extends ViewProps {
-    visible: boolean;
-    transparent: boolean;
-    blurOnUnmount: boolean;
-    animationType: 'none' | 'fade' | 'slide';
-    onShow?: () => any;
-    onRequestClose: () => any;
-}
-export declare class Modal extends React.Component<RNNModalProps> {
-    static defaultProps: {
-        transparent: boolean;
-        blurOnUnmount: boolean;
-        animationType: string;
-    };
-    constructor(props: RNNModalProps);
-    render(): JSX.Element | null;
-    private proccessProps;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/components/Modal.js b/node_modules/react-native-navigation/lib/dist/src/components/Modal.js
deleted file mode 100644
index 7296bfd..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/components/Modal.js
+++ /dev/null
@@ -1,92 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Modal = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importDefault)(require("react"));
-const react_native_1 = require("react-native");
-const RNNModalViewManager = (0, react_native_1.requireNativeComponent)('RNNModalViewManager');
-class Modal extends react_1.default.Component {
-    static defaultProps = {
-        transparent: false,
-        blurOnUnmount: false,
-        animationType: 'slide',
-    };
-    constructor(props) {
-        super(props);
-    }
-    render() {
-        const processed = this.proccessProps();
-        if (this.props.visible) {
-            return (react_1.default.createElement(RNNModalViewManager, { ...processed },
-                react_1.default.createElement(react_native_1.View, { style: styles.container, collapsable: false }, this.props.children)));
-        }
-        else {
-            return null;
-        }
-    }
-    proccessProps() {
-        const processed = { ...this.props, style: styles.modal };
-        if (this.props.animationType === 'none') {
-            processed.animation = {
-                showModal: { enabled: false },
-                dismissModal: { enabled: false },
-            };
-        }
-        else {
-            const isSlide = this.props.animationType === 'slide';
-            processed.animation = {
-                showModal: {
-                    enter: isSlide ? showModalSlideEnterAnimations : showModalFadeEnterAnimations,
-                },
-                dismissModal: {
-                    exit: isSlide ? dismissModalSlideExitAnimations : dismissModalFadeExitAnimations,
-                },
-            };
-        }
-        return processed;
-    }
-}
-exports.Modal = Modal;
-const height = Math.round(react_native_1.Dimensions.get('window').height);
-const SCREEN_ANIMATION_DURATION = 500;
-const showModalSlideEnterAnimations = {
-    translationY: {
-        from: height,
-        to: 0,
-        duration: SCREEN_ANIMATION_DURATION,
-        interpolation: { type: 'decelerate' },
-    },
-};
-const dismissModalSlideExitAnimations = {
-    translationY: {
-        from: 0,
-        to: height,
-        duration: SCREEN_ANIMATION_DURATION,
-        interpolation: { type: 'decelerate' },
-    },
-};
-const showModalFadeEnterAnimations = {
-    alpha: {
-        from: 0,
-        to: 1,
-        duration: SCREEN_ANIMATION_DURATION,
-        interpolation: { type: 'decelerate' },
-    },
-};
-const dismissModalFadeExitAnimations = {
-    alpha: {
-        from: 1,
-        to: 0,
-        duration: SCREEN_ANIMATION_DURATION,
-        interpolation: { type: 'decelerate' },
-    },
-};
-const styles = react_native_1.StyleSheet.create({
-    modal: {
-        position: 'absolute',
-    },
-    container: {
-        top: 0,
-        flex: 1,
-    },
-});
diff --git a/node_modules/react-native-navigation/lib/dist/src/components/Store.d.ts b/node_modules/react-native-navigation/lib/dist/src/components/Store.d.ts
deleted file mode 100644
index b6f67bc..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/components/Store.d.ts
+++ /dev/null
@@ -1,26 +0,0 @@
-import * as React from 'react';
-import { ComponentProvider } from 'react-native';
-import { IWrappedComponent } from './ComponentWrapper';
-export declare class Store {
-    private componentsByName;
-    private propsById;
-    private pendingPropsById;
-    private componentsInstancesById;
-    private wrappedComponents;
-    private lazyRegistratorFn;
-    updateProps(componentId: string, props: any, callback?: () => void): void;
-    setPendingProps(componentId: string, newProps: any): void;
-    getPropsForId(componentId: string): any;
-    consumePendingProps(componentId: string): void;
-    mergeNewPropsForId(componentId: string, newProps: any): void;
-    clearComponent(componentId: string): void;
-    setComponentClassForName(componentName: string | number, ComponentClass: ComponentProvider): void;
-    getComponentClassForName(componentName: string | number): ComponentProvider | undefined;
-    ensureClassForName(componentName: string | number): void;
-    setComponentInstance(id: string, component: IWrappedComponent): void;
-    getComponentInstance(id: string): IWrappedComponent | undefined;
-    setWrappedComponent(componentName: string | number, wrappedComponent: React.ComponentClass<any>): void;
-    hasRegisteredWrappedComponent(componentName: string | number): boolean;
-    getWrappedComponent(componentName: string | number): React.ComponentClass<any>;
-    setLazyComponentRegistrator(lazyRegistratorFn: (lazyComponentRequest: string | number) => void): void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/components/Store.js b/node_modules/react-native-navigation/lib/dist/src/components/Store.js
deleted file mode 100644
index a8b9fff..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/components/Store.js
+++ /dev/null
@@ -1,73 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Store = void 0;
-class Store {
-    componentsByName = {};
-    propsById = {};
-    pendingPropsById = {};
-    componentsInstancesById = {};
-    wrappedComponents = {};
-    lazyRegistratorFn;
-    updateProps(componentId, props, callback) {
-        this.mergeNewPropsForId(componentId, props);
-        const component = this.componentsInstancesById[componentId];
-        if (component) {
-            component.setProps(props, callback);
-        }
-    }
-    setPendingProps(componentId, newProps) {
-        this.pendingPropsById[componentId] = newProps;
-    }
-    getPropsForId(componentId) {
-        return this.pendingPropsById[componentId] || this.propsById[componentId] || {};
-    }
-    consumePendingProps(componentId) {
-        if (this.pendingPropsById[componentId]) {
-            this.propsById[componentId] = this.pendingPropsById[componentId];
-            delete this.pendingPropsById[componentId];
-        }
-    }
-    mergeNewPropsForId(componentId, newProps) {
-        const currentProps = this.getPropsForId(componentId);
-        this.propsById[componentId] = {
-            ...currentProps,
-            ...newProps,
-        };
-    }
-    clearComponent(componentId) {
-        delete this.propsById[componentId];
-        delete this.componentsInstancesById[componentId];
-    }
-    setComponentClassForName(componentName, ComponentClass) {
-        delete this.wrappedComponents[componentName];
-        this.componentsByName[componentName.toString()] = ComponentClass;
-    }
-    getComponentClassForName(componentName) {
-        this.ensureClassForName(componentName);
-        return this.componentsByName[componentName.toString()];
-    }
-    ensureClassForName(componentName) {
-        if (!this.componentsByName[componentName.toString()] && this.lazyRegistratorFn) {
-            this.lazyRegistratorFn(componentName);
-        }
-    }
-    setComponentInstance(id, component) {
-        this.componentsInstancesById[id] = component;
-    }
-    getComponentInstance(id) {
-        return this.componentsInstancesById[id];
-    }
-    setWrappedComponent(componentName, wrappedComponent) {
-        this.wrappedComponents[componentName] = wrappedComponent;
-    }
-    hasRegisteredWrappedComponent(componentName) {
-        return componentName in this.wrappedComponents;
-    }
-    getWrappedComponent(componentName) {
-        return this.wrappedComponents[componentName];
-    }
-    setLazyComponentRegistrator(lazyRegistratorFn) {
-        this.lazyRegistratorFn = lazyRegistratorFn;
-    }
-}
-exports.Store = Store;
diff --git a/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.d.ts b/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.d.ts
deleted file mode 100644
index 3d62740..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-import { EventSubscription } from '../interfaces/EventSubscription';
-import { UniqueIdProvider } from '../adapters/UniqueIdProvider';
-export declare type CommandsListener = (name: string, params: Record<string, any>) => void;
-export declare class CommandsObserver {
-    private uniqueIdProvider;
-    private listeners;
-    constructor(uniqueIdProvider: UniqueIdProvider);
-    register(listener: CommandsListener): EventSubscription;
-    notify(commandName: string, params: Record<string, any>): void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.js b/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.js
deleted file mode 100644
index 8e911b1..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/events/CommandsObserver.js
+++ /dev/null
@@ -1,21 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.CommandsObserver = void 0;
-class CommandsObserver {
-    uniqueIdProvider;
-    listeners = {};
-    constructor(uniqueIdProvider) {
-        this.uniqueIdProvider = uniqueIdProvider;
-    }
-    register(listener) {
-        const id = this.uniqueIdProvider.generate();
-        this.listeners[id] = listener;
-        return {
-            remove: () => delete this.listeners[id],
-        };
-    }
-    notify(commandName, params) {
-        Object.values(this.listeners).forEach((listener) => listener(commandName, params));
-    }
-}
-exports.CommandsObserver = CommandsObserver;
diff --git a/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.d.ts b/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.d.ts
deleted file mode 100644
index 56b25dc..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.d.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import type { Component } from 'react';
-import { EventSubscription } from '../interfaces/EventSubscription';
-import { NavigationComponentListener } from '../interfaces/NavigationComponentListener';
-import { ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent, NavigationButtonPressedEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ScreenPoppedEvent } from '../interfaces/ComponentEvents';
-import { NativeEventsReceiver } from '../adapters/NativeEventsReceiver';
-import { Store } from '../components/Store';
-export declare class ComponentEventsObserver {
-    private readonly nativeEventsReceiver;
-    private readonly store;
-    private listeners;
-    private alreadyRegistered;
-    constructor(nativeEventsReceiver: NativeEventsReceiver, store: Store);
-    registerOnceForAllComponentEvents(): void;
-    bindComponent(component: Component<{
-        componentId?: string;
-    }>, componentId?: string): EventSubscription;
-    registerComponentListener(listener: NavigationComponentListener, componentId: string): EventSubscription;
-    unmounted(componentId: string): void;
-    notifyComponentWillAppear(event: ComponentWillAppearEvent): void;
-    notifyComponentDidAppear(event: ComponentDidAppearEvent): void;
-    notifyComponentDidDisappear(event: ComponentDidDisappearEvent): void;
-    notifyNavigationButtonPressed(event: NavigationButtonPressedEvent): void;
-    notifySearchBarUpdated(event: SearchBarUpdatedEvent): void;
-    notifySearchBarCancelPressed(event: SearchBarCancelPressedEvent): void;
-    notifyPreviewCompleted(event: PreviewCompletedEvent): void;
-    notifyScreenPopped(event: ScreenPoppedEvent): void;
-    private triggerOnAllListenersByComponentId;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.js b/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.js
deleted file mode 100644
index 43a5ef3..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/events/ComponentEventsObserver.js
+++ /dev/null
@@ -1,96 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.ComponentEventsObserver = void 0;
-const tslib_1 = require("tslib");
-const isString_1 = (0, tslib_1.__importDefault)(require("lodash/isString"));
-const isNil_1 = (0, tslib_1.__importDefault)(require("lodash/isNil"));
-const uniqueId_1 = (0, tslib_1.__importDefault)(require("lodash/uniqueId"));
-const unset_1 = (0, tslib_1.__importDefault)(require("lodash/unset"));
-const forEach_1 = (0, tslib_1.__importDefault)(require("lodash/forEach"));
-class ComponentEventsObserver {
-    nativeEventsReceiver;
-    store;
-    listeners = {};
-    alreadyRegistered = false;
-    constructor(nativeEventsReceiver, store) {
-        this.nativeEventsReceiver = nativeEventsReceiver;
-        this.store = store;
-        this.notifyComponentWillAppear = this.notifyComponentWillAppear.bind(this);
-        this.notifyComponentDidAppear = this.notifyComponentDidAppear.bind(this);
-        this.notifyComponentDidDisappear = this.notifyComponentDidDisappear.bind(this);
-        this.notifyNavigationButtonPressed = this.notifyNavigationButtonPressed.bind(this);
-        this.notifySearchBarUpdated = this.notifySearchBarUpdated.bind(this);
-        this.notifySearchBarCancelPressed = this.notifySearchBarCancelPressed.bind(this);
-        this.notifyPreviewCompleted = this.notifyPreviewCompleted.bind(this);
-        this.notifyScreenPopped = this.notifyScreenPopped.bind(this);
-    }
-    registerOnceForAllComponentEvents() {
-        if (this.alreadyRegistered) {
-            return;
-        }
-        this.alreadyRegistered = true;
-        this.nativeEventsReceiver.registerComponentWillAppearListener(this.notifyComponentWillAppear);
-        this.nativeEventsReceiver.registerComponentDidAppearListener(this.notifyComponentDidAppear);
-        this.nativeEventsReceiver.registerComponentDidDisappearListener(this.notifyComponentDidDisappear);
-        this.nativeEventsReceiver.registerNavigationButtonPressedListener(this.notifyNavigationButtonPressed);
-        this.nativeEventsReceiver.registerSearchBarUpdatedListener(this.notifySearchBarUpdated);
-        this.nativeEventsReceiver.registerSearchBarCancelPressedListener(this.notifySearchBarCancelPressed);
-        this.nativeEventsReceiver.registerPreviewCompletedListener(this.notifyPreviewCompleted);
-        this.nativeEventsReceiver.registerScreenPoppedListener(this.notifyPreviewCompleted);
-    }
-    bindComponent(component, componentId) {
-        const computedComponentId = componentId || component.props.componentId;
-        if (!(0, isString_1.default)(computedComponentId)) {
-            throw new Error(`bindComponent expects a component with a componentId in props or a componentId as the second argument`);
-        }
-        return this.registerComponentListener(component, computedComponentId);
-    }
-    registerComponentListener(listener, componentId) {
-        if (!(0, isString_1.default)(componentId)) {
-            throw new Error(`registerComponentListener expects a componentId as the second argument`);
-        }
-        if ((0, isNil_1.default)(this.listeners[componentId])) {
-            this.listeners[componentId] = {};
-        }
-        const key = (0, uniqueId_1.default)();
-        this.listeners[componentId][key] = listener;
-        return { remove: () => (0, unset_1.default)(this.listeners[componentId], key) };
-    }
-    unmounted(componentId) {
-        (0, unset_1.default)(this.listeners, componentId);
-    }
-    notifyComponentWillAppear(event) {
-        event.passProps = this.store.getPropsForId(event.componentId);
-        this.triggerOnAllListenersByComponentId(event, 'componentWillAppear');
-    }
-    notifyComponentDidAppear(event) {
-        event.passProps = this.store.getPropsForId(event.componentId);
-        this.triggerOnAllListenersByComponentId(event, 'componentDidAppear');
-    }
-    notifyComponentDidDisappear(event) {
-        this.triggerOnAllListenersByComponentId(event, 'componentDidDisappear');
-    }
-    notifyNavigationButtonPressed(event) {
-        this.triggerOnAllListenersByComponentId(event, 'navigationButtonPressed');
-    }
-    notifySearchBarUpdated(event) {
-        this.triggerOnAllListenersByComponentId(event, 'searchBarUpdated');
-    }
-    notifySearchBarCancelPressed(event) {
-        this.triggerOnAllListenersByComponentId(event, 'searchBarCancelPressed');
-    }
-    notifyPreviewCompleted(event) {
-        this.triggerOnAllListenersByComponentId(event, 'previewCompleted');
-    }
-    notifyScreenPopped(event) {
-        this.triggerOnAllListenersByComponentId(event, 'screenPopped');
-    }
-    triggerOnAllListenersByComponentId(event, method) {
-        (0, forEach_1.default)(this.listeners[event.componentId], (component) => {
-            if (component && component[method]) {
-                component[method](event);
-            }
-        });
-    }
-}
-exports.ComponentEventsObserver = ComponentEventsObserver;
diff --git a/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.d.ts b/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.d.ts
deleted file mode 100644
index 6ee718e..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.d.ts
+++ /dev/null
@@ -1,33 +0,0 @@
-import type { Component } from 'react';
-import { EmitterSubscription } from 'react-native';
-import { NativeEventsReceiver } from '../adapters/NativeEventsReceiver';
-import { CommandsObserver } from './CommandsObserver';
-import { EventSubscription } from '../interfaces/EventSubscription';
-import { NavigationComponentListener } from '../interfaces/NavigationComponentListener';
-import { ComponentEventsObserver } from './ComponentEventsObserver';
-import { ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent, NavigationButtonPressedEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ModalDismissedEvent, ScreenPoppedEvent, ModalAttemptedToDismissEvent } from '../interfaces/ComponentEvents';
-import { CommandCompletedEvent, BottomTabSelectedEvent, BottomTabLongPressedEvent, BottomTabPressedEvent } from '../interfaces/Events';
-export declare class EventsRegistry {
-    private nativeEventsReceiver;
-    private commandsObserver;
-    private componentEventsObserver;
-    constructor(nativeEventsReceiver: NativeEventsReceiver, commandsObserver: CommandsObserver, componentEventsObserver: ComponentEventsObserver);
-    registerAppLaunchedListener(callback: () => void): EmitterSubscription;
-    registerComponentWillAppearListener(callback: (event: ComponentWillAppearEvent) => void): EmitterSubscription;
-    registerComponentDidAppearListener(callback: (event: ComponentDidAppearEvent) => void): EmitterSubscription;
-    registerComponentDidDisappearListener(callback: (event: ComponentDidDisappearEvent) => void): EmitterSubscription;
-    registerCommandCompletedListener(callback: (event: CommandCompletedEvent) => void): EmitterSubscription;
-    registerBottomTabSelectedListener(callback: (event: BottomTabSelectedEvent) => void): EmitterSubscription;
-    registerBottomTabPressedListener(callback: (event: BottomTabPressedEvent) => void): EmitterSubscription;
-    registerBottomTabLongPressedListener(callback: (event: BottomTabLongPressedEvent) => void): EmitterSubscription;
-    registerNavigationButtonPressedListener(callback: (event: NavigationButtonPressedEvent) => void): EmitterSubscription;
-    registerModalDismissedListener(callback: (event: ModalDismissedEvent) => void): EmitterSubscription;
-    registerModalAttemptedToDismissListener(callback: (event: ModalAttemptedToDismissEvent) => void): EmitterSubscription;
-    registerSearchBarUpdatedListener(callback: (event: SearchBarUpdatedEvent) => void): EmitterSubscription;
-    registerSearchBarCancelPressedListener(callback: (event: SearchBarCancelPressedEvent) => void): EmitterSubscription;
-    registerPreviewCompletedListener(callback: (event: PreviewCompletedEvent) => void): EmitterSubscription;
-    registerCommandListener(callback: (name: string, params: any) => void): EventSubscription;
-    bindComponent(component: Component<any>, componentId?: string): EventSubscription;
-    registerComponentListener(listener: NavigationComponentListener, componentId: string): EventSubscription;
-    registerScreenPoppedListener(callback: (event: ScreenPoppedEvent) => void): EmitterSubscription;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.js b/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.js
deleted file mode 100644
index 1dd6735..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/events/EventsRegistry.js
+++ /dev/null
@@ -1,68 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.EventsRegistry = void 0;
-class EventsRegistry {
-    nativeEventsReceiver;
-    commandsObserver;
-    componentEventsObserver;
-    constructor(nativeEventsReceiver, commandsObserver, componentEventsObserver) {
-        this.nativeEventsReceiver = nativeEventsReceiver;
-        this.commandsObserver = commandsObserver;
-        this.componentEventsObserver = componentEventsObserver;
-    }
-    registerAppLaunchedListener(callback) {
-        return this.nativeEventsReceiver.registerAppLaunchedListener(callback);
-    }
-    registerComponentWillAppearListener(callback) {
-        return this.nativeEventsReceiver.registerComponentWillAppearListener(callback);
-    }
-    registerComponentDidAppearListener(callback) {
-        return this.nativeEventsReceiver.registerComponentDidAppearListener(callback);
-    }
-    registerComponentDidDisappearListener(callback) {
-        return this.nativeEventsReceiver.registerComponentDidDisappearListener(callback);
-    }
-    registerCommandCompletedListener(callback) {
-        return this.nativeEventsReceiver.registerCommandCompletedListener(callback);
-    }
-    registerBottomTabSelectedListener(callback) {
-        return this.nativeEventsReceiver.registerBottomTabSelectedListener(callback);
-    }
-    registerBottomTabPressedListener(callback) {
-        return this.nativeEventsReceiver.registerBottomTabPressedListener(callback);
-    }
-    registerBottomTabLongPressedListener(callback) {
-        return this.nativeEventsReceiver.registerBottomTabLongPressedListener(callback);
-    }
-    registerNavigationButtonPressedListener(callback) {
-        return this.nativeEventsReceiver.registerNavigationButtonPressedListener(callback);
-    }
-    registerModalDismissedListener(callback) {
-        return this.nativeEventsReceiver.registerModalDismissedListener(callback);
-    }
-    registerModalAttemptedToDismissListener(callback) {
-        return this.nativeEventsReceiver.registerModalAttemptedToDismissListener(callback);
-    }
-    registerSearchBarUpdatedListener(callback) {
-        return this.nativeEventsReceiver.registerSearchBarUpdatedListener(callback);
-    }
-    registerSearchBarCancelPressedListener(callback) {
-        return this.nativeEventsReceiver.registerSearchBarCancelPressedListener(callback);
-    }
-    registerPreviewCompletedListener(callback) {
-        return this.nativeEventsReceiver.registerPreviewCompletedListener(callback);
-    }
-    registerCommandListener(callback) {
-        return this.commandsObserver.register(callback);
-    }
-    bindComponent(component, componentId) {
-        return this.componentEventsObserver.bindComponent(component, componentId);
-    }
-    registerComponentListener(listener, componentId) {
-        return this.componentEventsObserver.registerComponentListener(listener, componentId);
-    }
-    registerScreenPoppedListener(callback) {
-        return this.nativeEventsReceiver.registerScreenPoppedListener(callback);
-    }
-}
-exports.EventsRegistry = EventsRegistry;
diff --git a/node_modules/react-native-navigation/lib/dist/src/index.d.ts b/node_modules/react-native-navigation/lib/dist/src/index.d.ts
deleted file mode 100644
index bc41771..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/index.d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-import { NavigationDelegate } from './NavigationDelegate';
-export declare const Navigation: NavigationDelegate;
-export * from './components/Modal';
-export * from './events/EventsRegistry';
-export * from './adapters/Constants';
-export * from './interfaces/ComponentEvents';
-export * from './interfaces/Events';
-export * from './interfaces/EventSubscription';
-export * from './interfaces/Layout';
-export * from './interfaces/Options';
-export * from './interfaces/NavigationComponent';
-export * from './interfaces/NavigationComponentProps';
-export * from './interfaces/NavigationComponentListener';
-export * from './interfaces/NavigationFunctionComponent';
-export * from './interfaces/CommandName';
-export * from './interfaces/Processors';
-export * from './interfaces/ProcessorSubscription';
diff --git a/node_modules/react-native-navigation/lib/dist/src/index.js b/node_modules/react-native-navigation/lib/dist/src/index.js
deleted file mode 100644
index a8e6895..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/index.js
+++ /dev/null
@@ -1,22 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.Navigation = void 0;
-const tslib_1 = require("tslib");
-const NavigationDelegate_1 = require("./NavigationDelegate");
-const navigationDelegate = new NavigationDelegate_1.NavigationDelegate();
-exports.Navigation = navigationDelegate;
-(0, tslib_1.__exportStar)(require("./components/Modal"), exports);
-(0, tslib_1.__exportStar)(require("./events/EventsRegistry"), exports);
-(0, tslib_1.__exportStar)(require("./adapters/Constants"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/ComponentEvents"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/Events"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/EventSubscription"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/Layout"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/Options"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/NavigationComponent"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/NavigationComponentProps"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/NavigationComponentListener"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/NavigationFunctionComponent"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/CommandName"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/Processors"), exports);
-(0, tslib_1.__exportStar)(require("./interfaces/ProcessorSubscription"), exports);
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.d.ts
deleted file mode 100644
index ca4bddf..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.d.ts
+++ /dev/null
@@ -1,18 +0,0 @@
-export declare enum CommandName {
-    SetRoot = "setRoot",
-    SetDefaultOptions = "setDefaultOptions",
-    MergeOptions = "mergeOptions",
-    UpdateProps = "updateProps",
-    ShowModal = "showModal",
-    DismissModal = "dismissModal",
-    DismissAllModals = "dismissAllModals",
-    Push = "push",
-    Pop = "pop",
-    PopTo = "popTo",
-    PopToRoot = "popToRoot",
-    SetStackRoot = "setStackRoot",
-    ShowOverlay = "showOverlay",
-    DismissOverlay = "dismissOverlay",
-    DismissAllOverlays = "dismissAllOverlays",
-    GetLaunchArgs = "getLaunchArgs"
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.js
deleted file mode 100644
index 2555be1..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/CommandName.js
+++ /dev/null
@@ -1,22 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.CommandName = void 0;
-var CommandName;
-(function (CommandName) {
-    CommandName["SetRoot"] = "setRoot";
-    CommandName["SetDefaultOptions"] = "setDefaultOptions";
-    CommandName["MergeOptions"] = "mergeOptions";
-    CommandName["UpdateProps"] = "updateProps";
-    CommandName["ShowModal"] = "showModal";
-    CommandName["DismissModal"] = "dismissModal";
-    CommandName["DismissAllModals"] = "dismissAllModals";
-    CommandName["Push"] = "push";
-    CommandName["Pop"] = "pop";
-    CommandName["PopTo"] = "popTo";
-    CommandName["PopToRoot"] = "popToRoot";
-    CommandName["SetStackRoot"] = "setStackRoot";
-    CommandName["ShowOverlay"] = "showOverlay";
-    CommandName["DismissOverlay"] = "dismissOverlay";
-    CommandName["DismissAllOverlays"] = "dismissAllOverlays";
-    CommandName["GetLaunchArgs"] = "getLaunchArgs";
-})(CommandName = exports.CommandName || (exports.CommandName = {}));
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.d.ts
deleted file mode 100644
index b07fc34..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.d.ts
+++ /dev/null
@@ -1,42 +0,0 @@
-export declare type ComponentType = 'Component' | 'TopBarTitle' | 'TopBarBackground' | 'TopBarButton';
-export interface ComponentEvent {
-    componentId: string;
-}
-export interface ComponentWillAppearEvent extends ComponentEvent {
-    componentName: string;
-    passProps?: object;
-    componentType: ComponentType;
-}
-export interface ComponentDidAppearEvent extends ComponentEvent {
-    componentName: string;
-    passProps?: object;
-    componentType: ComponentType;
-}
-export interface ComponentDidDisappearEvent extends ComponentEvent {
-    componentName: string;
-    componentType: ComponentType;
-}
-export interface NavigationButtonPressedEvent extends ComponentEvent {
-    buttonId: string;
-}
-export interface ModalDismissedEvent extends ComponentEvent {
-    componentName: string;
-    modalsDismissed: number;
-}
-export interface ModalAttemptedToDismissEvent extends ComponentEvent {
-    componentId: string;
-}
-export interface SearchBarUpdatedEvent extends ComponentEvent {
-    text: string;
-    isFocused: boolean;
-}
-export interface SearchBarCancelPressedEvent extends ComponentEvent {
-    componentName?: string;
-}
-export interface PreviewCompletedEvent extends ComponentEvent {
-    componentName?: string;
-    previewComponentId?: string;
-}
-export interface ScreenPoppedEvent extends ComponentEvent {
-    componentId: string;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/ComponentEvents.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.d.ts
deleted file mode 100644
index 3cd09f5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export interface EventSubscription {
-    remove(): void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/EventSubscription.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/Events.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/Events.d.ts
deleted file mode 100644
index 8ac1156..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/Events.d.ts
+++ /dev/null
@@ -1,15 +0,0 @@
-export interface CommandCompletedEvent {
-    commandName: string;
-    commandId: string;
-    completionTime: number;
-}
-export interface BottomTabSelectedEvent {
-    selectedTabIndex: number;
-    unselectedTabIndex: number;
-}
-export interface BottomTabLongPressedEvent {
-    selectedTabIndex: number;
-}
-export interface BottomTabPressedEvent {
-    tabIndex: number;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/Events.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/Events.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/Events.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.d.ts
deleted file mode 100644
index 52d397a..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.d.ts
+++ /dev/null
@@ -1,189 +0,0 @@
-import { Options } from './Options';
-export interface LayoutComponent<P = {}> {
-    /**
-     * Component reference id, Auto generated if empty
-     */
-    id?: string;
-    /**
-     * Name of your component
-     */
-    name: string | number;
-    /**
-     * Styling options
-     */
-    options?: Options;
-    /**
-     * Properties to pass down to the component
-     */
-    passProps?: P;
-}
-export interface LayoutStackChildren {
-    /**
-     * Set component
-     */
-    component?: LayoutComponent;
-    /**
-     * Set the external component
-     */
-    externalComponent?: ExternalComponent;
-}
-export interface LayoutStack {
-    /**
-     * Set ID of the stack so you can use Navigation.mergeOptions to
-     * update options
-     */
-    id?: string;
-    /**
-     * Set children screens
-     */
-    children?: LayoutStackChildren[];
-    /**
-     * Set options
-     */
-    options?: Options;
-}
-export interface LayoutTabsChildren {
-    /**
-     * Set stack
-     */
-    stack?: LayoutStack;
-    /**
-     * Set component
-     */
-    component?: LayoutComponent;
-    /**
-     * Set the external component
-     */
-    externalComponent?: ExternalComponent;
-    /**
-     * Set the side menu
-     */
-    sideMenu?: LayoutSideMenu;
-}
-export interface LayoutBottomTabs {
-    /**
-     * Set ID of the stack so you can use Navigation.mergeOptions to
-     * update options
-     */
-    id?: string;
-    /**
-     * Set the children screens
-     */
-    children?: LayoutTabsChildren[];
-    /**
-     * Set the bottom tabs options
-     */
-    options?: Options;
-}
-export interface LayoutSideMenu {
-    /**
-     * Set ID of the stack so you can use Navigation.mergeOptions to
-     * update options
-     */
-    id?: string;
-    /**
-     * Set the left side bar
-     */
-    left?: Layout;
-    /**
-     * Set the center view
-     */
-    center: Layout;
-    /**
-     * Set the right side bar
-     */
-    right?: Layout;
-    /**
-     * Set the bottom tabs options
-     */
-    options?: Options;
-}
-export interface LayoutSplitView {
-    /**
-     * Set ID of the stack so you can use Navigation.mergeOptions to
-     * update options
-     */
-    id?: string;
-    /**
-     * Set master layout (the smaller screen, sidebar)
-     */
-    master?: Layout;
-    /**
-     * Set detail layout (the larger screen, flexes)
-     */
-    detail?: Layout;
-    /**
-     * Configure split view
-     */
-    options?: Options;
-}
-export interface LayoutTopTabs {
-    /**
-     * Set the layout's id so Navigation.mergeOptions can be used to update options
-     */
-    id?: string;
-    /**
-     * Set the children screens
-     */
-    children?: LayoutTabsChildren[];
-    /**
-     * Configure top tabs
-     */
-    options?: Options;
-}
-export interface LayoutRoot {
-    /**
-     * Set the root
-     */
-    root: Layout;
-    modals?: any;
-    overlays?: any;
-}
-export interface ExternalComponent {
-    /**
-     * Set the screen's id so Navigation.mergeOptions can be used to update options
-     */
-    id?: string;
-    /**
-     * Name of your component
-     */
-    name: string | number;
-    /**
-     * Configure component options
-     */
-    options?: Options;
-    /**
-     * Properties to pass down to the component
-     */
-    passProps?: object;
-}
-export interface Layout<P = {}> {
-    /**
-     * Set the component
-     */
-    component?: LayoutComponent<P>;
-    /**
-     * Set the stack
-     */
-    stack?: LayoutStack;
-    /**
-     * Set the bottom tabs
-     */
-    bottomTabs?: LayoutBottomTabs;
-    /**
-     * Set the side menu
-     */
-    sideMenu?: LayoutSideMenu;
-    /**
-     * Set the split view
-     */
-    splitView?: LayoutSplitView;
-    /**
-     * Set the top tabs
-     */
-    topTabs?: LayoutTopTabs;
-    /**
-     * Set the external component
-     */
-    externalComponent?: ExternalComponent;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/Layout.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.d.ts
deleted file mode 100644
index a609777..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.d.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-import React from 'react';
-import { NavigationButtonPressedEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ScreenPoppedEvent, ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent } from './ComponentEvents';
-import { NavigationProps } from './NavigationComponentProps';
-import { Options } from './Options';
-export declare class NavigationComponent<Props = {}, State = {}, Snapshot = any> extends React.Component<Props & NavigationProps, State, Snapshot> {
-    /**
-     * Options used to apply a style configuration when the screen appears.
-     *
-     * This field can either contain the concrete options to be applied, or a generator function
-     * which accepts props and returns an Options object.
-     */
-    static options: ((props?: any) => Options) | Options;
-    componentWillAppear(_event: ComponentWillAppearEvent): void;
-    componentDidAppear(_event: ComponentDidAppearEvent): void;
-    componentDidDisappear(_event: ComponentDidDisappearEvent): void;
-    navigationButtonPressed(_event: NavigationButtonPressedEvent): void;
-    searchBarUpdated(_event: SearchBarUpdatedEvent): void;
-    searchBarCancelPressed(_event: SearchBarCancelPressedEvent): void;
-    previewCompleted(_event: PreviewCompletedEvent): void;
-    screenPopped(_event: ScreenPoppedEvent): void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.js
deleted file mode 100644
index 58043f5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponent.js
+++ /dev/null
@@ -1,23 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.NavigationComponent = void 0;
-const tslib_1 = require("tslib");
-const react_1 = (0, tslib_1.__importDefault)(require("react"));
-class NavigationComponent extends react_1.default.Component {
-    /**
-     * Options used to apply a style configuration when the screen appears.
-     *
-     * This field can either contain the concrete options to be applied, or a generator function
-     * which accepts props and returns an Options object.
-     */
-    static options;
-    componentWillAppear(_event) { }
-    componentDidAppear(_event) { }
-    componentDidDisappear(_event) { }
-    navigationButtonPressed(_event) { }
-    searchBarUpdated(_event) { }
-    searchBarCancelPressed(_event) { }
-    previewCompleted(_event) { }
-    screenPopped(_event) { }
-}
-exports.NavigationComponent = NavigationComponent;
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.d.ts
deleted file mode 100644
index 0e038fd..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.d.ts
+++ /dev/null
@@ -1,13 +0,0 @@
-import { NavigationButtonPressedEvent, ModalDismissedEvent, ModalAttemptedToDismissEvent, SearchBarUpdatedEvent, SearchBarCancelPressedEvent, PreviewCompletedEvent, ScreenPoppedEvent, ComponentWillAppearEvent, ComponentDidAppearEvent, ComponentDidDisappearEvent } from './ComponentEvents';
-export interface NavigationComponentListener {
-    componentWillAppear?: (_event: ComponentWillAppearEvent) => void;
-    componentDidAppear?: (_event: ComponentDidAppearEvent) => void;
-    componentDidDisappear?: (_event: ComponentDidDisappearEvent) => void;
-    navigationButtonPressed?: (_event: NavigationButtonPressedEvent) => void;
-    modalDismissed?: (_event: ModalDismissedEvent) => void;
-    modalAttemptedToDismiss?: (_event: ModalAttemptedToDismissEvent) => void;
-    searchBarUpdated?: (_event: SearchBarUpdatedEvent) => void;
-    searchBarCancelPressed?: (_event: SearchBarCancelPressedEvent) => void;
-    previewCompleted?: (_event: PreviewCompletedEvent) => void;
-    screenPopped?: (_event: ScreenPoppedEvent) => void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentListener.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.d.ts
deleted file mode 100644
index 6d405fc..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.d.ts
+++ /dev/null
@@ -1,10 +0,0 @@
-/**
- * @deprecated This type replaced with NavigationProps
- */
-export interface NavigationComponentProps {
-    componentId: string;
-}
-export interface NavigationProps {
-    componentId: string;
-    componentName: string;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationComponentProps.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.d.ts
deleted file mode 100644
index 51ca177..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.d.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-import React from 'react';
-import { NavigationProps } from './NavigationComponentProps';
-import { Options } from './Options';
-export interface NavigationFunctionComponent<Props = {}> extends React.FunctionComponent<Props & NavigationProps> {
-    options?: ((props: Props & NavigationProps) => Options) | Options;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/NavigationFunctionComponent.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.d.ts
deleted file mode 100644
index c769c1a..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.d.ts
+++ /dev/null
@@ -1,1440 +0,0 @@
-import { ImageRequireSource, ImageSourcePropType, Insets, OpaqueColorValue } from 'react-native';
-export declare type Color = string | symbol | ThemeColor | OpaqueColorValue | null;
-declare type FontFamily = string;
-declare type FontStyle = 'normal' | 'italic';
-declare type FontWeightIOS = 'normal' | 'ultralight' | 'thin' | 'light' | 'regular' | 'medium' | 'semibold' | 'demibold' | 'extrabold' | 'ultrabold' | 'bold' | 'heavy' | 'black';
-declare type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | FontWeightIOS;
-export declare type LayoutOrientation = 'all' | 'default' | 'portrait' | 'landscape' | 'upsideDown' | 'sensor' | 'sensorLandscape' | 'sensorPortrait';
-declare type AndroidDensityNumber = number;
-export declare type SystemItemIcon = 'done' | 'cancel' | 'edit' | 'save' | 'add' | 'flexibleSpace' | 'fixedSpace' | 'compose' | 'reply' | 'action' | 'organize' | 'bookmarks' | 'search' | 'refresh' | 'stop' | 'camera' | 'trash' | 'play' | 'pause' | 'rewind' | 'fastForward' | 'undo' | 'redo';
-export declare type Interpolation = {
-    type: 'accelerate';
-    factor?: number;
-} | {
-    type: 'decelerate';
-    factor?: number;
-} | {
-    type: 'decelerateAccelerate';
-} | {
-    type: 'accelerateDecelerate';
-} | {
-    type: 'fastOutSlowIn';
-} | {
-    type: 'linear';
-} | {
-    type: 'overshoot';
-    tension?: number;
-} | {
-    type: 'spring';
-    mass?: number;
-    damping?: number;
-    stiffness?: number;
-    allowsOverdamping?: boolean;
-    initialVelocity?: number;
-};
-interface ThemeColor {
-    light?: string | symbol;
-    dark?: string | symbol;
-}
-export interface OptionsSplitView {
-    /**
-     * Master view display mode
-     * @default 'auto'
-     */
-    displayMode?: 'auto' | 'visible' | 'hidden' | 'overlay';
-    /**
-     * Master view side. Leading is left. Trailing is right.
-     * @default 'leading'
-     */
-    primaryEdge?: 'leading' | 'trailing';
-    /**
-     * Set the minimum width of master view
-     */
-    minWidth?: number;
-    /**
-     * Set the maximum width of master view
-     */
-    maxWidth?: number;
-    /**
-     * Set background style of sidebar. Currently works for Mac Catalyst apps only.
-     * @default 'none'
-     */
-    primaryBackgroundStyle?: 'none' | 'sidebar';
-}
-export interface OptionsStatusBar {
-    /**
-     * Set the status bar visibility
-     * @default true
-     */
-    visible?: boolean;
-    /**
-     * Set the text color of the status bar
-     * @default 'light'
-     */
-    style?: 'light' | 'dark';
-    /**
-     * Set the background color of the status bar
-     * #### (Android specific)
-     */
-    backgroundColor?: Color;
-    /**
-     * Draw screen behind the status bar
-     * #### (Android specific)
-     */
-    drawBehind?: boolean;
-    /**
-     * Allows the StatusBar to be translucent (blurred)
-     * #### (Android specific)
-     */
-    translucent?: boolean;
-    /**
-     * Animate StatusBar style changes.
-     * #### (iOS specific)
-     */
-    animate?: boolean;
-    /**
-     * Automatically hide the StatusBar when the TopBar hides.
-     * #### (iOS specific)
-     */
-    hideWithTopBar?: boolean;
-    /**
-     * Blur content beneath the StatusBar.
-     * #### (iOS specific)
-     */
-    blur?: boolean;
-}
-export interface OptionsLayout {
-    fitSystemWindows?: boolean;
-    /**
-     * Set the screen background color
-     */
-    backgroundColor?: Color;
-    /**
-     * Set background color only for components, helps reduce overdraw if background color is set in default options.
-     * #### (Android specific)
-     */
-    componentBackgroundColor?: Color;
-    /**
-     * Set the allowed orientations
-     */
-    orientation?: LayoutOrientation[];
-    /**
-     * Layout top margin
-     * #### (Android specific)
-     */
-    topMargin?: number;
-    /**
-     * Set language direction.
-     * only works with DefaultOptions
-     */
-    direction?: 'rtl' | 'ltr' | 'locale';
-    /**
-     * Controls the application's preferred home indicator auto-hiding.
-     * #### (iOS specific)
-     */
-    autoHideHomeIndicator?: boolean;
-    /**
-     * Add insets to the top layout
-     */
-    insets?: Insets;
-    /**
-     * Resizes the layout when keyboard is visible
-     * @default true
-     * #### (Android specific)
-     */
-    adjustResize?: boolean;
-}
-export declare enum OptionsModalPresentationStyle {
-    formSheet = "formSheet",
-    pageSheet = "pageSheet",
-    overFullScreen = "overFullScreen",
-    overCurrentContext = "overCurrentContext",
-    currentContext = "currentContext",
-    popover = "popover",
-    fullScreen = "fullScreen",
-    none = "none"
-}
-export declare enum OptionsModalTransitionStyle {
-    coverVertical = "coverVertical",
-    crossDissolve = "crossDissolve",
-    flipHorizontal = "flipHorizontal",
-    partialCurl = "partialCurl"
-}
-export interface OptionsTopBarLargeTitle {
-    /**
-     * Enable large titles
-     */
-    visible?: boolean;
-    /**
-     * Set the font size of large title's text
-     */
-    fontSize?: number;
-    /**
-     * Set the color of large title's text
-     */
-    color?: Color;
-    /**
-     * Set the font family of the large title text
-     */
-    fontFamily?: FontFamily;
-    /**
-     * Set the font style of the large title text
-     */
-    fontStyle?: FontStyle;
-    /**
-     * Specifies font weight. The values 'normal' and 'bold' are supported
-     * for most fonts. Not all fonts have a variant for each of the numeric
-     * values, in that case the closest one is chosen.
-     */
-    fontWeight?: FontWeight;
-}
-export interface OptionsTopBarTitle {
-    /**
-     * Text to display in the title area
-     */
-    text?: string;
-    /**
-     * Font size
-     */
-    fontSize?: number;
-    /**
-     * Text color
-     */
-    color?: Color;
-    /**
-     * Set the font family for the title
-     */
-    fontFamily?: FontFamily;
-    /**
-     * Set the font style for the title
-     */
-    fontStyle?: FontStyle;
-    /**
-     * Specifies font weight. The values 'normal' and 'bold' are supported
-     * for most fonts. Not all fonts have a variant for each of the numeric
-     * values, in that case the closest one is chosen.
-     */
-    fontWeight?: FontWeight;
-    /**
-     * Custom component as the title view
-     */
-    component?: {
-        /**
-         * Component reference id, Auto generated if empty
-         */
-        id?: string;
-        /**
-         * Name of your component
-         */
-        name: string;
-        /**
-         * Set component alignment
-         */
-        alignment?: 'center' | 'fill';
-        /**
-         * Properties to pass down to the component
-         */
-        passProps?: object;
-    };
-    /**
-     * Top Bar title height in densitiy pixels
-     * #### (Android specific)
-     */
-    height?: number;
-    /**
-     * Title alignment
-     * #### (Android specific)
-     */
-    alignment?: 'center' | 'fill';
-}
-export interface OptionsTopBarSubtitle {
-    /**
-     * Set subtitle text
-     */
-    text?: string;
-    /**
-     * Set subtitle font size
-     */
-    fontSize?: number;
-    /**
-     * Set subtitle color
-     */
-    color?: Color;
-    /**
-     * Set the font family for the subtitle
-     */
-    fontFamily?: FontFamily;
-    /**
-     * Set the font style for a text
-     */
-    fontStyle?: FontStyle;
-    /**
-     * Specifies font weight. The values 'normal' and 'bold' are supported
-     * for most fonts. Not all fonts have a variant for each of the numeric
-     * values, in that case the closest one is chosen.
-     */
-    fontWeight?: FontWeight;
-    /**
-     * Set subtitle alignment
-     */
-    alignment?: 'center';
-}
-export interface OptionsTopBarBackButton {
-    /**
-     * Overrides the text that's read by the screen reader when the user interacts with the back button
-     * #### (Android specific)
-     */
-    accessibilityLabel?: string;
-    /**
-     * Button id for reference press event
-     */
-    id?: string;
-    /**
-     * Image to show as the back button
-     */
-    icon?: ImageResource;
-    /**
-     * SF Symbol to show as the back button
-     * #### (iOS 13+ specific)
-     */
-    sfSymbol?: string;
-    /**
-     * Weither the back button is visible or not
-     * @default true
-     */
-    visible?: boolean;
-    /**
-     * Set the back button title
-     * #### (iOS specific)
-     */
-    title?: string;
-    /**
-     * Show title or just the icon
-     * #### (iOS specific)
-     */
-    showTitle?: boolean;
-    /**
-     * Back button icon and text color
-     */
-    color?: Color;
-    /**
-     * Set subtitle font size
-     */
-    fontSize?: number;
-    /**
-     * Set the font family for the back button
-     * #### (iOS specific)
-     */
-    fontFamily?: FontFamily;
-    /**
-     * Set the font style for a text
-     */
-    fontStyle?: FontStyle;
-    /**
-     * Specifies font weight. The values 'normal' and 'bold' are supported
-     * for most fonts. Not all fonts have a variant for each of the numeric
-     * values, in that case the closest one is chosen.
-     */
-    fontWeight?: FontWeight;
-    /**
-     * Set testID for reference in E2E tests
-     */
-    testID?: string;
-    /**
-     * Enables iOS 14 back button menu display
-     * #### (iOS specific)
-     * @default true
-     */
-    enableMenu?: boolean;
-    /**
-     * Allows the NavBar to be translucent (blurred)
-     * #### (iOS specific)
-     */
-    displayMode?: 'default' | 'generic' | 'minimal';
-    /**
-     * Controls whether the default back button should pop the Stack or not
-     * @default true
-     */
-    popStackOnPress?: boolean;
-}
-export interface HardwareBackButtonOptions {
-    /**
-     * Controls whether the hardware back button should dismiss modal or not
-     * #### (Android specific)
-     * @default true
-     */
-    dismissModalOnPress?: boolean;
-    /**
-     * Controls whether the hardware back button should pop the Stack or not
-     * #### (Android specific)
-     * @default true
-     */
-    popStackOnPress?: boolean;
-    /**
-     * Controls hardware back button bottom tab selection behaviour
-     */
-    bottomTabsOnPress?: 'exit' | 'first' | 'previous';
-}
-export interface OptionsTopBarScrollEdgeAppearanceBackground {
-    /**
-     * Background color of the top bar
-     */
-    color?: Color;
-    /**
-     * Allows the NavBar to be translucent (blurred)
-     * #### (iOS specific)
-     */
-    translucent?: boolean;
-}
-export interface OptionsTopBarScrollEdgeAppearance {
-    background?: OptionsTopBarScrollEdgeAppearanceBackground;
-    active: boolean;
-    /**
-     * Disable the border on bottom of the navbar
-     * #### (iOS specific)
-     * @default false
-     */
-    noBorder?: boolean;
-    /**
-     * Change the navbar border color
-     */
-    borderColor?: Color;
-}
-export interface OptionsTopBarBackground {
-    /**
-     * Background color of the top bar
-     */
-    color?: Color;
-    /**
-     * Clip the top bar background to bounds if set to true.
-     * #### (iOS specific)
-     */
-    clipToBounds?: boolean;
-    /**
-     * Set a custom component for the Top Bar background
-     */
-    component?: {
-        name?: string;
-        /**
-         * Properties to pass down to the component
-         */
-        passProps?: object;
-    };
-    /**
-     * Allows the NavBar to be translucent (blurred)
-     * #### (iOS specific)
-     */
-    translucent?: boolean;
-    /**
-     * Enable background blur
-     * #### (iOS specific)
-     */
-    blur?: boolean;
-}
-export interface OptionsTopBarButton {
-    /**
-     * (Android only) Sets a textual button to be ALL CAPS. default value is true
-     */
-    allCaps?: boolean;
-    /**
-     * Button id for reference press event
-     */
-    id: string;
-    /**
-     * Set the button icon
-     */
-    icon?: ImageResource;
-    /**
-     * Set the SF symbol as icon (will be used primarily)
-     * #### (iOS 13+ specific)
-     */
-    sfSymbol?: string;
-    /**
-     * Set the button icon insets
-     */
-    iconInsets?: IconInsets;
-    /**
-     * Set the button as a custom component
-     */
-    component?: {
-        /**
-         * Component reference id, Auto generated if empty
-         */
-        id?: string;
-        /**
-         * Name of your component
-         */
-        name: string;
-        /**
-         * Properties to pass down to the component
-         */
-        passProps?: object;
-        /**
-         * (Android only) component width
-         */
-        width?: number;
-        /**
-         * (Android only) component height
-         */
-        height?: number;
-    };
-    /**
-     * (iOS only) Set the button as an iOS system icon
-     */
-    systemItem?: SystemItemIcon;
-    /**
-     * Set the button text
-     */
-    text?: string;
-    /**
-     * Overrides the text that's read by the screen reader when the user interacts with the element
-     */
-    accessibilityLabel?: string;
-    /**
-     * Set the font family for the button's text
-     */
-    fontFamily?: FontFamily;
-    /**
-     * Set the font style for the button's text
-     */
-    fontStyle?: FontStyle;
-    /**
-     * Specifies font weight. The values 'normal' and 'bold' are supported
-     * for most fonts. Not all fonts have a variant for each of the numeric
-     * values, in that case the closest one is chosen.
-     */
-    fontWeight?: FontWeight;
-    /**
-     * Set the font size in dp
-     */
-    fontSize?: number;
-    /**
-     * Set the button enabled or disabled
-     * @default true
-     */
-    enabled?: boolean;
-    /**
-     * Disable icon tinting
-     */
-    disableIconTint?: boolean;
-    /**
-     * Set text color
-     */
-    color?: Color;
-    /**
-     * Set text color in disabled state
-     */
-    disabledColor?: Color;
-    /**
-     * Set icon background style
-     */
-    iconBackground?: IconBackgroundOptions;
-    /**
-     * Set testID for reference in E2E tests
-     */
-    testID?: string;
-    /**
-     * (Android only) Set showAsAction value
-     * @see {@link https://developer.android.com/guide/topics/resources/menu-resource|Android developer guide: Menu resource}
-     */
-    showAsAction?: 'ifRoom' | 'withText' | 'always' | 'never';
-}
-export interface OptionsSearchBar {
-    visible?: boolean;
-    focus?: boolean;
-    hideOnScroll?: boolean;
-    hideTopBarOnFocus?: boolean;
-    obscuresBackgroundDuringPresentation?: boolean;
-    backgroundColor?: Color;
-    tintColor?: Color;
-    placeholder?: string;
-    cancelText?: string;
-}
-export interface OptionsTopBar {
-    /**
-     * Show or hide the top bar
-     */
-    visible?: boolean;
-    /**
-     * Controls whether TopBar visibility changes should be animated
-     */
-    animate?: boolean;
-    /**
-     * Top bar will hide and show based on users scroll direction
-     */
-    hideOnScroll?: boolean;
-    /**
-     * Change button colors in the top bar
-     */
-    leftButtonColor?: Color;
-    rightButtonColor?: Color;
-    leftButtonBackgroundColor?: Color;
-    rightButtonBackgroundColor?: Color;
-    leftButtonDisabledColor?: Color;
-    rightButtonDisabledColor?: Color;
-    /**
-     * Draw behind the navbar
-     */
-    drawBehind?: boolean;
-    /**
-     * Can be used to reference the top bar in E2E tests
-     */
-    testID?: string;
-    /**
-     * Title configuration
-     */
-    title?: OptionsTopBarTitle;
-    /**
-     * Subtitle configuration
-     */
-    subtitle?: OptionsTopBarSubtitle;
-    /**
-     * Back button configuration
-     */
-    backButton?: OptionsTopBarBackButton;
-    /**
-     * List of buttons to the left
-     */
-    leftButtons?: OptionsTopBarButton[];
-    /**
-     * List of buttons to the right
-     */
-    rightButtons?: OptionsTopBarButton[];
-    /**
-     * Background configuration
-     */
-    background?: OptionsTopBarBackground;
-    /**
-     *
-     */
-    scrollEdgeAppearance?: OptionsTopBarScrollEdgeAppearance;
-    /**
-     * Control the NavBar blur style
-     * #### (iOS specific)
-     * @requires translucent: true
-     * @default 'default'
-     */
-    barStyle?: 'default' | 'black';
-    /**
-     * Disable the border on bottom of the navbar
-     * #### (iOS specific)
-     * @default false
-     */
-    noBorder?: boolean;
-    /**
-     * Show a UISearchBar in the Top Bar
-     * #### (iOS 11+ specific)
-     */
-    searchBar?: OptionsSearchBar;
-    /**
-     * Hides the UISearchBar when scrolling
-     * #### (iOS 11+ specific)
-     */
-    searchBarHiddenWhenScrolling?: boolean;
-    /**
-     * The placeholder value in the UISearchBar
-     * #### (iOS 11+ specific)
-     */
-    searchBarPlaceholder?: string;
-    /**
-     * The background color of the UISearchBar's TextField
-     * #### (iOS 13+ specific)
-     */
-    searchBarBackgroundColor?: string;
-    /**
-     * The tint color of the UISearchBar
-     * #### (iOS 11+ specific)
-     */
-    searchBarTintColor?: string;
-    /**
-     * Controls Hiding NavBar on focus UISearchBar
-     * #### (iOS 11+ specific)
-     */
-    hideNavBarOnFocusSearchBar?: boolean;
-    /**
-     * Control the Large Title configuration
-     * #### (iOS 11+ specific)
-     */
-    largeTitle?: OptionsTopBarLargeTitle;
-    /**
-     * Set the height of the navbar in dp
-     * #### (Android specific)
-     */
-    height?: AndroidDensityNumber;
-    /**
-     * Change the navbar border color
-     */
-    borderColor?: Color;
-    /**
-     * Set the border height of the navbar in dp
-     * #### (Android specific)
-     */
-    borderHeight?: AndroidDensityNumber;
-    /**
-     * Set the elevation of the navbar in dp
-     * #### (Android specific)
-     */
-    elevation?: AndroidDensityNumber;
-    /**
-     * Layout top margin
-     * #### (Android specific)
-     */
-    topMargin?: number;
-    /**
-     * Toggles animation on left buttons bar upon changes
-     */
-    animateLeftButtons?: boolean;
-    /**
-     * Toggles animation on right buttons bar upon changes
-     */
-    animateRightButtons?: boolean;
-}
-export interface SharedElementTransition {
-    fromId: string;
-    toId: string;
-    duration?: number;
-    interpolation?: Interpolation;
-}
-export interface ElementTransition {
-    id: string;
-    alpha?: AppearingElementAnimation | DisappearingElementAnimation;
-    translationX?: AppearingElementAnimation | DisappearingElementAnimation;
-    translationY?: AppearingElementAnimation | DisappearingElementAnimation;
-    scaleX?: AppearingElementAnimation | DisappearingElementAnimation;
-    scaleY?: AppearingElementAnimation | DisappearingElementAnimation;
-    rotationX?: AppearingElementAnimation | DisappearingElementAnimation;
-    rotationY?: AppearingElementAnimation | DisappearingElementAnimation;
-    x?: AppearingElementAnimation | DisappearingElementAnimation;
-    y?: AppearingElementAnimation | DisappearingElementAnimation;
-}
-export interface AppearingElementAnimation extends ElementAnimation {
-    from: number;
-}
-export interface DisappearingElementAnimation extends ElementAnimation {
-    to: number;
-}
-export interface ElementAnimation {
-    duration: number;
-    startDelay?: number;
-    interpolation?: Interpolation;
-}
-export interface OptionsFab {
-    id: string;
-    backgroundColor?: Color;
-    clickColor?: Color;
-    rippleColor?: Color;
-    visible?: boolean;
-    icon?: ImageResource;
-    iconColor?: Color;
-    alignHorizontally?: 'left' | 'right';
-    hideOnScroll?: boolean;
-    size?: 'mini' | 'regular';
-}
-export interface OptionsBottomTabs {
-    /**
-     * Show or hide the bottom tabs
-     */
-    visible?: boolean;
-    /**
-     * Enable animations when toggling visibility
-     */
-    animate?: boolean;
-    /**
-     * Controls whether tab selection is animated or not
-     * #### (android specific)
-     * @default true
-     */
-    animateTabSelection?: boolean;
-    /**
-     * Use large icons when possible, even when three tabs without titles are displayed
-     * #### (android specific)
-     * @default false
-     */
-    preferLargeIcons?: boolean;
-    /**
-     * Switch to another screen within the bottom tabs via index (starting from 0)
-     */
-    currentTabIndex?: number;
-    /**
-     * Switch to another screen within the bottom tabs via screen name
-     */
-    currentTabId?: string;
-    /**
-     * Set a testID to reference the bottom tabs
-     */
-    testID?: string;
-    /**
-     * Overrides the text that's read by the screen reader when the user interacts with the element
-     * #### (iOS specific)
-     */
-    accessibilityLabel?: string;
-    /**
-     * Draw screen component under the tab bar
-     */
-    drawBehind?: boolean;
-    /**
-     * Set a background color for the bottom tabs
-     */
-    backgroundColor?: Color;
-    /**
-     * Set when tabs are attached to hierarchy consequently when the
-     * RootView's constructor is called.
-     */
-    tabsAttachMode?: 'together' | 'afterInitialTab' | 'onSwitchToTab';
-    /**
-     * Control the Bottom Tabs blur style
-     * #### (iOS specific)
-     * @requires translucent: true
-     * @default 'default'
-     */
-    barStyle?: 'default' | 'black';
-    /**
-     * Allows the Bottom Tabs to be translucent (blurred)
-     * #### (iOS specific)
-     */
-    translucent?: boolean;
-    /**
-     * Hide the top line of the Tab Bar
-     * #### (iOS specific)
-     */
-    hideShadow?: boolean;
-    /**
-     * Control the text display mode below the tab icon
-     * #### (Android specific)
-     */
-    titleDisplayMode?: 'alwaysShow' | 'showWhenActive' | 'alwaysHide' | 'showWhenActiveForce';
-    /**
-     * Set the elevation of the Bottom Tabs in dp
-     * #### (Android specific)
-     */
-    elevation?: AndroidDensityNumber;
-    /**
-     * Hides the BottomTabs on scroll to increase the amount of content visible to the user.
-     * The options requires that the scrollable view will be the root view of the screen and that it specifies `nestedScrollEnabled: true`.
-     * #### (Android specific)
-     */
-    hideOnScroll?: boolean;
-    /**
-     * Control the top border color of the Bottom tabs bar
-     */
-    borderColor?: Color;
-    /**
-     * Control the top border width of the Bottom tabs bar
-     */
-    borderWidth?: number;
-    /**
-     * Control the shadow of the Bottom tabs bar
-     */
-    shadow?: ShadowOptions;
-}
-export interface ShadowOptions {
-    /**
-     * The opacity of the shadow
-     */
-    opacity?: number;
-    /**
-     * The color of the shadow
-     */
-    color?: Color;
-    /**
-     * The blur radius used to create the shadow
-     */
-    radius?: number;
-}
-export interface DotIndicatorOptions {
-    color?: Color;
-    size?: number;
-    visible?: boolean;
-}
-export interface ImageSystemSource {
-    system: string;
-    fallback?: ImageRequireSource | string;
-}
-export declare type ImageResource = ImageSourcePropType | string | ImageSystemSource;
-export interface OptionsBottomTab {
-    dotIndicator?: DotIndicatorOptions;
-    /**
-     * Set the text to display below the icon
-     */
-    text?: string;
-    /**
-     * Set the text in a badge that is overlayed over the component
-     */
-    badge?: string;
-    /**
-     * Set the background color of the badge that is overlayed over the component
-     */
-    badgeColor?: Color;
-    /**
-     * Show the badge with the animation.
-     * #### (Android specific)
-     */
-    animateBadge?: boolean;
-    /**
-     * Set a testID to reference the tab in E2E tests
-     */
-    testID?: string;
-    /**
-     * Set the tab icon
-     */
-    icon?: ImageResource;
-    /**
-     * Set the icon tint
-     */
-    iconColor?: Color;
-    /**
-     * Set the icon width
-     * #### (Android specific)
-     */
-    iconWidth?: number;
-    /**
-     * Set the icon height
-     * #### (Android specific)
-     */
-    iconHeight?: number;
-    /**
-     * Set the text color
-     */
-    textColor?: Color;
-    /**
-     * Set the selected icon tint
-     */
-    selectedIconColor?: Color;
-    /**
-     * Set the selected text color
-     */
-    selectedTextColor?: Color;
-    /**
-     * Set the font family for the tab's text
-     */
-    fontFamily?: FontFamily;
-    /**
-     * Set the font style for the tab's text
-     */
-    fontStyle?: FontStyle;
-    /**
-     * Specifies font weight. The values 'normal' and 'bold' are supported
-     * for most fonts. Not all fonts have a variant for each of the numeric
-     * values, in that case the closest one is chosen.
-     */
-    fontWeight?: FontWeight;
-    /**
-     * Set the text font size
-     */
-    fontSize?: number;
-    /**
-     * Set the insets of the icon
-     */
-    iconInsets?: Insets;
-    /**
-     * Set selected icon image
-     * #### (iOS specific)
-     */
-    selectedIcon?: ImageResource;
-    /**
-     * Set true if you want to disable the icon tinting
-     * #### (iOS specific)
-     */
-    disableIconTint?: boolean;
-    /**
-     * Set true if you want to disable the text tinting
-     * #### (iOS specific)
-     */
-    disableSelectedIconTint?: boolean;
-    /**
-     * Set the font size for selected tabs
-     * #### (Android specific)
-     */
-    selectedFontSize?: number;
-    /**
-     * If it's set to false, pressing a tab won't select the tab
-     * instead it will emit a bottomTabPressedEvent
-     */
-    selectTabOnPress?: boolean;
-    /**
-     * Pop to root of stack by tapping on already selected tab
-     * #### (Android specific)
-     */
-    popToRoot?: boolean;
-    /**
-     * Set the SF symbol as icon (will be used primarily)
-     * #### (iOS 13+ specific)
-     */
-    sfSymbol?: string;
-    /**
-     * Set the SF symbol as selected icon (will be used primarily)
-     * #### (iOS 13+ specific)
-     */
-    sfSelectedSymbol?: string;
-}
-export interface SideMenuSide {
-    /**
-     * Show or hide the side menu
-     */
-    visible?: boolean;
-    /**
-     * Enable or disable the side menu
-     */
-    enabled?: boolean;
-    /**
-     * Set the width of the side menu
-     */
-    width?: number;
-    /**
-     * Set the height of the side menu
-     */
-    height?: number;
-    /**
-     * Stretch sideMenu contents when opened past the width
-     * #### (iOS specific)
-     * @default true
-     */
-    shouldStretchDrawer?: boolean;
-}
-export interface OptionsSideMenu {
-    /**
-     * Configure the left side menu
-     */
-    left?: SideMenuSide;
-    /**
-     * Configure the right side menu
-     */
-    right?: SideMenuSide;
-    /**
-     * Configure how a user is allowed to open a drawer using gestures
-     * #### (iOS specific)
-     * @default 'entireScreen'
-     */
-    openGestureMode?: 'entireScreen' | 'bezel';
-}
-export interface OverlayOptions {
-    /**
-     * Capture touches outside of the Component View
-     */
-    interceptTouchOutside?: boolean;
-    /**
-     * Control whether this Overlay should handle Keyboard events.
-     * Set this to true if your Overlay contains a TextInput.
-     */
-    handleKeyboardEvents?: boolean;
-}
-export interface ModalOptions {
-    /**
-     * Control whether this modal should be dismiss using swipe gesture when the modalPresentationStyle = 'pageSheet'
-     * #### (iOS specific)
-     */
-    swipeToDismiss?: boolean;
-}
-export interface OptionsPreviewAction {
-    /**
-     * Reference ID to get callbacks from
-     */
-    id: string;
-    /**
-     * Action text
-     */
-    title: string;
-    /**
-     * Action style
-     */
-    style?: 'default' | 'selected' | 'destructive';
-    /**
-     * Subactions that will be shown when this action is pressed.
-     */
-    actions?: OptionsPreviewAction[];
-}
-export interface OptionsPreview {
-    /**
-     * Pass a react node tag to mark a SourceRect for a specific
-     * peek and pop preview element.
-     */
-    reactTag?: number;
-    /**
-     * You can set this property specify the width of the preview.
-     * If the width is greater than the device width, it will be zoomed in.
-     */
-    width?: number;
-    /**
-     * Height of the preview
-     */
-    height?: number;
-    /**
-     * You can control if the users gesture will result in pushing
-     * the preview screen into the stack.
-     */
-    commit?: boolean;
-    /**
-     * List of actions that will appear underneath the preview window.
-     * They can be nested for sub actions.
-     */
-    actions?: OptionsPreviewAction[];
-}
-export interface OptionsAnimationPropertyConfig {
-    /**
-     * Animate from this value, ex. 0
-     */
-    from?: number;
-    /**
-     * Animate to this value, ex. 1
-     */
-    to?: number;
-    /**
-     * Animation duration
-     * @default 300
-     */
-    duration?: number;
-    /**
-     * Animation delay
-     * @default 0
-     */
-    startDelay?: number;
-    /**
-     * Animation interplation
-     */
-    interpolation?: Interpolation;
-}
-/**
- * Used to animate the actual content added to the hierarchy.
- * Content can be a React component (component) or any other layout (Stack, BottomTabs etc)
- */
-export interface ScreenAnimationOptions {
-    /**
-     * Animate the element over x value
-     */
-    x?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over y value
-     */
-    y?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over translateX
-     */
-    translationX?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over translateY
-     */
-    translationY?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over opacity
-     */
-    alpha?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over scaleX
-     */
-    scaleX?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over scaleY
-     */
-    scaleY?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over rotationX
-     */
-    rotationX?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over rotationY
-     */
-    rotationY?: OptionsAnimationPropertyConfig;
-    /**
-     * Animate the element over rotation
-     */
-    rotation?: OptionsAnimationPropertyConfig;
-    /**
-     * Wait for the root view to render before start animation
-     */
-    waitForRender?: boolean;
-    /**
-     * Enable or disable the animation
-     * @default true
-     */
-    enabled?: boolean;
-}
-export interface IconInsets {
-    /**
-     * Configure top inset
-     */
-    top?: number;
-    /**
-     * Configure left inset
-     */
-    left?: number;
-    /**
-     * Configure bottom inset
-     */
-    bottom?: number;
-    /**
-     * Configure right inset
-     */
-    right?: number;
-}
-export interface ViewAnimationOptions extends ScreenAnimationOptions {
-    /**
-     * ID of the Top Bar we want to animate
-     */
-    id?: string;
-}
-export interface EnterExitAnimationOptions {
-    /**
-     * Animate opening component
-     */
-    enter?: ViewAnimationOptions;
-    /**
-     * Animate closing component
-     */
-    exit?: ViewAnimationOptions;
-}
-export interface OldModalAnimationOptions extends ViewAnimationOptions {
-    /**
-     * Animations to be applied on elements which are shared between the appearing and disappearing screens
-     */
-    sharedElementTransitions?: SharedElementTransition[];
-    /**
-     * Animations to be applied on views in the appearing or disappearing screens
-     */
-    elementTransitions?: ElementTransition[];
-}
-export interface ModalAnimationOptions {
-    /**
-     * Animate opening modal
-     */
-    enter?: ViewAnimationOptions;
-    /**
-     * Animate closing modal
-     */
-    exit?: ViewAnimationOptions;
-    /**
-     * Animations to be applied on elements which are shared between the appearing and disappearing screens
-     */
-    sharedElementTransitions?: SharedElementTransition[];
-    /**
-     * Animations to be applied on views in the appearing or disappearing screens
-     */
-    elementTransitions?: ElementTransition[];
-}
-/**
- * Used for describing stack commands animations.
- */
-export interface StackAnimationOptions {
-    /**
-     * Wait for the View to render before start animation
-     */
-    waitForRender?: boolean;
-    /**
-     * Enable or disable the animation
-     * @default true
-     */
-    enabled?: boolean;
-    /**
-     * Configure animations for the top bar
-     */
-    topBar?: ViewAnimationOptions | {
-        enter?: ViewAnimationOptions;
-        exit?: ViewAnimationOptions;
-    };
-    /**
-     * Configure animations for the bottom tabs
-     */
-    bottomTabs?: ViewAnimationOptions | {
-        enter?: ViewAnimationOptions;
-        exit?: ViewAnimationOptions;
-    };
-    /**
-     * Configure animations for the content (Screen)
-     */
-    content?: ViewAnimationOptions | {
-        enter?: ViewAnimationOptions;
-        exit?: ViewAnimationOptions;
-    };
-    /**
-     * Animations to be applied on elements which are shared between the appearing and disappearing screens
-     */
-    sharedElementTransitions?: SharedElementTransition[];
-    /**
-     * Animations to be applied on views in the appearing or disappearing screens
-     */
-    elementTransitions?: ElementTransition[];
-}
-/**
- * Used for configuring command animations
- */
-export interface AnimationOptions {
-    /**
-     * Configure the setStackRoot animation
-     */
-    setStackRoot?: ViewAnimationOptions | StackAnimationOptions;
-    /**
-     * Configure the setRoot animation
-     */
-    setRoot?: ViewAnimationOptions | EnterExitAnimationOptions;
-    /**
-     * Configure the animation of the pushed screen
-     * #### (Android specific)
-     */
-    push?: StackAnimationOptions;
-    /**
-     * Configure what animates when a screen is popped
-     */
-    pop?: StackAnimationOptions;
-    /**
-     * Configure what animates when modal is shown
-     */
-    showModal?: OldModalAnimationOptions | ModalAnimationOptions;
-    /**
-     * Configure what animates when modal is dismissed
-     */
-    dismissModal?: OldModalAnimationOptions | ModalAnimationOptions;
-}
-/**
- * Configure Android's NavigationBar
- */
-export interface NavigationBarOptions {
-    backgroundColor?: Color;
-    visible?: boolean;
-}
-/**
- * Used for configuring and controlling the main window in iOS
- */
-export interface WindowOptions {
-    /**
-     * Configure the background color of the application's main window.
-     */
-    backgroundColor?: Color;
-}
-export interface IconBackgroundOptions {
-    /**
-     * Set background color
-     */
-    color: Color;
-    /**
-     * Set background color on disabled state
-     */
-    disabledColor?: Color;
-    /**
-     * Set corner radius
-     */
-    cornerRadius?: number;
-    /**
-     * Set width
-     */
-    width?: number;
-    /**
-     * Set height
-     */
-    height?: number;
-}
-export interface Options {
-    /**
-     * Configure the status bar
-     */
-    statusBar?: OptionsStatusBar;
-    /**
-     * Configure the layout
-     */
-    layout?: OptionsLayout;
-    /**
-     * Configure the presentation style of the modal
-     */
-    modalPresentationStyle?: OptionsModalPresentationStyle;
-    /**
-     * Configure the transition style of the modal
-     *
-     * #### (Android specific)
-     */
-    modalTransitionStyle?: OptionsModalTransitionStyle;
-    /**
-     * Configure the top bar
-     */
-    topBar?: OptionsTopBar;
-    fab?: OptionsFab;
-    /**
-     * Configure the bottom tabs
-     */
-    bottomTabs?: OptionsBottomTabs;
-    /**
-     * Configure the bottom tab associated to the screen
-     */
-    bottomTab?: OptionsBottomTab;
-    /**
-     * Configure the side menu
-     */
-    sideMenu?: OptionsSideMenu;
-    /**
-     * Configure the splitView controller
-     */
-    splitView?: OptionsSplitView;
-    /**
-     * Configure the overlay
-     */
-    overlay?: OverlayOptions;
-    /**
-     * Configure the modal
-     */
-    modal?: ModalOptions;
-    /**
-     * Animation used for navigation commands that modify the layout
-     * hierarchy can be controlled in options.
-     *
-     * Animations can be modified per command and it's also possible
-     * to change the default animation for each command.
-     *
-     * Example:
-  ```js
-  setRoot: {
-    y: {
-      from: 1000,
-      to: 0,
-      duration: 500,
-      interpolation: 'accelerate',
-    },
-    alpha: {
-      from: 0,
-      to: 1,
-      duration: 400,
-      startDelay: 100,
-      interpolation: 'accelerate'
-    }
-  }
-  ```
-     */
-    animations?: AnimationOptions;
-    /**
-     * Configure Android's NavigationBar
-     */
-    navigationBar?: NavigationBarOptions;
-    /**
-     * Android Hardware Back button configuration
-     */
-    hardwareBackButton?: HardwareBackButtonOptions;
-    /**
-     * Preview configuration for Peek and Pop
-     * #### (iOS specific)
-     */
-    preview?: OptionsPreview;
-    /**
-     * Enable or disable swipe back to pop gesture
-     * #### (iOS specific)
-     * @default true
-     */
-    popGesture?: boolean;
-    /**
-     * Background image for the screen
-     * #### (iOS specific)
-     */
-    backgroundImage?: ImageResource;
-    /**
-     * Background image for the Navigation View
-     * #### (iOS specific)
-     */
-    rootBackgroundImage?: ImageResource;
-    /**
-     * Provides a way to configure the overall presentation of your application's main user interface
-     * #### (iOS specific)
-     */
-    window?: WindowOptions;
-    /**
-     * Enable or disable automatically blurring focused input, dismissing keyboard on unmount
-     * #### (Android specific)
-     * @default false
-     */
-    blurOnUnmount?: boolean;
-}
-export {};
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.js
deleted file mode 100644
index 62764c4..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/Options.js
+++ /dev/null
@@ -1,21 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.OptionsModalTransitionStyle = exports.OptionsModalPresentationStyle = void 0;
-var OptionsModalPresentationStyle;
-(function (OptionsModalPresentationStyle) {
-    OptionsModalPresentationStyle["formSheet"] = "formSheet";
-    OptionsModalPresentationStyle["pageSheet"] = "pageSheet";
-    OptionsModalPresentationStyle["overFullScreen"] = "overFullScreen";
-    OptionsModalPresentationStyle["overCurrentContext"] = "overCurrentContext";
-    OptionsModalPresentationStyle["currentContext"] = "currentContext";
-    OptionsModalPresentationStyle["popover"] = "popover";
-    OptionsModalPresentationStyle["fullScreen"] = "fullScreen";
-    OptionsModalPresentationStyle["none"] = "none";
-})(OptionsModalPresentationStyle = exports.OptionsModalPresentationStyle || (exports.OptionsModalPresentationStyle = {}));
-var OptionsModalTransitionStyle;
-(function (OptionsModalTransitionStyle) {
-    OptionsModalTransitionStyle["coverVertical"] = "coverVertical";
-    OptionsModalTransitionStyle["crossDissolve"] = "crossDissolve";
-    OptionsModalTransitionStyle["flipHorizontal"] = "flipHorizontal";
-    OptionsModalTransitionStyle["partialCurl"] = "partialCurl";
-})(OptionsModalTransitionStyle = exports.OptionsModalTransitionStyle || (exports.OptionsModalTransitionStyle = {}));
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.d.ts
deleted file mode 100644
index 82b24fd..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.d.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export interface ProcessorSubscription {
-    remove(): void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/ProcessorSubscription.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.d.ts b/node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.d.ts
deleted file mode 100644
index 5272706..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { Layout } from './Layout';
-import { CommandName } from './CommandName';
-export interface LayoutProcessor {
-    (layout: Layout<{}>, commandName: CommandName): Layout<{}>;
-}
-export interface OptionsProcessor<T, S = any> {
-    (value: T, commandName: CommandName, props?: S): T;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.js b/node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.js
deleted file mode 100644
index c8ad2e5..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/interfaces/Processors.js
+++ /dev/null
@@ -1,2 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
diff --git a/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.d.ts b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.d.ts
deleted file mode 100644
index c453882..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { LayoutProcessorsStore } from './LayoutProcessorsStore';
-import { Layout } from '../interfaces/Layout';
-import { CommandName } from '../interfaces/CommandName';
-export declare class LayoutProcessor {
-    private layoutProcessorsStore;
-    constructor(layoutProcessorsStore: LayoutProcessorsStore);
-    process(layout: Layout<any>, commandName: CommandName): Layout;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.js b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.js
deleted file mode 100644
index 919603b..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessor.js
+++ /dev/null
@@ -1,17 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.LayoutProcessor = void 0;
-class LayoutProcessor {
-    layoutProcessorsStore;
-    constructor(layoutProcessorsStore) {
-        this.layoutProcessorsStore = layoutProcessorsStore;
-    }
-    process(layout, commandName) {
-        const processors = this.layoutProcessorsStore.getProcessors();
-        processors.forEach((processor) => {
-            layout = processor(layout, commandName);
-        });
-        return layout;
-    }
-}
-exports.LayoutProcessor = LayoutProcessor;
diff --git a/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.d.ts b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.d.ts
deleted file mode 100644
index 88dee21..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { ProcessorSubscription } from '../interfaces/ProcessorSubscription';
-import { LayoutProcessor } from '../interfaces/Processors';
-export declare class LayoutProcessorsStore {
-    private layoutProcessors;
-    addProcessor(processor: LayoutProcessor): ProcessorSubscription;
-    getProcessors(): LayoutProcessor[];
-    private removeProcessor;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.js b/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.js
deleted file mode 100644
index fe5da82..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/processors/LayoutProcessorsStore.js
+++ /dev/null
@@ -1,17 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.LayoutProcessorsStore = void 0;
-class LayoutProcessorsStore {
-    layoutProcessors = [];
-    addProcessor(processor) {
-        this.layoutProcessors.push(processor);
-        return { remove: () => this.removeProcessor(processor) };
-    }
-    getProcessors() {
-        return this.layoutProcessors;
-    }
-    removeProcessor(processor) {
-        this.layoutProcessors.splice(this.layoutProcessors.indexOf(processor));
-    }
-}
-exports.LayoutProcessorsStore = LayoutProcessorsStore;
diff --git a/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.d.ts b/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.d.ts
deleted file mode 100644
index 92c142d..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.d.ts
+++ /dev/null
@@ -1,8 +0,0 @@
-import { ProcessorSubscription } from '../interfaces/ProcessorSubscription';
-import { OptionsProcessor } from '../interfaces/Processors';
-export declare class OptionProcessorsStore {
-    private optionsProcessorsByObjectPath;
-    addProcessor<T>(optionPath: string, processor: OptionsProcessor<T>): ProcessorSubscription;
-    getProcessors(optionPath: string): OptionsProcessor<any, any>[];
-    private removeProcessor;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.js b/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.js
deleted file mode 100644
index 5467208..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/processors/OptionProcessorsStore.js
+++ /dev/null
@@ -1,19 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.OptionProcessorsStore = void 0;
-class OptionProcessorsStore {
-    optionsProcessorsByObjectPath = {};
-    addProcessor(optionPath, processor) {
-        if (!this.optionsProcessorsByObjectPath[optionPath])
-            this.optionsProcessorsByObjectPath[optionPath] = [];
-        this.optionsProcessorsByObjectPath[optionPath].push(processor);
-        return { remove: () => this.removeProcessor(optionPath, processor) };
-    }
-    getProcessors(optionPath) {
-        return this.optionsProcessorsByObjectPath[optionPath];
-    }
-    removeProcessor(optionPath, processor) {
-        this.optionsProcessorsByObjectPath[optionPath].splice(this.optionsProcessorsByObjectPath[optionPath].indexOf(processor));
-    }
-}
-exports.OptionProcessorsStore = OptionProcessorsStore;
diff --git a/node_modules/react-native-navigation/lib/dist/src/types.d.ts b/node_modules/react-native-navigation/lib/dist/src/types.d.ts
deleted file mode 100644
index e31dda0..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/types.d.ts
+++ /dev/null
@@ -1,5 +0,0 @@
-/// <reference types="react" />
-declare module 'react-lifecycles-compat' {
-    import * as React from 'react';
-    function polyfill(component: React.ComponentClass<any>): void;
-}
diff --git a/node_modules/react-native-navigation/lib/dist/src/types.js b/node_modules/react-native-navigation/lib/dist/src/types.js
deleted file mode 100644
index 3918c74..0000000
--- a/node_modules/react-native-navigation/lib/dist/src/types.js
+++ /dev/null
@@ -1 +0,0 @@
-"use strict";
diff --git a/node_modules/react-native-navigation/lib/src/adapters/NativeEventsReceiver.mock.ts b/node_modules/react-native-navigation/lib/src/adapters/NativeEventsReceiver.mock.ts
index 69e8f0e..a7509d2 100644
--- a/node_modules/react-native-navigation/lib/src/adapters/NativeEventsReceiver.mock.ts
+++ b/node_modules/react-native-navigation/lib/src/adapters/NativeEventsReceiver.mock.ts
@@ -1 +1,3 @@
-export const { NativeEventsReceiver } = jest.genMockFromModule('./NativeEventsReceiver');
+export const { NativeEventsReceiver } = jest.genMockFromModule(
+  './NativeEventsReceiver'
+) as typeof import('./NativeEventsReceiver');
